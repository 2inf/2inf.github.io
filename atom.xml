<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>2inf&#39;s blog</title>
  
  <subtitle>落叶他乡树，寒灯独夜人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://2inf.top/"/>
  <updated>2020-01-20T09:26:09.967Z</updated>
  <id>https://2inf.top/</id>
  
  <author>
    <name>小蒟蒻ywt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[BZOJ4755] 扭动的回文串</title>
    <link href="https://2inf.top/2019/10/30/BZOJ4755-%E6%89%AD%E5%8A%A8%E7%9A%84%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>https://2inf.top/2019/10/30/BZOJ4755-扭动的回文串/</id>
    <published>2019-10-30T09:05:44.000Z</published>
    <updated>2020-01-20T09:26:09.967Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4755" target="_blank" rel="noopener">题目链接</a></p><p>  题解:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=4755&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  题解:&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
      <category term="ACM" scheme="https://2inf.top/categories/ACM/"/>
    
    
      <category term="字符串" scheme="https://2inf.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Manacher" scheme="https://2inf.top/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>浅析快速傅里叶变换</title>
    <link href="https://2inf.top/2019/10/12/%E6%B5%85%E6%9E%90%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    <id>https://2inf.top/2019/10/12/浅析快速傅里叶变换/</id>
    <published>2019-10-12T15:39:22.000Z</published>
    <updated>2019-12-12T15:10:51.619Z</updated>
    
    <content type="html"><![CDATA[<p>  据说现在打信息竞赛的初中生都会<span class="math inline">\(FFT(Fast\ Fourier\ Transform)\)</span>了, 但严格而言这应该是信号里的内容, 在<span class="math inline">\(OI\)</span>里可以快速求卷积, 下个学期专业课也会有, 于是前段日子学了一下, 想以此文回顾一下</p><h2 id="快速傅里叶变换">快速傅里叶变换</h2><p>  快速傅里叶变换可以认为有<span class="math inline">\(DFT\)</span>和<span class="math inline">\(IDFT\)</span>两个部分, 分别在<span class="math inline">\(O(nlogn)\)</span>的复杂度将系数转换成点值表示并转化回来.</p><h4 id="cooley-turkey算法"><span class="math inline">\(Cooley-Turkey\)</span>算法</h4><p>  <span class="math inline">\(Cooley-Turkey\)</span>是FFT中最常见的的算法, 基本思想由<span class="math inline">\(J.W.Cooley\)</span>和<span class="math inline">\(J.W.Tukey\)</span>在<span class="math inline">\(1965\)</span>年提出, 是一个基于分治策略的算法, 假设现在有一个<span class="math inline">\(n-1\)</span>次多项式<span class="math inline">\(A(x) = \displaystyle\sum_{i=0}^{n-1}a_ix^i\)</span>, 为方便叙述, 假设<span class="math inline">\(n=2^m,m\in\mathbb{Z}\)</span>, 如果系数不足可以在高次项补<span class="math inline">\(0\)</span>.</p><p>  设<span class="math inline">\(n\)</span>个单位根<span class="math inline">\(w_n^0,w_n^1,\cdots,w_n^{n-1}\)</span>代入<span class="math inline">\(A(x)\)</span>转化成点值表达, <span class="math display">\[A(w_n^k)=\sum_{i=0}^{n-1}a_iw^{ki}, k = 0,1,\cdots,n-1\]</span>   点值向量<span class="math inline">\(\vec y=\left(A(w_n^0),A(w_n^1),\cdots,A(w_n^{n-1}))\right)\)</span>称作系数向量<span class="math inline">\(\vec a=(a_0,a_1,\cdots,a_n)\)</span>的<strong>离散傅里叶变换</strong>(Discrete Fourier Transform, DFT), 记作<span class="math inline">\(\vec y = DFT_n(\vec a)\)</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  据说现在打信息竞赛的初中生都会&lt;span class=&quot;math inline&quot;&gt;\(FFT(Fast\ Fourier\ Transform)\)&lt;/span&gt;了, 但严格而言这应该是信号里的内容, 在&lt;span class=&quot;math inline&quot;&gt;\(OI\)&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="https://2inf.top/categories/ACM/"/>
    
    
  </entry>
  
  <entry>
    <title>Catalan数的原理与应用</title>
    <link href="https://2inf.top/2019/10/12/Catalan%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://2inf.top/2019/10/12/Catalan数的原理与应用/</id>
    <published>2019-10-12T07:30:20.000Z</published>
    <updated>2019-12-12T15:11:27.721Z</updated>
    
    <content type="html"><![CDATA[<hr><p>由于<span class="math inline">\(C_2=C_3=1\)</span></p><p>设<span class="math inline">\(G(x)=C_2+C_3x+C_4x^2+\cdots\)</span> <span class="math display">\[x^2:C_4=C_2C_3+C_3C_2\\x^3:C_5=C_2C_4+C_3C_3+C_4C_2\\x^4:C_6=C_2C_5+C_3C_4+C_4C_3+C_5C_2\\\vdots\]</span> <span class="math display">\[\begin{array}{l}G(x)-x-1&amp;=&amp;C_2(C_3x^2+C_4x^3+\cdots)\\&amp;&amp;+C_3x(C_2x+C_3x^2+\cdots)\\&amp;&amp;+C_4x^2(C_2x+C_3x^2+\cdots)+\cdots\\&amp;=&amp;-x+C_2(C_2x+C_3x^2+\cdots)\\&amp;&amp;+C_3x(C_2x+C_3x^2+\cdots)+\cdots\end{array}\]</span></p><p><span class="math display">\[\Longrightarrow\quad\quad \begin{array}{l}G(x)-1&amp;=&amp;(C_2+C_3x+C_4x^2+\cdots)(C_2x+C_3x^2+\cdots)\\&amp;=&amp;x[G(x)]2\end{array}\]</span></p><p><span class="math display">\[xG^2(x)-G(x)+1=0\\G(x)=\frac{1-\sqrt{1-4x}}{2x}\]</span></p><p>  而<span class="math inline">\(\displaystyle(1-4x)^{\frac{1}{2}}=1+\frac{1}{2}(-4x)-\frac{\displaystyle\frac{1}{2}(\frac{1}{2}-1)}{2!}(-4x)^2+\frac{\displaystyle\frac{1}{2}(\frac{1}{2}-1)(\frac{1}{2}-2)}{3!}(-4x)^3+\cdots\)</span></p><p>所以<span class="math inline">\((1-4x)^{\frac{1}{2}}\)</span>中<span class="math inline">\(x^{n+1}\)</span>项的系数为 <span class="math display">\[\begin{array}{l}&amp;&amp;\displaystyle\frac{1}{(n+1)!}\frac{1}{2}\left(\frac{1}{2}-1\right)\left(\frac{1}{2}-2\right)\cdots\left(\frac{1}{2}-n\right)(-4)^{n+1}\\&amp;=&amp;\displaystyle\frac{(-1)^{2n+1}}{(n+1)!}\frac{1\cdot3\cdot\cdots\cdot(2n-1)}{2^{n+1}}2^{2n+2}\\&amp;=&amp;\displaystyle\frac{-2}{n+1}\frac{(2n)!}{(n!)^2}=\frac{-2}{n+1}\begin{pmatrix}2n\\n\end{pmatrix}\end{array}\]</span></p><p>故<span class="math inline">\(\displaystyle G(x)=\frac{1-\sqrt{1-4x}}{2x}\)</span>且 <span class="math display">\[C_{n+1}=\frac{1}{n}\begin{pmatrix}2n-2\\n-1\end{pmatrix}\]</span></p><hr><p>由递推关系 <span class="math display">\[nC_{n+1}=(4n-6)C_n\]</span> <span class="math display">\[G(x)=C_2x+C_3x^2+C_4x^3+\cdots\\x:2C_3=4\cdot2C_2-6C_2\\x^2:3C_4=4\cdot3C_3-6C_3\\\vdots\]</span> <span class="math display">\[G&#39;(x)-1=4[xG(x)]&#39;-6G(x)\]</span> <span class="math display">\[G(x)=C\sqrt{1-4x}+\frac{1}{2}\]</span> 由<span class="math inline">\(G(0)=0,\)</span>有<span class="math inline">\(\displaystyle C=-\frac{1}{2},\)</span>即<span class="math inline">\(\displaystyle G(x)=\frac{1-\sqrt{1-4x}}{2}\)</span></p><hr><ol type="1"><li><span class="math inline">\(C_{n+1}=C_2C_n+C_3C_{n-1}+\cdots+C_{n-1}C_3+C_nC_2\)</span></li><li><span class="math inline">\((n-3)C_n=\frac{n}{2}(C_3C_{n-1}+C_4C_{n-2}+\cdots+C_{n-1}C_3)\)</span></li></ol><p>待填坑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;由于&lt;span class=&quot;math inline&quot;&gt;\(C_2=C_3=1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;设&lt;span class=&quot;math inline&quot;&gt;\(G(x)=C_2+C_3x+C_4x^2+\cdots\)&lt;/span&gt; &lt;span cl
      
    
    </summary>
    
      <category term="数学" scheme="https://2inf.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="组合数学" scheme="https://2inf.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>一些字符串算法小结</title>
    <link href="https://2inf.top/2019/09/08/%E4%B8%80%E4%BA%9B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://2inf.top/2019/09/08/一些字符串算法小结/</id>
    <published>2019-09-08T07:52:32.000Z</published>
    <updated>2019-10-30T08:49:53.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="manacher算法"><span class="math inline">\(Manacher\)</span>算法</h2><p>  <del>众所周知</del>, <span class="math inline">\(Manacher\)</span>算法是一个求字符串中最长回文子序列问题的算法, 可以想到一个比较显然的做法: 长度为奇数的回文串以最中间字符的位置为对称轴, 而长度为偶数的回文串的对称轴在中间两个字符之间的空隙处. 于是我们考虑遍历这些对称轴, 并且同时向左右扩展, 直到左右两边的字符不同或到达边界.</p><p>  这个算法的复杂度是<span class="math inline">\(O(n^2)\)</span>, 是无法过一些较大数据范围的题, 我们来思考一下这个算法的缺点, 显然, 回文串长度的奇偶性造成了对称轴的位置可能在某字符上, 也可能在两个字符之间的空隙处，要对两种情况分别处理. 为了解决这个问题, 可以强行在原字符串中插入其他本字符串不会出现的字符, 如<code>"#"</code>.</p><p>  对于整个算法的主体, 定义<span class="math inline">\(p[i]\)</span>表示以字符<span class="math inline">\(i\)</span>为回文中心的最长回文串的半径, 那么<span class="math inline">\(p[i]-1\)</span>就是字符串中最长回文串的长度(除去<code>'#'</code>), 定义<span class="math inline">\(maxr\)</span>为目前找到回文串的最右端, 中心为<span class="math inline">\(id\)</span>, 当我们扫描到的位置<span class="math inline">\(i\)</span>, 若<span class="math inline">\(id\leq i\leq maxr\)</span>, 可以找到对称点<span class="math inline">\(2*id-i\)</span>求出其最长半径, 那么<span class="math inline">\(p[i] = \min(p[2*id-i], maxr-i)\)</span></p><p><a href="https://www.luogu.org/problem/P3805" target="_blank" rel="noopener">[模板]<span class="math inline">\(Manacher\)</span>算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans, p[N];</span><br><span class="line"><span class="keyword">char</span> s[N], str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    str[<span class="number">0</span>] = str[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        str[(i&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>] = s[i];</span><br><span class="line">        str[(i&lt;&lt;<span class="number">1</span>)+<span class="number">3</span>] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = (n&lt;&lt;<span class="number">1</span>) + <span class="number">2</span>; str[n] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; str[i] != <span class="number">0</span>; ++i) str[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxr &gt; i) p[i] = min(p[<span class="number">2</span>*id-i], maxr - i);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; str[i+p[i]] == str[i-p[i]]; ++p[i]);</span><br><span class="line">        <span class="keyword">if</span> (p[i] + i &gt; maxr) &#123; maxr = p[i] + i; id = i; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    init();</span><br><span class="line">    manacher();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans = max(ans, p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kmp算法"><span class="math inline">\(KMP\)</span>算法</h2><p>  <span class="math inline">\(KMP\)</span>算法, 又名模式匹配算法, 能在线性时间内判定字符串<span class="math inline">\(B[1\sim m]\)</span>是否为字符串<span class="math inline">\(A[1\sim n]\)</span>的字串, 并求出字符串<span class="math inline">\(B\)</span>在字符串<span class="math inline">\(A\)</span>中各次出现的位置.</p><p>  容易想到一个<span class="math inline">\(O(nm)\)</span>的朴素算法, 暴力枚举字符串<span class="math inline">\(B\)</span>中每个位置<span class="math inline">\(i\)</span>, 逐一比较<span class="math inline">\(B[1]\)</span>与<span class="math inline">\(A[i]\)</span>, <span class="math inline">\(B[2]\)</span>与<span class="math inline">\(A[i+1]\cdots\)</span>是否相等. 而<span class="math inline">\(KMP\)</span>算法在匹配前会预处理模式串<span class="math inline">\(B\)</span>, 具体步骤如下:</p><ol type="1"><li>对字符串<span class="math inline">\(B\)</span>进行自我匹配, 求出数组<span class="math inline">\(next\)</span>, 其中<span class="math inline">\(next[i]\)</span>表示"<span class="math inline">\(B\)</span>中以i结尾的非前缀子串"与"<span class="math inline">\(B\)</span>的前缀"能够匹配的最大长度. 即:<span class="math inline">\(next[i]=\max\{j\},\)</span> 其中<span class="math inline">\(j&lt;i\)</span>并且<span class="math inline">\(B[i-j+1\sim i]=B[1\sim j]\)</span>, 若不存在这样的<span class="math inline">\(j\)</span>， 则<span class="math inline">\(next[i]=0\)</span></li><li>对字符串<span class="math inline">\(B\)</span>与<span class="math inline">\(A\)</span>进行匹配, 求出一个数组<span class="math inline">\(f\)</span>, 其中<span class="math inline">\(f[i]\)</span>表示"<span class="math inline">\(A\)</span>中以<span class="math inline">\(i\)</span>结尾的字串"与"<span class="math inline">\(B\)</span>的前缀"能够匹配的最长长度. 即:<span class="math inline">\(f[i]=\max\{j\}\)</span>, 其中<span class="math inline">\(j\leq i\)</span>并且<span class="math inline">\(A[i-j+1\sim i]=B[1\sim j]\)</span></li></ol><p>  如果我们采用朴素算法计算<span class="math inline">\(next\)</span>数组, 即枚举<span class="math inline">\(j\in[1,i-1]\)</span>, 并检查<span class="math inline">\(A[i-j+1\sim i]\)</span>与<span class="math inline">\(A[1\sim j]\)</span>是否相等. 时间复杂度不会低于<span class="math inline">\(O(n^2)\)</span>, 为了更快求解<span class="math inline">\(next\)</span>, 有以下引理.</p><p><strong>引理</strong>   若<span class="math inline">\(j_0\)</span>是<span class="math inline">\(next[i]\)</span>的一个"候选项", 即<span class="math inline">\(j_0&lt;i\)</span>且<span class="math inline">\(A[i-j_0+1\sim i]=A[1\sim j_0]\)</span>, 则小于<span class="math inline">\(j_0\)</span>的最大的<span class="math inline">\(next[i]\)</span>的"候选项"是<span class="math inline">\(next[j_0]\)</span>. 也即<span class="math inline">\(next[j_0]+1\sim j_0-1\)</span>之间的数都不是<span class="math inline">\(next[i]\)</span>的候选项</p><p><a href="https://www.luogu.org/problem/P3375" target="_blank" rel="noopener">[模板]<span class="math inline">\(KMP\)</span>算法</a> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> n, m, Next[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; b[i] != b[j+<span class="number">1</span>]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line">        Next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), m = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    calc();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[i] != b[j+<span class="number">1</span>]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - m + <span class="number">1</span>); j = Next[j];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, Next[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="trie字典树"><span class="math inline">\(Trie\)</span>(字典树)</h2><p>  <span class="math inline">\(Trie\)</span>是一种用于实现字符串快速检索的多叉树结构, 其基本操作如下:</p><ol type="1"><li>若<span class="math inline">\(P\)</span>的<span class="math inline">\(c\)</span>字符指针指向一个已经存在的节点<span class="math inline">\(Q\)</span>, 则令<span class="math inline">\(P=Q\)</span></li><li>若<span class="math inline">\(P\)</span>的<span class="math inline">\(c\)</span>字符指针指向空, 则新建一个节点<span class="math inline">\(Q\)</span>, 令<span class="math inline">\(P\)</span>的<span class="math inline">\(c\)</span>字符指针指向<span class="math inline">\(Q\)</span>, 然后令<span class="math inline">\(P=Q\)</span></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> trie[N][<span class="number">26</span>], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> ch = str[k] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!trie[p][ch]) trie[p][ch] = ++tot;</span><br><span class="line">        p = trie[p][ch];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        p = trie[p][str[k]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!p) <span class="keyword">return</span> ans;</span><br><span class="line">        ans += ed[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ac自动机"><span class="math inline">\(AC\)</span>自动机</h2><p>  很多聚聚都说<span class="math inline">\(AC\)</span>自动机就是在<span class="math inline">\(trie\)</span>树上进行<span class="math inline">\(KMP\)</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;manacher算法&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(Manacher\)&lt;/span&gt;算法&lt;/h2&gt;
&lt;p&gt;  &lt;del&gt;众所周知&lt;/del&gt;, &lt;span class=&quot;math inline&quot;&gt;\(Manacher\)&lt;/span
      
    
    </summary>
    
      <category term="ACM" scheme="https://2inf.top/categories/ACM/"/>
    
    
      <category term="字符串" scheme="https://2inf.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>组合数性质探究</title>
    <link href="https://2inf.top/2019/09/06/%E7%BB%84%E5%90%88%E6%95%B0%E6%80%A7%E8%B4%A8%E6%8E%A2%E7%A9%B6/"/>
    <id>https://2inf.top/2019/09/06/组合数性质探究/</id>
    <published>2019-09-06T15:51:48.000Z</published>
    <updated>2019-09-08T16:58:37.275Z</updated>
    
    <content type="html"><![CDATA[<p>  首先我们回顾一下一些简单性质</p><ol type="1"><li><span class="math inline">\(\begin{pmatrix}n\\k\end{pmatrix}=\displaystyle\frac{n!}{k!(n-k)!}\)</span></li><li><span class="math inline">\(\begin{pmatrix}n\\k\end{pmatrix}=\displaystyle\frac{n}{k}\begin{pmatrix}n-1\\k-1\end{pmatrix}\)</span></li><li><span class="math inline">\(\begin{pmatrix}n\\k\end{pmatrix}=\begin{pmatrix}n-1\\k\end{pmatrix}+\begin{pmatrix}n-1\\k-1\end{pmatrix}\)</span></li><li><span class="math inline">\(\begin{pmatrix}n\\m\end{pmatrix}\begin{pmatrix}m\\k\end{pmatrix}=\begin{pmatrix}n\\k\end{pmatrix}\begin{pmatrix}n-k\\m-k\end{pmatrix}\)</span></li><li><span class="math inline">\(\displaystyle\sum_{m=0}^n\begin{pmatrix}m\\k\end{pmatrix}=\begin{pmatrix}n+1\\k+1\end{pmatrix}\)</span></li><li><span class="math inline">\(\displaystyle\sum_{k=0}^nk\begin{pmatrix}n\\k\end{pmatrix}=n2^{n-1},\quad\sum_{k=0}^nk^2\begin{pmatrix}n\\k\end{pmatrix}=n(n+1)2^{n-2}\)</span></li></ol><h2 id="组合数的计算">组合数的计算</h2><ul><li>利用<span class="math inline">\(性质3\)</span></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    C[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= i; ++j) C[i][j] = C[i<span class="number">-1</span>][j<span class="number">-1</span>] + C[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>预处理阶乘和阶乘逆元</p></li><li><p><span class="math inline">\(Lucas\)</span>定理</p></li></ul><p><span class="math display">\[\begin{pmatrix}n\\m\end{pmatrix}\equiv\begin{pmatrix}\lfloor n/p\rfloor\\\lfloor m/p\rfloor\end{pmatrix}\begin{pmatrix}n\mod p\\m\mod p\end{pmatrix}\pmod p\qquad (p为素数)\]</span></p><p><span class="math inline">\(proof:\quad\)</span>设<span class="math inline">\(n=sp+q,m=tp+r\ (q,r\leq p)\)</span>,那么 <span class="math display">\[\begin{array}{l}(1+x)^n&amp;=&amp;\left((1+x)^p\right)^s(1+x)^q\\&amp;\equiv&amp;(1+x^p)^s(1+x)^q\pmod p\\&amp;=&amp;\displaystyle\sum_{i=0}^s\begin{pmatrix}s\\i\end{pmatrix}x^{ip}\sum_{j=0}^q\begin{pmatrix}q\\j\end{pmatrix}x^j\\\end{array}\]</span></p><p>可以得到</p><p><span class="math display">\[(1+x)^{sp+q}\equiv\sum_{i=0}^s\begin{pmatrix}s\\i\end{pmatrix}x^{ip}\sum_{j=0}^q\begin{pmatrix}q\\j\end{pmatrix}x^j\pmod p\]</span></p><p><span class="math inline">\(LHS\)</span>中<span class="math inline">\((1+x)^{sp+q}\)</span>中的<span class="math inline">\(x^{tp+r}\)</span>系数为<span class="math inline">\(\begin{pmatrix}sp+q\\tp+r\end{pmatrix}\)</span>, <span class="math inline">\(RHS\)</span>中的<span class="math inline">\(x^{tp+r}\)</span>系数为<span class="math inline">\(\begin{pmatrix}s\\t\end{pmatrix}\begin{pmatrix}q\\r\end{pmatrix}\)</span>, 从而</p><p><span class="math display">\[\begin{pmatrix}sp+q\\tp+r\end{pmatrix}\equiv\begin{pmatrix}s\\t\end{pmatrix}\begin{pmatrix}q\\r\end{pmatrix}\pmod p\]</span></p><p>这与原命题等价, 证毕.</p><p><a href="https://www.luogu.org/problem/P3807" target="_blank" rel="noopener"><span class="math inline">\(Lucas\)</span>定理模板题</a> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,l,r) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,v) memset(a, v, sizeof(a))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; ll f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll t, p, f[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a % p)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f[n] * power(f[m], p - <span class="number">2</span>) % p * power(f[n-m], p - <span class="number">2</span>) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> C(n % p, m % p) * lucas(n / p, m / p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(t);</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        read(n), read(m), read(p);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        inc(i,<span class="number">1</span>,p) f[i] = f[i<span class="number">-1</span>] * i % p;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, lucas(n + m, m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>勒让德定理<span class="math inline">\((\)</span>或者叫扩展<span class="math inline">\(Lucas\)</span><span class="math inline">\()\)</span></li></ul><p>  勒让德定理：在正数<span class="math inline">\(n!\)</span>的素因子标准分解式中，素数<span class="math inline">\(p\)</span>的最高指数为<span class="math inline">\((n!)=\displaystyle\sum_{m=1}^\infty\left[\frac{n}{p^m}\right]\)</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  首先我们回顾一下一些简单性质&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(\begin{pmatrix}n\\k\end{pmatrix}=\displaystyle\frac{n!}{k!(n-k)!}\)&lt;
      
    
    </summary>
    
      <category term="数学" scheme="https://2inf.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="组合数学" scheme="https://2inf.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几个特殊函数</title>
    <link href="https://2inf.top/2019/08/28/%E6%B5%85%E8%B0%88%E5%87%A0%E4%B8%AA%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0/"/>
    <id>https://2inf.top/2019/08/28/浅谈几个特殊函数/</id>
    <published>2019-08-27T16:14:43.000Z</published>
    <updated>2019-10-28T06:13:48.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gamma函数"><span class="math inline">\(\Gamma函数\)</span></h2><p>  <span class="math inline">\(\Gamma\)</span>函数是由如下含参数变量定义的积分, 又称第二类<span class="math inline">\(Euler\)</span>积分, 其含参积分定义为</p><p><span class="math display">\[\Gamma(s)=\int_0^{+\infty}x^{s-1}e^{-x}\mathrm{d}x \tag{1}\]</span></p><p>它有 <strong><span class="math inline">\(Gauss\)</span>无穷乘积</strong>分解(<span class="math inline">\(Euler-Gauss\)</span>公式)</p><p><span class="math display">\[\Gamma(x)=\lim_{n\to\infty}\frac{n!n^x}{x(x+1)\cdots(x+n)}\]</span></p><p><strong>性质:</strong></p><ol type="1"><li><span class="math inline">\(\Gamma(s+1)=s\Gamma(s)\ (s&gt;0)\)</span></li><li><span class="math inline">\(\Gamma(s)=2\displaystyle\int_0^{+\infty}x^{2s-1}e^{-x^2}\mathrm{d}x\)</span></li><li><span class="math inline">\(\Gamma(s)\)</span>在<span class="math inline">\((0,+\infty)\)</span>上为严格下凸函数, 它及其任意阶导数都连续, 且 <span class="math display">\[\Gamma^{(n)}(s)=\int_0^{+\infty}x^{s-1}(\ln x)^ne^{-x}\mathrm{d}x\]</span></li></ol><h2 id="rmb函数"><span class="math inline">\(\rm{B}函数\)</span></h2><p>  <span class="math inline">\({\rm{B}}\)</span>函数是由如下含两个参变量的瑕积分定义的函数</p><p><span class="math display">\[{\rm{B}}\left(p,q\right)=\int_0^1x^{p-1}(1-x)^{q-1}\mathrm{d}x,\quad p,q&gt;0 \tag{2}\]</span></p><p><strong>性质:</strong></p><ol type="1"><li><span class="math inline">\({\rm{B}}(p,q)={\rm{B}}(q,p)\)</span></li><li><span class="math inline">\({\rm{B}}(p,q)=\displaystyle\frac{p-1}{p+q-1}{\rm{B}}(p-1,q)\)</span></li><li><span class="math inline">\({\rm{B}}(p,q)=2\displaystyle\int_0^\frac{\pi}{2}\cos^{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}\theta\)</span></li><li><span class="math inline">\({\rm{B}}(p,q)=\displaystyle\int_0^{+\infty}\frac{x^{q-1}}{(1+x)^{p+q}}\mathrm{d}x\)</span></li></ol><h2 id="二者的关系">二者的关系</h2><p>  设<span class="math inline">\(p&gt;0,q&gt;0\)</span>则有<span class="math inline">\({\rm{B}}(p,q)=\displaystyle\frac{\Gamma(p)\Gamma(q)}{\Gamma(p+q)}\)</span></p><p>  <strong>证明:</strong>  由性质知</p><p><span class="math display">\[\Gamma(p)=2\int_0^{+\infty}x^{2p-1}e^{-x^2}\mathrm{d}x,\quad\Gamma(q)=2\int_0^{+\infty}x^{2q-1}e^{-x^2}\mathrm{d}x\]</span></p><p>令<span class="math inline">\(D=\left\{(x,y):0\leq x&lt;+\infty,0\leq y&lt;+\infty\right\}\)</span>, 则有</p><p><span class="math display">\[\Gamma(p)\Gamma(q)=4\iint_Dx^{2p-1}y^{2q-1}e^{-(x^2+y^2)}\mathrm{d}x\mathrm{d}y\]</span></p><p>利用极坐标变换, 记<span class="math inline">\(D_1=\displaystyle\left\{(r,\theta):0&lt;r&lt;+\infty,0\leq\theta\leq\frac{\pi}{2}\right\}\)</span>, 则有</p><p><span class="math display">\[\begin{array}{l}\Gamma(p)\Gamma(q)&amp;=&amp;4\displaystyle\iint_{D1}r^{2(p+q)-1}e^{-r^2}\cos^{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}r\mathrm{d}\theta\\&amp;=&amp;\displaystyle\left(2\int_0^\frac{\pi}{2}\cos^{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}\theta\right)\left(2\int_0^{+\infty}r^{2(p+q)-1}e^{-r^2}\mathrm{d}r\right)\\&amp;=&amp;\displaystyle{\rm{B}}(p,q)\Gamma(p+q)\end{array}\]</span></p><p>证毕.</p><hr><p>   <strong>(余元公式)</strong> 设<span class="math inline">\(0&lt;p&lt;1\)</span>, 则有</p><p><span class="math display">\[{\rm{B}}(p,1-p)=\Gamma(p)\Gamma(1-p)=\frac{\pi}{\sin p\pi}.\]</span></p><p>  <strong>证明:</strong>  由于<span class="math inline">\({\rm{B}}(p,1-p)=\displaystyle\int_0^{+\infty}\frac{x^{p-1}}{1+x}\mathrm{d}x\)</span>, 利用变量替换<span class="math inline">\(x=\frac{1}{t}\)</span>有:</p><p><span class="math display">\[\int_1^{+\infty}\frac{x^{p-1}}{1+x}\mathrm{d}x=\int_0^1\frac{x^{-p}}{1+x}\mathrm{d}x,\]</span></p><p>将<span class="math inline">\(\displaystyle\frac{1}{1+x}\)</span>展开成幂级数, 从而有</p><p><span class="math display">\[\begin{array}{l}{\rm{B}}(p,1-p)&amp;=&amp;\displaystyle\lim_{r\to1^-}\int_0^r\frac{x^{p-1}+x^{-p}}{1+x}\mathrm{d}x\\&amp;=&amp;\displaystyle\lim_{r\to1^-}\int_0^r\left[\sum_{k=0}^{+\infty}(-1)^kx^{k+p-1}+\sum_{k=0}^{+\infty}(-1)^kx^{k-p}\right]\mathrm{d}x\\&amp;=&amp;\displaystyle\lim_{r\to1^-}\left[\sum_{k=0}^{+\infty}\frac{(-1)^k}{k+p}r^{k+p}+\sum_{k=0}^{+\infty}\frac{(-1)^k}{k-p+1}r^{k-p+1}\right]\\&amp;=&amp;\displaystyle\sum_{k=0}^{+\infty}\frac{(-1)^k}{k+p}+\sum_{k=0}^{+\infty}\frac{(-1)^k}{k-p+1}\\&amp;=&amp;\displaystyle\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\left(\frac{1}{k+p}+\frac{1}{p-k}\right)\\&amp;=&amp;\displaystyle\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\frac{2p}{p^2-k^2}.\end{array}\]</span></p><p>而<span class="math inline">\(\cos px\)</span>的<span class="math inline">\(Fourier\)</span>级数为</p><p><span class="math display">\[\cos px=\frac{\sin px}{\pi}\left[\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\frac{2p}{p^2-k^2}\cos kx\right]\]</span></p><p>在<span class="math inline">\(\left|x\right|\leq\pi\)</span>处处收敛, 令<span class="math inline">\(x=0\)</span>即得</p><p><span class="math display">\[{\rm{B}}(p,1-p)=\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\frac{2p}{p^2-k^2}=\frac{\pi}{\sin p\pi}.\]</span></p><p>证毕.</p><p><strong>注</strong>:令<span class="math inline">\(p=\displaystyle\frac{1}{2}\)</span>, 得 <span class="math display">\[\Gamma^2\left(\frac{1}{2}\right)=\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{1}{2}\right)}{\Gamma(1)}={\rm{B}}(\frac{1}{2},\frac{1}{2})=\pi\]</span> 则<span class="math inline">\(\displaystyle\int_0^{+\infty}e^{-x^2}\mathrm{d}x=\frac{1}{2}\Gamma\left(\frac{1}{2}\right)=\frac{\sqrt\pi}{2}\)</span>, 也是一个得到这个重要等式的方法.</p><hr><p>  求<span class="math inline">\(\Bbb{R}^n\)</span>中单位球体<span class="math inline">\(D:x_1^2+x_2^2+\cdots x_n^2\leq1\)</span>的体积.</p><p>   <strong>分析:</strong> 考虑用与球面类似的换元求解</p><p>   <strong>解:</strong> 由<span class="math inline">\(n\)</span>重积分的集合意义, 所求体积为</p><p><span class="math display">\[V=\iint\cdots\int_D\mathrm{d}x_1\mathrm{d}x_2\cdots\mathrm{d}x_n.\]</span></p><p>作变换</p><p><span class="math display">\[\begin{cases}x_1&amp;=&amp;r\cos\theta_1,\\x_2&amp;=&amp;r\sin\theta_1\cos\theta_2\\x_3&amp;=&amp;r\sin\theta_1\sin\theta_2\cos\theta_3\\\cdots\cdots\\x_{n-1}&amp;=&amp;r\sin\theta_1\sin\theta_2\cdots\sin\theta_{n-2}\cos\theta_{n-1}\\x_{n}&amp;=&amp;r\sin\theta_1\sin\theta_2\cdots\sin\theta_{n-2}\sin\theta_{n-1}\end{cases}\]</span></p><p>其中<span class="math inline">\(\quad 0&lt;r&lt;1, 0&lt;\theta_1,\cdots,\theta_{n-2}&lt;\pi,0&lt;\theta_{n-1}&lt;2\pi\)</span>, 则其<span class="math inline">\(Jacobian\)</span>行列式</p><p><span class="math display">\[\displaystyle\frac{\partial(x_1,x_2,\cdots,x_n)}{\partial(r,\theta_1,\theta_2,\cdots,\theta_{n-1})}=r^{n-1}\sin^{n-2}\theta_1\sin^{n-3}\theta_2\cdots\sin\theta_{n-2}\]</span></p><p>由此</p><p><span class="math display">\[\begin{array}{l}V &amp;=&amp; \displaystyle\iint\cdots\int_D\mathrm{d}x_1\mathrm{d}x_2\cdots\mathrm{d}x_n\\ &amp;=&amp; \displaystyle\int_0^{2\pi}\mathrm{d}\theta_{n-1}\int_0^\pi\mathrm{d}\theta_{n-2}\cdots\int_0^\pi\mathrm{d}\theta_1\int_0^1r^{n-1}\sin^{n-2}\theta_1\sin^{n-3}\theta_2\cdots\sin\theta_{n-2}\mathrm{d}r\\ &amp;=&amp; \displaystyle\frac{2\pi}{n}\left(\int_0^\pi\sin^{n-2}\theta_1\mathrm{d}\theta_1\right)\left(\int_0^\pi\sin^{n-3}\theta_2\mathrm{d}\theta_2\right)\cdots\left(\int_0^\pi\sin\theta_{n-2}\mathrm{d}\theta_{n-2}\right)\\ &amp;=&amp; \displaystyle\frac{2\pi}{n}{\rm{B}}\left(\frac{1}{2}, \frac{n-1}{2}\right){\rm{B}}\left(\frac{1}{2},\frac{n-2}{2}\right)\cdots{\rm{B}}\left(\frac{1}{2},1\right)\\&amp;=&amp; \displaystyle\frac{2\pi}{n}\cdot\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{n-1}{2}\right)}{\displaystyle\Gamma\left(\frac{n}{2}\right)}\cdot\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{n-2}{2}\right)}{\displaystyle\Gamma\left(\frac{n-1}{2}\right)}\cdots\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma(1)}{\displaystyle\Gamma\left(\frac{3}{2}\right)}\\&amp;=&amp; \displaystyle\frac{2\pi}{n}\cdot\frac{\displaystyle\Gamma^{n-2}\left(\frac{1}{2}\right)}{\displaystyle\Gamma\left(\frac{n}{2}\right)}\\&amp;=&amp; \displaystyle\frac{\displaystyle\pi^{\frac{n}{2}}}{\displaystyle\Gamma\left(\frac{n}{2}+1\right)}.\end{array}\]</span></p><h2 id="zeta函数"><span class="math inline">\(\zeta函数\)</span></h2><p>  <strong><span class="math inline">\(Riemann\ zeta\)</span></strong> 函数<span class="math inline">\(\zeta(s)\)</span>, 是一个关于复数<span class="math inline">\(s\)</span>的函数, 在在复平面上, <span class="math inline">\(s\)</span>的实数部分<span class="math inline">\(\sigma=\scr{R}s&gt;1\)</span>时, <span class="math inline">\(\zeta(s)=\displaystyle\sum_{n=1}^\infty\frac{1}{n^s}\)</span></p><h3 id="特殊点取值">特殊点取值</h3><p>  考虑调和级数<span class="math inline">\(\zeta(1)=\displaystyle\sum_{i=1}^\infty\frac{1}{n}\)</span>, 由<span class="math inline">\(Cauchy\)</span>判别法, 级数<span class="math inline">\(S_n\)</span>收敛当且仅当<span class="math inline">\(\forall \epsilon&gt;0, \exists N, st.\ m,n&gt;N, \left|S_m-S_n\right|&lt;\epsilon\)</span></p><p><span class="math display">\[\left|S_{2n}-S_n\right|=\frac{1}{n+1}+\cdots+\frac{1}{2n}&gt;\frac{1}{2n}+\cdots+\frac{1}{2n}=\frac{1}{2}\]</span></p><p>故调和级数发散</p><p><strong><span class="math inline">\(Parseval\)</span>等式</strong></p><p><span class="math display">\[\frac{1}{\pi}\int_{-\pi}^\pi\left|f(x)\right|^2=\frac{a_0^2}{2}+\sum_{n=1}^\infty(a_n^2+b_n^2)\]</span></p><p><span class="math inline">\(\displaystyle\sum_{n=1}^\infty\frac{1}{n^2}=\frac{\pi^2}{6}\)</span></p><p><span class="math inline">\(\displaystyle\sum_{n=1}^\infty\frac{1}{n^4}=\frac{\pi^4}{90}\)</span></p><p>  <span class="math inline">\(zeta\)</span>函数的积分形式 <span class="math display">\[\zeta(s)=\sum_{n=1}^\infty\frac{1}{n^{s}}=\frac{1}{\Gamma(s)}\int_0^{+\infty}\frac{x^{s-1}}{e^x-1}\mathrm{d}x,\quad s&gt;1\]</span></p><p>  求<span class="math inline">\(\displaystyle\int_0^1\frac{\ln x}{1-x}\mathrm{d}x\)</span></p><p>   <strong>解:</strong> 令<span class="math inline">\(x=e^{-t},\)</span> 则 <span class="math display">\[\int_0^1\frac{\ln x}{1-x}\mathrm{d}x=\int_{+\infty}^0\frac{-t}{1-e^{-t}}e^{-t}(-\mathrm{d}t)=-\int_0^{+\infty}\frac{t}{e^t-1}\mathrm{d}t\]</span></p><p>在结论中取<span class="math inline">\(s=2\)</span>, 则</p><p><span class="math display">\[\int_0^1\frac{\ln x}{1-x}\mathrm{d}x=-\Gamma(2)\sum_{n=1}^{\infty}\frac{1}{n^2}=-\frac{\pi^2}{6}\]</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;gamma函数&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(\Gamma函数\)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  &lt;span class=&quot;math inline&quot;&gt;\(\Gamma\)&lt;/span&gt;函数是由如下含参数变量定义的积分, 又称第二类
      
    
    </summary>
    
      <category term="数学" scheme="https://2inf.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学分析" scheme="https://2inf.top/tags/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>反演原理及应用</title>
    <link href="https://2inf.top/2019/08/25/%E5%8F%8D%E6%BC%94%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://2inf.top/2019/08/25/反演原理及应用/</id>
    <published>2019-08-24T16:51:43.000Z</published>
    <updated>2020-01-20T10:03:06.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是反演">什么是反演</h1><p>  对于数列<span class="math inline">\(\left\{f_n\right\}\)</span>以及数列<span class="math inline">\(\left\{g_n\right\}\)</span>满足</p><p><span class="math display">\[g_n=\sum_{i=0}^na_{ni}f_i \tag{1}\]</span></p><p>  反演便是利用<span class="math inline">\(\left\{g_n\right\}\)</span>反推出<span class="math inline">\(\left\{f_n\right\}\)</span>, 也即</p><p><span class="math display">\[f_n=\sum_{i=0}^nb_{ni}g_i \tag{2}\]</span></p><p>  本质上来说这是一个反解线性方程组的过程, 但观察后会发现整个方程组是一个下三角矩阵, 可以思考出更加快捷的方法</p><h1 id="反演原理">反演原理</h1><p>  为了便于后面的叙述, 首先引入<span class="math inline">\(\delta(i,j)\)</span>函数<span class="math inline">\((Kronecker&#39;s\ delta)\)</span>, 它的定义为</p><p><span class="math display">\[\delta\left(i,j\right)=\begin{cases}1\quad i=j\\0\quad i\neq j\end{cases}\qquad(\text{也可记为}[i=j])\]</span></p><p>  下面考虑反演的过程, 考虑下面的式子应该满足什么条件</p><p><span class="math display">\[\sum_{i=0}^nb_{ni}g_i=f_n \tag{3}\]</span></p><p><span class="math display">\[\begin{array}{l}LHS&amp;=&amp;\displaystyle\sum_{i=0}^nb_{ni}g_i\\ &amp;=&amp;\displaystyle\sum_{i=0}^nb_{ni}\sum_{j=0}^ia_{ij}f_j\\&amp;=&amp;\displaystyle\sum_{i=0}^nf_i\sum_{j=i}^nb_{nj}a_{ji}\end{array}\]</span></p><p>  为了便于理解最后一步, 我们用矩阵进行表示</p><p><span class="math display">\[\begin{bmatrix}b_{n0}a_{00}f_0\\b_{n1}a_{10}f_0 &amp; b_{n1}a_{11}f_1\\b_{n2}a_{20}f_0 &amp; b_{n2}a_{21}f_1 &amp; b_{n2}a_{22}f_2\\\vdots &amp; \vdots &amp; \ddots \\b_{nn}a_{n0}f_0 &amp; b_{nn}a_{n1}f_1 &amp; \cdots &amp; b_{nn}a_{nn}f_n\end{bmatrix}\]</span></p><p>  前一个是<strong>对行</strong>进行, 再将行加起来, 后一个是<strong>对列</strong>进行, 再将列加起来</p><p>  因此, 式<span class="math inline">\((3)\)</span>成立的条件等价于</p><p><span class="math display">\[\sum_{j=i}^nb_{nj}a_{ji}=\delta(n,i) \tag{4}\]</span></p><p>  同理, 将<span class="math inline">\(f\)</span>代入带<span class="math inline">\(g\)</span>的求和式中, 可以推出</p><p><span class="math display">\[\sum_{j=i}^na_{nj}b_{ji}=\delta(n,i) \tag{5}\]</span></p><p>  如果某个数列满足上面的条件, 我们便阔以利用反演公式</p><h1 id="二项式反演">二项式反演</h1><h2 id="原理">原理</h2><p>  二项式反演<span class="math inline">\((binomial\ inversion)\)</span>在容斥中经常用到, 可以表示为</p><p><span class="math display">\[f_n=\sum_{i=0}^n\left(-1\right)^n\begin{pmatrix}n\\i\end{pmatrix}g_i\Leftrightarrowg_n=\sum_{i=0}^n\left(-1\right)^n\begin{pmatrix}n\\i\end{pmatrix}f_i \tag{6}\]</span></p><p>  可以写成另一种常见形式</p><p><span class="math display">\[f_n=\sum_{i=0}^n\begin{pmatrix}n\\i\end{pmatrix}g_i\Leftrightarrowg_n=\sum_{i=0}^n\left(-1\right)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}f_i \tag{7}\]</span></p><p><strong>证明:</strong></p><p><span class="math display">\[\begin{array}{l}g_n&amp;=&amp;\displaystyle\sum_{i=0}^n\left(-1\right)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}f_i\\&amp;=&amp;\displaystyle\sum_{i=0}^n\left(-1\right)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}\sum_{j=0}^i\begin{pmatrix}i\\j\end{pmatrix}g_j\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\sum_{j=i}^n\begin{pmatrix}n\\j\end{pmatrix}\begin{pmatrix}j\\i\end{pmatrix}\left(-1\right)^{n-j}\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\sum_{j=i}^n\begin{pmatrix}n\\i\end{pmatrix}\begin{pmatrix}n-i\\j-i\end{pmatrix}\left(-1\right)^{n-j}\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\begin{pmatrix}n\\i\end{pmatrix}\sum_{j=0}^{n-i}\begin{pmatrix}n-i\\j\end{pmatrix}\left(-1\right)^{n-i-j}\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\begin{pmatrix}n\\i\end{pmatrix}\left(1-1\right)^{n-i}\\&amp;=&amp;g_n\end{array}\]</span></p><h2 id="应用">应用</h2><ul><li>错位排列</li></ul><p>  对于长度为<span class="math inline">\(n\)</span>的序列<span class="math inline">\(\{a_i\}\)</span>, 求所有满足<span class="math inline">\(1\leq i\leq n\)</span>, 使得<span class="math inline">\(a_i\neq i\)</span>的种类数</p><p>  一个高中生想到的常规方法可能是利用递推, 记所求为<span class="math inline">\(D_n\)</span>, <span class="math inline">\(n\)</span>个错位排列按照第一位是<span class="math inline">\(2,3,\cdots,n\)</span>分成<span class="math inline">\(n-1\)</span>, 每个组排列个数一样多, 考虑其中一组, 不妨设第一位为<span class="math inline">\(2\)</span>, 若第<span class="math inline">\(2\)</span>位是<span class="math inline">\(1\)</span>,有<span class="math inline">\(D_{n-2}\)</span>种, 否则有<span class="math inline">\(D_{n-1}\)</span>种, 结合<span class="math inline">\(D_1=0,\ D_2=1\)</span>, 从而有</p><p><span class="math display">\[D_n=(n-1)(D_{n-1}+D_{n-2}) \tag{8}\]</span> <span class="math display">\[D_n-nD_{n-1}=-\left(D_{n-1}-(n-1)D_{n-2}\right)=\cdots=(-1)^{n-2} \tag{9}\]</span> <span class="math display">\[D_n=nD_{n-1}+(-1)^n=\cdots=n!\sum_{i=0}^n\frac{(-1)^i}{i!} \tag{10}\]</span></p><p>  回到正题, 我们有一个有意思的解法, 设<span class="math inline">\(f_i\)</span>为恰好有<span class="math inline">\(i\)</span>个位置是不变的排列, 那么 <span class="math display">\[n!=\sum_{i=0}^n\begin{pmatrix}n\\i\end{pmatrix}f_i \tag{11}\]</span>   可以看粗其形式和反演公式很像, 令<span class="math inline">\(g_i=i!\)</span>, 有二项式反演 <span class="math display">\[\begin{array}{l}f_n&amp;=&amp;\displaystyle\sum_{i=0}^n(-1)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}g_i\\&amp;=&amp;\displaystyle\sum_{i=0}^n(-1)^{n-i}\frac{n!}{(n-i)!}\\&amp;=&amp;n!\displaystyle\sum_{i=0}^n\frac{(-1)^i}{i!}\end{array}\]</span></p><ul><li>染色问题</li></ul><p>  <span class="math inline">\(n\)</span>个球排成一行, 有<span class="math inline">\(m\)</span>种颜色, 每个球染一个颜色, 相邻两个球染不同颜色, 每种颜色至少使用一次, 求染色方案数</p><p>  不考虑每种颜色至少用一次这一条件, 那么答案显然是<span class="math inline">\(m(m-1)^{n-1}\)</span>, 设<span class="math inline">\(f_i\)</span>为恰好使用<span class="math inline">\(i(i=0,1,2,\cdots,k)\)</span>种颜色的方案数, 那么</p><p><span class="math display">\[m(m-1)^{n-1}=\sum_{i=0}^m\begin{pmatrix}m\\i\end{pmatrix}f_i \tag{12}\]</span></p><p>  经过反演得到</p><p><span class="math display">\[f_m=\sum_{i=0}^m(-1)^{m-i}\begin{pmatrix}m\\i\end{pmatrix}g_i \tag{13}\]</span></p><p><a href="https://bzoj.zcmimi.tk/p/2839.html" target="_blank" rel="noopener"><span class="math inline">\(BZOJ2839\)</span>:集合计数</a></p><p>  记<span class="math inline">\(b_i\)</span>为交集有至少<span class="math inline">\(i\)</span>个集合的个数, 枚举<span class="math inline">\(i\)</span>个交集后, 共有<span class="math inline">\(2^{n-i}\)</span>个互不相同的集合, 每个集合又有选与不选两种方案, 故<span class="math inline">\(b_i=\begin{pmatrix}n\\i\end{pmatrix}2^{2^{n-i}}\)</span>, 那么我们开始演了</p><p><span class="math display">\[b_k=\sum_{i=k}^n\begin{pmatrix}i\\k\end{pmatrix}a_i\quad\Leftrightarrow\quad a_k=\sum_{i=k}^n(-1)^{n-k}\begin{pmatrix}i\\k\end{pmatrix}b_i\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,l,r) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,v) memset(a,v,sizeof(a))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; ll f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n, k, ans;</span><br><span class="line">ll fac[N], inv[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; a = a * a % MOD, b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[m] % MOD * inv[n-m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n) fac[i] = (ll)fac[i<span class="number">-1</span>] * i % MOD, p[i] = (ll)p[i<span class="number">-1</span>] * <span class="number">2</span> % (MOD - <span class="number">1</span>);</span><br><span class="line">    inv[n] = power(fac[n], MOD - <span class="number">2</span>);</span><br><span class="line">    dec(i,<span class="number">1</span>,n<span class="number">-1</span>) inv[i] = (ll)inv[i+<span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    inc(i,k,n) &#123;</span><br><span class="line">        (ans += MOD + ((i-k) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * (C(i,k) * C(n,i) % MOD * (power(<span class="number">2</span>, p[n-i]) % MOD))) %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="斯特林反演">斯特林反演</h1><h2 id="原理-1">原理</h2><p>  在这里, 先回顾一下斯特林数(<span class="math inline">\(dalao\)</span>请自动忽略)</p><ul><li><strong>第一类斯特林数</strong></li></ul><p>  <strong>定义:</strong> 将<span class="math inline">\(n\)</span>个元素排成<span class="math inline">\(m\)</span>个轮换的方法数</p><p>  从<span class="math inline">\(n-1\)</span>的情况推过来, 要么将最后一个元素放进自身的轮换, 要么将最后一个元素放进前<span class="math inline">\(n-1\)</span>个元素分成的<span class="math inline">\(\begin{bmatrix}n-1\\m\end{bmatrix}\)</span>个轮换中的一个, 可以得到:</p><p><span class="math display">\[\begin{bmatrix}n\\m\end{bmatrix}=\begin{bmatrix}n-1\\m-1\end{bmatrix}+(n-1)*\begin{bmatrix}n-1\\m\end{bmatrix} \tag{14}\]</span></p><p>  由于<span class="math inline">\(\begin{bmatrix}n\\ k\end{bmatrix}\)</span>是<span class="math inline">\(n\)</span>个元素恰好包含<span class="math inline">\(k\)</span>个轮换的排列个数, 对所有的<span class="math inline">\(k\)</span>求和, 必然得到排列的总数</p><p><span class="math display">\[\sum_{k=0}^n\begin{bmatrix}n\\k\end{bmatrix}=n! \tag{15}\]</span></p><p>  下面是与下降幂<span class="math inline">\(x^{\underline{n}}\)</span>和阶乘幂<span class="math inline">\(x^{\overline{n}}\)</span>的关系</p><p><span class="math display">\[x^{\underline{n}}=\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^i \tag{16}\]</span></p><p>  用归纳法证明</p><p><span class="math display">\[\begin{array}{l}x^{\underline{n+1}}&amp;=&amp;(x-n)x^{\underline{n}}\\&amp;=&amp;(x-n)\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^i\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^{i+1}-n\sum_{i=0}^{n+1}\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^i\\&amp;=&amp;\displaystyle\sum_{i=1}^{n+1}\begin{bmatrix}n\\i-1\end{bmatrix}(-1)^{n-i+1}x^{i}+n\sum_{i=0}^{n+1}\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i+1}x^i\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\left(\begin{bmatrix}n\\i-1\end{bmatrix}+n\begin{bmatrix}n\\i\end{bmatrix}\right)(-1)^{n-i+1}x^i\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\begin{bmatrix}n+1\\i\end{bmatrix}(-1)^{n+1-i}x^i\end{array}\]</span></p><p>  类似可以证明</p><p><span class="math display">\[x^{\overline{n}}=\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}x^i \tag{17}\]</span></p><ul><li><strong>第二类斯特林数</strong></li></ul><p>  <strong>定义:</strong> 将一个有<span class="math inline">\(n\)</span>件物品的集合划分成<span class="math inline">\(m\)</span>个非空子集的方法数</p><p>  从<span class="math inline">\(n-1\)</span>的情况推过来, 要么将最后一个元素单独放一类, 要么与前<span class="math inline">\(n-1\)</span>个元素的某个非空子集放一起, 可以得到:</p><p><span class="math display">\[\begin{Bmatrix}n\\m\end{Bmatrix}=\begin{Bmatrix}n-1\\m-1\end{Bmatrix}+m*\begin{Bmatrix}n-1\\m\end{Bmatrix} \tag{18}\]</span></p><p>  下面是与下降幂<span class="math inline">\(x^{\underline{n}}\)</span>和阶乘幂<span class="math inline">\(x^{\overline{n}}\)</span>的关系</p><p><span class="math display">\[m^n=\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i}} \tag{19}\]</span></p><p>  用归纳法证明, 由于<span class="math inline">\(x*x^{\underline{i}}=x^{\underline{i+1}}+ix^{\underline{i}}\)</span></p><p><span class="math display">\[\begin{array}{l}m^{n+1}&amp;=&amp;m\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i+1}}+\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}im^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=1}^{n+1}\begin{Bmatrix}n\\i-1\end{Bmatrix}m^{\underline{i}}+\sum_{i=0}^{n+1}\begin{Bmatrix}n\\i\end{Bmatrix}im^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\left(\begin{Bmatrix}n\\i-1\end{Bmatrix}+i\begin{Bmatrix}n\\i\end{Bmatrix}\right)m^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\begin{Bmatrix}n+1\\i\end{Bmatrix}m^{\underline{i}}\end{array}\]</span></p><p>  类似可以证明</p><p><span class="math display">\[m^n=\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}(-1)^{n-i}m^{\overline{i}} \tag{20}\]</span></p><p>  当然还有两个比较显然的东西</p><p><span class="math display">\[x^{\underline{n}}=(-1)(-x)^{\overline{n}} \tag{21}\]</span> <span class="math display">\[x^{\overline{n}}=(-1)(-x)^{\underline{n}} \tag{22}\]</span></p><ul><li><strong>反转公式</strong></li></ul><p><span class="math display">\[\sum_{k=m}^n(-1)^{n-k}\begin{bmatrix}n\\k\end{bmatrix}\begin{Bmatrix}k\\m\end{Bmatrix}=[m=n] \tag{23}\]</span></p><p><span class="math display">\[\sum_{k=m}^n(-1)^{n-k}\begin{Bmatrix}n\\k\end{Bmatrix}\begin{bmatrix}k\\m\end{bmatrix}=[m=n] \tag{24}\]</span></p><p><span class="math inline">\(proof\ 1:\)</span></p><p><span class="math display">\[\begin{array}{l}m^{\underline{n}}&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}m^i\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}\sum_{j=0}^i\begin{Bmatrix}i\\j\end{Bmatrix}m^{\underline{j}}\\&amp;=&amp;\displaystyle\sum_{i=0}^nm^{\underline{i}}\sum_{j=i}^n(-1)^{n-j}\begin{bmatrix}n\\j\end{bmatrix}\begin{Bmatrix}j\\i\end{Bmatrix}\end{array}\]</span></p><p><span class="math inline">\(proof\ 2:\)</span></p><p><span class="math display">\[\begin{array}{l}m^n&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}\sum_{j=0}^i(-1)^{i-j}\begin{bmatrix}i\\j\end{bmatrix}m^j\\&amp;=&amp;\displaystyle\sum_{i=0}^nm^i\sum_{j=i}^n(-1)^{n-j}\begin{Bmatrix}n\\j\end{Bmatrix}\begin{bmatrix}j\\i\end{bmatrix}\end{array}\]</span></p><ul><li><strong>斯特林反演</strong></li></ul><p><span class="math display">\[f(n)=\sum_{i=0}^n\begin{Bmatrix}n\\k\end{Bmatrix}g(k) \quad\Leftrightarrow\quad g(n)=\sum_{k=0}^n(-1)^{n-k}\begin{bmatrix}n\\k\end{bmatrix}f(k) \tag{25}\]</span></p><p>  <span class="math inline">\((25)\)</span>的证明如下:</p><p><span class="math display">\[\begin{array}{l}f(n)&amp;=&amp;\displaystyle\sum_{k=0}^n\begin{Bmatrix}n\\k\end{Bmatrix}g(k)\\&amp;=&amp;\displaystyle\sum_{k=0}^n\begin{Bmatrix}n\\k\end{Bmatrix}\sum_{j=0}^k(-1)^{k-j}\begin{bmatrix}k\\j\end{bmatrix}f(j)\\&amp;=&amp;\displaystyle\sum_{k=0}^n\sum_{j=k}^n\begin{Bmatrix}n\\j\end{Bmatrix}\begin{bmatrix}j\\k\end{bmatrix}(-1)^{j-k}f(k)\\&amp;=&amp;\displaystyle\sum_{k=0}^n[k=n]f(k)\\&amp;=&amp;f(n)\end{array}\]</span></p><h1 id="莫比乌斯反演">莫比乌斯反演</h1><h2 id="原理-2">原理</h2><p>  <strong>莫比乌斯函数<span class="math inline">\(\mu(m)\)</span></strong> 对所有整数<span class="math inline">\(m\geq1由等式\)</span></p><p><span class="math display">\[\sum_{d|m}\mu(d)=\left[m=1\right] \tag{26}\]</span></p><p>来定义, 这个等式是一个递归式, 代入<span class="math inline">\(m=1,2,\cdots,12\)</span>可以得到前<span class="math inline">\(12\)</span>个值:</p><table><thead><tr class="header"><th style="text-align: center;"><span class="math inline">\(m\)</span></th><th style="text-align: center;"><span class="math inline">\(1\)</span></th><th style="text-align: center;"><span class="math inline">\(2\)</span></th><th style="text-align: center;"><span class="math inline">\(3\)</span></th><th style="text-align: center;"><span class="math inline">\(4\)</span></th><th style="text-align: center;"><span class="math inline">\(5\)</span></th><th style="text-align: center;"><span class="math inline">\(6\)</span></th><th style="text-align: center;"><span class="math inline">\(7\)</span></th><th style="text-align: center;"><span class="math inline">\(8\)</span></th><th style="text-align: center;"><span class="math inline">\(9\)</span></th><th style="text-align: center;"><span class="math inline">\(10\)</span></th><th style="text-align: center;"><span class="math inline">\(11\)</span></th><th style="text-align: center;"><span class="math inline">\(12\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\mu(m)\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td></tr></tbody></table><p><span class="math display">\[g(m)=\sum_{d|m}f(d)\quad\Leftrightarrow\quad f(m)=\sum_{d|m}\mu(\frac{m}{d})g(d) \tag{27}\]</span></p><p>  <span class="math inline">\((27)\)</span>的证明如下: <span class="math display">\[\begin{array}{l}g(m)&amp;=&amp;\displaystyle\sum_{d|m}f(d)\\&amp;=&amp;\displaystyle\sum_{d|m}\sum_{k|d}\mu(\frac{d}{k})g(k)\\&amp;=&amp;\displaystyle\sum_{k|m}g(k)\sum_{d|m,k|d}\mu(\frac{d}{k})\\&amp;=&amp;\displaystyle\sum_{k|m}g(k)\sum_{d|(m/k)}\mu(d)\\&amp;=&amp;\displaystyle\sum_{k|m}[m/k=1]g(k)\\&amp;=&amp;g(m)\end{array}\]</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是反演&quot;&gt;什么是反演&lt;/h1&gt;
&lt;p&gt;  对于数列&lt;span class=&quot;math inline&quot;&gt;\(\left\{f_n\right\}\)&lt;/span&gt;以及数列&lt;span class=&quot;math inline&quot;&gt;\(\left\{g_n\right\
      
    
    </summary>
    
      <category term="ACM" scheme="https://2inf.top/categories/ACM/"/>
    
    
      <category term="组合数学" scheme="https://2inf.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>ACM算法模板</title>
    <link href="https://2inf.top/2019/08/24/ACM%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    <id>https://2inf.top/2019/08/24/ACM算法模板/</id>
    <published>2019-08-23T16:15:02.000Z</published>
    <updated>2020-01-20T10:16:27.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础">基础</h1><h2 id="排序">排序</h2><h3 id="归并排序">归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergesort(l, mid);</span><br><span class="line">    mergesort(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> p = l, q = mid + <span class="number">1</span>, cnt = l;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid &amp;&amp; q &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p] &lt; a[q]) t[cnt++] = a[p++];</span><br><span class="line">        <span class="keyword">else</span> t[cnt++] = a[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid) t[cnt++] = a[p++];</span><br><span class="line">    <span class="keyword">while</span>(q &lt;= r) t[cnt++] = a[q++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) a[i] = t[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序">拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head[N], u[N], v[N], deg[N], tot, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    v[++tot] = y;</span><br><span class="line">    u[tot] = head[x];</span><br><span class="line">    head[x] = tot;</span><br><span class="line">    deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!deg[i]) q.push(i);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        a[++cnt] = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = u[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = v[i];</span><br><span class="line">            <span class="keyword">if</span> (--deg[y] == <span class="number">0</span>) q.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学">数学</h2><h3 id="素数">素数</h3><ul><li><span class="math inline">\(Eratosthenes\)</span>筛法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(nloglogn)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i]) <span class="keyword">continue</span>;</span><br><span class="line">        p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N / i; ++j) v[i*j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线性筛法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] * i &lt;= N; ++j) &#123;</span><br><span class="line">            v[i*p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧几里得">欧几里得</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得">扩展欧几里得</h3><p>  在求出<span class="math inline">\(gcd(a,b)\)</span>的同时求出二元一次不定方程<span class="math inline">\(ax+by=gcd(a,b)\)</span>的一组整数解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        exgcd(b, a % b, x, y);</span><br><span class="line">        y -= a / b * y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉函数">欧拉函数</h3><p>  我们知道<span class="math inline">\(\varphi(n)\)</span>表示小于<span class="math inline">\(n\)</span>且与<span class="math inline">\(n\)</span>互素的整数个数, 而<span class="math inline">\(n\)</span>可分解为<span class="math inline">\(n=\displaystyle\prod_{i=1}^kp_i^{a_i}\)</span>, 根据容斥原理我们有</p><p><span class="math display">\[\varphi(n)=\sum_{S\subseteq\left\{p_1,p_2,\cdots,p_k\right\}}(-1)^{|S|}\frac{n}{\displaystyle\prod_{p_i\in S}p_i}\]</span></p><p>  展开后可以得到</p><p><span class="math display">\[\varphi(n)=n*\prod_{i=1}^k\left(1-\frac{1}{p_i}\right)\]</span></p><ol type="1"><li>若<span class="math inline">\(n\)</span>是素数 , 有<span class="math inline">\(\varphi(n)=n−1\)</span></li><li>若<span class="math inline">\(gcd(n,m)=1\)</span>, 有<span class="math inline">\(\varphi(mn)=\varphi(m)\varphi(n)\)</span></li><li>若<span class="math inline">\(n\)</span>和<span class="math inline">\(m\)</span>是素数 , 有<span class="math inline">\(\varphi(nm)=nm−1\)</span></li><li>若<span class="math inline">\(p\)</span>是素数 , 有<span class="math inline">\(\varphi(p^q)=p^q−p^{q−1}\)</span><br></li><li><span class="math inline">\(\displaystyle\sum_{d|m}\varphi(d)=m\)</span></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个Euler函数值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">int</span> res = n;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123; </span><br><span class="line">res -= res / i; </span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) res -= res / n; </span><br><span class="line"><span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(nlogn)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) phi[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (phi[i] == i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构">数据结构</h2><h3 id="并查集">并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论">图论</h2><h3 id="最短路">最短路</h3><h4 id="dijkstra"><span class="math inline">\(dijkstra\)</span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">int</span> a[N][N], d[N], pre[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        d[i] = INF; vis[i] = <span class="number">0</span>; pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; (x == <span class="number">-1</span> || d[j] &lt; d[x])) x = j;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + a[x][y]) &#123;</span><br><span class="line">                d[y] = d[x] + a[x][y];</span><br><span class="line">                pre[y] = x;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dijkstra堆优化"><span class="math inline">\(dijkstra(堆优化)\)</span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to, w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot].w = z;</span><br><span class="line">    e[tot].next = head[x];</span><br><span class="line">    e[tot].to = y;</span><br><span class="line">    head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + e[i].w) &#123;</span><br><span class="line">                d[y] = d[x] + e[i].w;</span><br><span class="line">                q.push(make_pair(-d[y], y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dijkstra-1"><span class="math inline">\(dijkstra\)</span></h4><ul><li>最小环</li></ul><h3 id="最小生成树">最小生成树</h3><h4 id="kruskal算法"><span class="math inline">\(Kruskal\)</span>算法</h4><p>  比较适合于稀疏图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, f[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (edge a, edge b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">krusal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = Find(e[i].u);</span><br><span class="line">        <span class="keyword">int</span> y = Find(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            ans += e[i].w;</span><br><span class="line">            f[x] = y;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//不连通</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prim算法"><span class="math inline">\(Prim\)</span>算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> a[N][N], d[N], v[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!v[j] &amp;&amp; (x == <span class="number">0</span> || d[j] &lt; d[x])) x = j;</span><br><span class="line">        v[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">if</span> (!v[y]) d[y] = min(d[y], a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="提高">提高</h1><h2 id="图论-1">图论</h2><h3 id="网络流初步">网络流初步</h3><h4 id="edmonds-karp">Edmonds-Karp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s, t, maxflow, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ver[M], edge[M], Next[M], head[N], v[N], incf[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = y, edge[tot] = z, Next[tot] = head[x], head[x] = tot;</span><br><span class="line">    ver[++tot] = x, edge[tot] = <span class="number">0</span>, Next[tot] = head[y], head[y] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s); v[s] = <span class="number">1</span>;</span><br><span class="line">    incf[s] = INF;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">            <span class="keyword">if</span> (edge[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = ver[i];</span><br><span class="line">                <span class="keyword">if</span> (v[y]) <span class="keyword">continue</span>;</span><br><span class="line">                incf[y] = min(incf[x], edge[i]);</span><br><span class="line">                pre[y] = i;</span><br><span class="line">                q.push(y);</span><br><span class="line">                v[y] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (y == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t;</span><br><span class="line">        <span class="keyword">while</span> (x != s) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = pre[x];</span><br><span class="line">            edge[i] -= incf[t];</span><br><span class="line">            edge[i^<span class="number">1</span>] += incf[t];</span><br><span class="line">            x = ver[i^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        maxflow += incf[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dinic">Dinic</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="附录">附录</h1><h2 id="对拍">对拍</h2><p><span class="math inline">\(bat\)</span>语言版本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">do</span> (</span><br><span class="line">  mine.exe &lt; stdin<span class="variable">%%i</span>.txt &gt; out<span class="variable">%%i</span>.txt</span><br><span class="line">  fc out<span class="variable">%%i</span>.txt stdout<span class="variable">%%i</span>.txt &gt; diff<span class="variable">%%i</span>.txt</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">set</span> cnt=<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%i</span>:UnAccepted!</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">del</span> diff<span class="variable">%%i</span>.txt</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%i</span>:Accepted!</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%cnt%</span>==<span class="number">0</span> <span class="built_in">color</span> a &amp;&amp; <span class="built_in">echo</span> *** Totally Accepted! ***</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%cnt%</span>==<span class="number">1</span> <span class="built_in">color</span> c &amp;&amp; <span class="built_in">echo</span> *** <span class="keyword">Not</span> All Accepted! ***</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h2 id="vim配置">vim配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> cin</span><br><span class="line"><span class="keyword">colo</span> evening</span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础&quot;&gt;基础&lt;/h1&gt;
&lt;h2 id=&quot;排序&quot;&gt;排序&lt;/h2&gt;
&lt;h3 id=&quot;归并排序&quot;&gt;归并排序&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="ACM" scheme="https://2inf.top/categories/ACM/"/>
    
    
  </entry>
  
  <entry>
    <title>TikZ入门</title>
    <link href="https://2inf.top/2019/08/12/TikZ%E5%85%A5%E9%97%A8/"/>
    <id>https://2inf.top/2019/08/12/TikZ入门/</id>
    <published>2019-08-12T07:42:14.000Z</published>
    <updated>2019-12-11T13:34:40.471Z</updated>
    
    <content type="html"><![CDATA[<p>在<span class="math inline">\(LaTex​\)</span>中, 要用<span class="math inline">\(tikz​\)</span>作图, 首先调用<span class="math inline">\(tikz​\)</span>宏包和有关的程序库 <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;tikz&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usetikzlibrary</span><span class="string">&#123;&lt;list of libraries&gt;&#125;</span></span></span><br></pre></td></tr></table></figure></p><p>然后开启<span class="math inline">\({tikzpicture}\)</span>环境作图, 或者用<span class="math inline">\(\\ tikz\)</span>开始作图. 各种命令必须以分号结束, 否则报错</p><h4 id="命令def">命令<code>\def</code></h4><p>命令<code>\def</code>用于自定义一个对象, 对象名称以反斜线, 语法为 <code>\def&lt;对象名称&gt;{定义内容}</code></p><p>下面是一个<code>\wall</code>的例子(需调用<span class="math inline">\(pattern\)</span>库) <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;tikzpicture&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">def</span></span><span class="tag">\<span class="name">wall</span><span class="string">&#123; \fill [fill=black!50] (1,-.5) rectangle (2,.5);</span></span></span><br><span class="line"><span class="tag"><span class="string">\pattern [pattern=bricks] (1,-.5) rectangle (2,.5);</span></span></span><br><span class="line"><span class="tag"><span class="string">\draw [line width=1pt] (1cm+.5pt,-.5) -- ++(0,1);&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">wall</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;tikzpicture&#125;</span></span></span><br></pre></td></tr></table></figure></p><h4 id="创建coordinate对象的句法及其命名">创建coordinate对象的句法及其命名</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">path</span></span> . . . coordinate[&lt;options&gt;](&lt;name&gt;)at(&lt;coordinate&gt;) . . . ;</span><br><span class="line"><span class="comment">%将路径中的某个对象设置为 coordinate </span></span><br><span class="line"><span class="tag">\<span class="name">coordinate</span></span>  [&lt;options&gt;](&lt;name&gt;)at(&lt;coordinate&gt;);</span><br><span class="line"><span class="comment">%这是上一句法的简写，注意最好不要在该命令后面用 node 命令。</span></span><br></pre></td></tr></table></figure><div class="row">    <embed src="blog_3.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;span class=&quot;math inline&quot;&gt;\(LaTex​\)&lt;/span&gt;中, 要用&lt;span class=&quot;math inline&quot;&gt;\(tikz​\)&lt;/span&gt;作图, 首先调用&lt;span class=&quot;math inline&quot;&gt;\(tikz​\)&lt;/s
      
    
    </summary>
    
      <category term="LaTex" scheme="https://2inf.top/categories/LaTex/"/>
    
    
      <category term="LaTex包" scheme="https://2inf.top/tags/LaTex%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>POJ1845 Sumdiv</title>
    <link href="https://2inf.top/2019/07/17/POJ1845%20Sumdiv/"/>
    <id>https://2inf.top/2019/07/17/POJ1845 Sumdiv/</id>
    <published>2019-07-17T02:47:04.000Z</published>
    <updated>2020-01-20T10:00:02.977Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1845" target="_blank" rel="noopener"><span class="math inline">\(Sumdiv\)</span></a></p><p>  <strong>题意</strong>: 求<span class="math inline">\(A^B\)</span>的所有约数之和<span class="math inline">\(\mod{9901}\left(1\leq A,B \leq5*10^7\right)\)</span></p><p>  <strong>分析</strong>: A分解质因数为<span class="math inline">\(p_1^{c_1}\times p_2^{c_2}\times\cdots\times p_n^{c_n}\)</span>。那么<span class="math inline">\(A^B\)</span>表示为<span class="math inline">\(p_1^{Bc_1}\times p_2^{Bc_2}\times\cdots\times p_n^{Bc_n}\)</span>。<span class="math inline">\(A^B\)</span>的所有约数表示为集合<span class="math inline">\(\{p_1^{k_1}\times p_2^{k_2}\times\cdots\times p_n^{k_n}\}\)</span>，其中<span class="math inline">\(0\leq k_i \leq B\times c_i\left(1\leq i \leq n\right)\)</span></p><p>  由乘法分配律, <span class="math inline">\(A^B\)</span>的所有约数之和为:</p><p><span class="math display">\[\left(1+p_1+\cdots+p_1^{B*c_1}\right)*\left(1+p_2+\cdots+p_2^{B*c_2}\right)*\cdots\\*\left(1+p_n+\cdots+p_n^{B*c_n}\right)=\prod_{i=1}^n\left(\sum_{j=0}^{B*c_i}\left(p_i\right)^j\right)\]</span></p><p>  括号内为等比数列，直接使用求和公式，需要做除法。答案还需对9901取模，mod运算只对加、减、乘有分配律，不能对分子分母取模后做除法，换一种思路，<strong>用分治法对等比数列求和</strong>。</p><p>  用分治法求<span class="math inline">\(\displaystyle\sum_{i=1}^cp^i\quad\text{若c为奇数:}\)</span> <span class="math display">\[\sum_{i=1}^cp^i=\left(1+p+\cdots+p^\frac{c-1}{2}\right)+\left(p^\frac{c+1}{2}+\cdots+p^c\right)\\=\left(1+p+\cdots+p^\frac{c-1}{2}\right)+p^\frac{c+1}{2}*\left(1+p+\cdots+p^\frac{c-1}{2}\right)\\=(1+p^\frac{c+1}{2})*\sum_{i=1}^\frac{c+1}{2}p^i\]</span></p><p>  若c为偶数，类似有:</p><p><span class="math display">\[\sum_{i=1}^cp^i=(1+p^\frac{c}{2})*\sum_{i=1}^{\frac{c}{2}-1}p^i+p^c\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1005</span>, MOD = <span class="number">9901</span>;</span><br><span class="line">pair&lt;ll, ll&gt; fac[N];</span><br><span class="line">ll cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a % MOD)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll p, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!c) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &amp; <span class="number">1</span>) <span class="keyword">return</span> (qpow(p, (c + <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>) * sum(p, c / <span class="number">2</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ((qpow(p, c / <span class="number">2</span>) + <span class="number">1</span>) * sum(p, c / <span class="number">2</span> - <span class="number">1</span>) + qpow(p, c)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ll num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                num++;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            fac[++cnt] = make_pair(i, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) fac[++cnt] = make_pair(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</span><br><span class="line">    divide(a);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        ll p = fac[i].first, c = fac[i].second;</span><br><span class="line">        ans = ans * sum(p, b * c) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a == <span class="number">0</span> ? <span class="number">0</span> : ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1845&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;math inline&quot;&gt;\(Sumdiv\)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong
      
    
    </summary>
    
      <category term="ACM" scheme="https://2inf.top/categories/ACM/"/>
    
    
      <category term="分治" scheme="https://2inf.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python简易网络爬虫</title>
    <link href="https://2inf.top/2019/04/27/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://2inf.top/2019/04/27/Python正则表达式/</id>
    <published>2019-04-27T06:13:00.000Z</published>
    <updated>2019-12-11T13:31:40.563Z</updated>
    
    <content type="html"><![CDATA[<p>上大学后自学了点爬虫, 下面是我个人的学习总结</p><h2 id="正则表达式">正则表达式</h2><h3 id="基本概念">基本概念</h3><blockquote><p>正则表达式(regular expression)，又称规则表达式。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p></blockquote><h3 id="正则表达式的语法">正则表达式的语法</h3>正则表达式语法由字符和操作符构成<br><center><b>正则表达式的常用操作符</b></center><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">说明</th><th style="text-align: center;">实例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">.</td><td style="text-align: center;">表示任何单个字符</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">[ ]</td><td style="text-align: center;">字符集, 对单个字符给出取值范围</td><td style="text-align: center;">[abc]表示a、b、c, [a-z]表示a到z单个字符</td></tr><tr class="odd"><td style="text-align: center;">[^ ]</td><td style="text-align: center;">非字符集, 对单个字符给出排除范围</td><td style="text-align: center;">[^abc]表示非a或b或c的单个字符</td></tr><tr class="even"><td style="text-align: center;">*</td><td style="text-align: center;">前一个字符0次或无限次扩展</td><td style="text-align: center;">abc*表示ab、abc、abcc、abccc等</td></tr><tr class="odd"><td style="text-align: center;">+</td><td style="text-align: center;">前一个字符1次或无限次扩展</td><td style="text-align: center;">abc+表示abc、abcc、abccc等</td></tr><tr class="even"><td style="text-align: center;">?</td><td style="text-align: center;">前一个字符0次或1次扩展</td><td style="text-align: center;">abc?表示ab、abc</td></tr><tr class="odd"><td style="text-align: center;">|</td><td style="text-align: center;">左右表达式任意一个</td><td style="text-align: center;">abc|def表示abc、def</td></tr><tr class="even"><td style="text-align: center;">{m}</td><td style="text-align: center;">扩展前一个字符m次</td><td style="text-align: center;">ab{2}c表示abbc</td></tr><tr class="odd"><td style="text-align: center;">{m,n}</td><td style="text-align: center;">扩展前一个字符m至n次(含n)</td><td style="text-align: center;">ab{1,2}表示abc、abbc</td></tr><tr class="even"><td style="text-align: center;">^</td><td style="text-align: center;">匹配字符串开头</td><td style="text-align: center;">^abc表示abc且在一个字符串的开头</td></tr><tr class="odd"><td style="text-align: center;">$</td><td style="text-align: center;">匹配字符串结尾</td><td style="text-align: center;">abc&amp;表示abc且在一个字符串的结尾</td></tr><tr class="even"><td style="text-align: center;">( )</td><td style="text-align: center;">分组标记, 内部只能使用|操作符</td><td style="text-align: center;">(abc)表示abc、(abc|def)表示abc、def</td></tr><tr class="odd"><td style="text-align: center;">\d</td><td style="text-align: center;">数字, 等价于[0-9]</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">\D</td><td style="text-align: center;">非数字字符, 等价于[^0-9]</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">\w</td><td style="text-align: center;">单词字符(包括下划线), 等价于[A-Za-z0-9_]</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">\W</td><td style="text-align: center;">非单词字符, 等价于[^A-Za-z0-9_]</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">\s</td><td style="text-align: center;">空白字符, 等价于[\f\n\r\t\v]</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">\S</td><td style="text-align: center;">非空白字符, 等价于[^\f\n\r\t\v]</td><td style="text-align: center;"></td></tr></tbody></table>Re库默认采用贪婪匹配, 即输出匹配最长的子串<center><b>最小匹配操作符</b></center><table><thead><tr class="header"><th style="text-align: center;">操作符</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">*?</td><td style="text-align: center;">前1个字符0次或无限次扩展</td></tr><tr class="even"><td style="text-align: center;">+?</td><td style="text-align: center;">前1个字符1次或无限次扩展</td></tr><tr class="odd"><td style="text-align: center;">??</td><td style="text-align: center;">前1个字符0次或1次扩展</td></tr><tr class="even"><td style="text-align: center;">{m,n}?</td><td style="text-align: center;">扩展前1个字符m次至n次</td></tr></tbody></table><p>始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><table border="3"><tr>     <th><center>表达式</center></th><th><center>意义</center></th></tr><tr>       <td><center><code>^[A-Za-z]+$</code></center></td><td><center>由26个字母组成的字符串</center></td></tr><tr>       <td><center><code>^[A-Za-z0-9]+$</code></center></td><td><center>由26个字母和数字组成的字符串</center></td></tr><tr>       <td><center><code>^-?\d+$</code></center></td><td><center>整数形式的字符串</center></td></tr><tr>       <td><center><code>^[0-9]\*[1-9][0-9]*$</code></center></td><td><center>正整数形式的字符串</center></td></tr><tr>       <td><center><code>[1-9]\d{5}</code></center></td><td><center>中国境内邮政编码, 6位</center></td></tr><tr>       <td><center><code>[\u4e00-\u9fa5]</code></center></td><td><center>匹配中文字符</center></td></tr><tr>       <td><center><code>\d{3}-\d{8}|\d{4}-\d{7}</code></center></td><td><center>国内电话号码, 010-68913536</center></td></tr><tr>       <td><center><code>(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5]).){3}(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5]))</code></center></td><td><center>匹配IP地址</center></td></tr><tr><td><center></center></td><td><center></center></td></tr><tr><td><center></center></td><td><center></center></td></tr></table><h3 id="re库的基本使用">Re库的基本使用</h3><ul><li>raw string类型, 是不包含对转义符再次转义的字符串: r'text'</li></ul><h4 id="re.searchpattern-string-flags0">re.search(pattern, string, flags=0)</h4><p>从字符串的起始位置匹配, 如果不是起始位置匹配成功的话, match()就返回none</p><ul><li><font color="red">pattern</font>: 正则表达式的字符串或原生字符串表示</li><li><font color="red">string</font>: 待匹配字符串</li><li><font color="red">flags</font>: 正则表达式使用时的控制标记</li></ul><table><thead><tr class="header"><th style="text-align: center;">修饰符</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">re.I<br>(re.IGNORECASE)</td><td style="text-align: center;">使匹配对大小写不敏感</td></tr><tr class="even"><td style="text-align: center;">re.M<br>(re.MULTILINE)</td><td style="text-align: center;">多行匹配, 正则表达式的^操作符能将给定字符串的每行当作匹配开始</td></tr><tr class="odd"><td style="text-align: center;">re.S<br>(re.DOTALL)</td><td style="text-align: center;">正则表达式的.操作符能够匹配所有字符串, 默认匹配除换行外的所有字符</td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'Hunanyz 425000'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">425000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">line = <span class="string">"Cats are smarter than dogs"</span>;</span><br><span class="line">searchObj = re.search( <span class="string">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> searchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"searchObj.group() : "</span>, searchObj.group())</span><br><span class="line"><span class="comment">#searchObj.group() :  Cats are smarter than dogs</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"searchObj.group(1) : "</span>, searchObj.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#searchObj.group(1) :  Cats</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"searchObj.group(2) : "</span>, searchObj.group(<span class="number">2</span>))</span><br><span class="line"><span class="comment">#searchObj.group(2) :  smarter</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Nothing found!!"</span>)</span><br></pre></td></tr></table></figure><h4 id="re.matchpattern-string-flags0">re.match(pattern, string, flags=0)</h4><p>re.match 从第一个字符串的开始位置起匹配正则表达式, 返回match对象</p><ul><li>group(num=0): 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</li><li>groups(): 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'Hunanyz 425000'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#15&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    match.group(<span class="number">0</span>)</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'425000 Hunanyz'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'425000'</span></span><br></pre></td></tr></table></figure><p>函数式用法: 一次性操作 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'Hunanyz 425000'</span>)</span><br></pre></td></tr></table></figure></p><p>面向对象用法: 编译后的多次操作 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = pat.search(<span class="string">'Hunanyz 425000'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="re.findallpattern-string-flags0">re.findall(pattern, string, flags=0)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'Hunanyz425000 ywt666666'</span>)</span><br><span class="line">[<span class="string">'425000'</span>, <span class="string">'666666'</span>]</span><br></pre></td></tr></table></figure><h4 id="re.splitpattern-string-maxsplit0-flags0">re.split(pattern, string, maxsplit=0, flags=0)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'Hunanyz425000 ywt666666'</span>)</span><br><span class="line">[<span class="string">'Hunanyz'</span>, <span class="string">' ywt'</span>, <span class="string">''</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'Hunanyz425000 ywt666666'</span>, maxsplit=<span class="number">1</span>)</span><br><span class="line">[<span class="string">'Hunanyz'</span>, <span class="string">' ywt666666'</span>]</span><br></pre></td></tr></table></figure><h4 id="re.finditerpattern-string-flags0">re.finditer(pattern, string, flags=0)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'Hunanyz425000 ywt666666'</span>):</span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line">print(m.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">425000</span></span><br><span class="line"><span class="number">666666</span></span><br></pre></td></tr></table></figure><h4 id="re.subpattern-repl-string-count0-flags0">re.sub(pattern, repl, string, count=0, flags=0)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">':zipcode'</span>,<span class="string">'Hunanyz425000 ywt666666'</span>)</span><br><span class="line"><span class="string">'Hunanyz:zipcode ywt:zipcode'</span></span><br></pre></td></tr></table></figure><p>可以在<a href="https://regex101.com/" class="uri" target="_blank" rel="noopener">https://regex101.com/</a>进行练习</p><h2 id="简单应用举例">简单应用举例</h2><h3 id="淘宝商品比价定向爬虫">淘宝商品比价定向爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CrawTaobaoPrice.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookies = &#123;&#125;</span><br><span class="line">        cookiestext = <span class="string">'miid=447214471620210220; t=daacc1adb7b8d8ce463fc06d0450c7ce; _m_h5_tk=002873f26cfc1e420ff3122c5492c7c9_1557484529238; _m_h5_tk_enc=65acce1ae24f182e94781af0151760a8; cna=eEfQE0Z7LH0CAXFJnusRzYTI; thw=cn; v=0; cookie2=1daeaf566f932421be0293c558854e53; _tb_token_=e4714b1e4b700; skt=fe7483af86fc3fa7; csg=c58e3cb2; uc3=vt3=F8dBy3qLpz1EFG7igHg%3D&amp;id2=Uone%2BIX5BNoxeA%3D%3D&amp;nk2=F5RMHlysDcyBUg%3D%3D&amp;lg2=VFC%2FuZ9ayeYq2g%3D%3D; existShop=MTU1NzQ3NDQ5MA%3D%3D; tracknick=tb97668932; lgc=tb97668932; _cc_=W5iHLLyFfA%3D%3D; dnk=tb97668932; tg=0; enc=3ukH3QlCeyiQ6MFTauMNgLvWKWnuXa3Jw3n2WhkpKJAmlq33XogQu8U1mIK3erlfcBDcFlwD%2B0PqC6mRrGzvUQ%3D%3D; mt=ci=110_1; hng=CN%7Czh-CN%7CCNY%7C156; x=e%3D1%26p%3D*%26s%3D0%26c%3D0%26f%3D0%26g%3D0%26t%3D0; swfstore=213919; uc1=cookie15=U%2BGCWk%2F75gdr5Q%3D%3D&amp;cookie14=UoTZ48F1Orvnkg%3D%3D; alitrackid=www.taobao.com; lastalitrackid=www.taobao.com; JSESSIONID=779A7AFFB8D472B89FE1153556AA5258; l=bBxX6XbVv0FzD8MSBOCg5uI8aPbOSLAAIuPRwNcXi_5N-6L6Vd_OlL6deFp6Vj5RO6TB4XEDz5w9-etui; isg=BGRk0tuo5AKzCBDOAudCpWpJIGKWVYgCO075jX6F8C_yKQTzpg1Y95oL6cGU0MC_'</span></span><br><span class="line">        kv = &#123;<span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> cookiestext.split(<span class="string">';'</span>):</span><br><span class="line">            name,value = line.strip().split(<span class="string">'='</span>,<span class="number">1</span>)</span><br><span class="line">            cookies[name] = value</span><br><span class="line">        r = requests.get(url,headers = kv, cookies=cookies, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt, html)</span>:</span></span><br><span class="line">    plt = re.findall(<span class="string">r'\"view_price\"\:\"[\d\.]*\"'</span>,html)</span><br><span class="line">    tlt = re.findall(<span class="string">r'\"raw_title\"\:\".*?\"'</span>,html)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">        price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">        title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">        ilt.append([price, title])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"序号"</span>, <span class="string">"价格"</span>, <span class="string">"商品名称"</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'书包'</span></span><br><span class="line">    depth = <span class="number">3</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span>*i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><a href="https://www.icourse163.org/learn/BIT-1001870001?from=study#/learn/forumdetail?pid=1212153268" target="_blank" rel="noopener">关于淘宝反爬的解决</a></p><p>关于爬虫的深入学习将在后续发布</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上大学后自学了点爬虫, 下面是我个人的学习总结&lt;/p&gt;
&lt;h2 id=&quot;正则表达式&quot;&gt;正则表达式&lt;/h2&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;基本概念&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;正则表达式(regular expression)，又称规则表达式。正则表达式
      
    
    </summary>
    
      <category term="Python" scheme="https://2inf.top/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>部分写作知识点小结</title>
    <link href="https://2inf.top/2019/01/03/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E5%B0%8F%E7%BB%93/"/>
    <id>https://2inf.top/2019/01/03/博客写作小结/</id>
    <published>2019-01-03T14:55:00.000Z</published>
    <updated>2019-12-16T06:36:53.462Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一篇测试博文</p><p><a href="https://pandoc.org/MANUAL.html#pandocs-markdown" target="_blank" rel="noopener">pandoc教程</a></p><h1 id="latex"><span class="math inline">\(LaTex\)</span></h1><p>下面教程摘自MITOPENCOURSEWARE</p><ul><li><a href="https://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/" target="_blank" rel="noopener"><u>LaTeX Tutorial</u></a></li><li><a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="noopener"><u>Draw a symbol to get its LaTeX command</u></a></li><li><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols" target="_blank" rel="noopener"><u>LaTeX Symbols</u></a></li></ul><h1 id="markdown">Markdown</h1><p>Markdown教程现在已经烂大街了，在这里主要是作为备忘录进行查阅。</p><h2 id="公式">公式</h2><p>插入公式与代码分别是用$与 ` 符号(～键)包裹所写部分</p><ul><li>在需要高亮的代码块的前一行及后一行使用三个反引号。</li><li>同时第一行反引号后面，写代码块所使用的语言。</li><li>使用 <code>\left</code>和 <code>\right</code>来创建自动匹配高度的 ()，[] 和 {} 。 在每个公式末尾前使用<code>\tag{行标}</code>来实现行标。</li></ul><h3 id="希腊字母">希腊字母</h3><table><thead><tr class="header"><th style="text-align: center;">显示</th><th style="text-align: center;">大写</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">大写</th><th style="text-align: center;">命令</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\alpha\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{A}\)</span></td><td style="text-align: center;"><code>$\alpha$</code></td><td style="text-align: center;"><span class="math inline">\(\beta\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{B}\)</span></td><td style="text-align: center;"><code>$\beta$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\gamma\)</span></td><td style="text-align: center;"><span class="math inline">\(\Gamma\)</span></td><td style="text-align: center;"><code>$\gamma$</code></td><td style="text-align: center;"><span class="math inline">\(\delta\)</span></td><td style="text-align: center;"><span class="math inline">\(\Delta\)</span></td><td style="text-align: center;"><code>$\delta$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\epsilon\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{E}\)</span></td><td style="text-align: center;"><code>$\epsilon$</code></td><td style="text-align: center;"><span class="math inline">\(\zeta\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{Z}\)</span></td><td style="text-align: center;"><code>$\zeta$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\eta\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{H}\)</span></td><td style="text-align: center;"><code>$\eta$</code></td><td style="text-align: center;"><span class="math inline">\(\theta\)</span></td><td style="text-align: center;"><span class="math inline">\(\Theta\)</span></td><td style="text-align: center;"><code>$\theta$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\iota\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{I}\)</span></td><td style="text-align: center;"><code>$\iota$</code></td><td style="text-align: center;"><span class="math inline">\(\kappa\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{K}\)</span></td><td style="text-align: center;"><code>$\kappa$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\lambda\)</span></td><td style="text-align: center;"><span class="math inline">\(\Lambda\)</span></td><td style="text-align: center;"><code>$\lambda$</code></td><td style="text-align: center;"><span class="math inline">\(\mu\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{M}\)</span></td><td style="text-align: center;"><code>$\mu$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\nu\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{N}\)</span></td><td style="text-align: center;"><code>$\nu$</code></td><td style="text-align: center;"><span class="math inline">\(\xi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Xi\)</span></td><td style="text-align: center;"><code>$\xi$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\pi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Pi\)</span></td><td style="text-align: center;"><code>$\pi$</code></td><td style="text-align: center;"><span class="math inline">\(\rho\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{R}\)</span></td><td style="text-align: center;"><code>$\rho$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\sigma\)</span></td><td style="text-align: center;"><span class="math inline">\(\Sigma\)</span></td><td style="text-align: center;"><code>$\sigma$</code></td><td style="text-align: center;"><span class="math inline">\(\tau\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{T}\)</span></td><td style="text-align: center;"><code>$\tau$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\upsilon\)</span></td><td style="text-align: center;"><span class="math inline">\(\Upsilon\)</span></td><td style="text-align: center;"><code>$\upsilon$</code></td><td style="text-align: center;"><span class="math inline">\(\phi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Phi\)</span></td><td style="text-align: center;"><code>$\phi$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\chi\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{X}\)</span></td><td style="text-align: center;"><code>$\chi$</code></td><td style="text-align: center;"><span class="math inline">\(\psi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Psi\)</span></td><td style="text-align: center;"><code>$\psi$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\omega\)</span></td><td style="text-align: center;"><span class="math inline">\(\Omega\)</span></td><td style="text-align: center;"><code>$\omega$</code></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><p>:只需将命令的首字母大写即可得大写希腊字母，在命令前加上var前缀即可得到斜体希腊字母如: <span class="math inline">\(\Gamma\phi\)</span> &amp; <span class="math inline">\(\varGamma\varphi​\)</span></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\Gamma\phi$ &amp; $\varGamma\varphi​$</span><br></pre></td></tr></table></figure><h3 id="运算">运算</h3><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\pm$</code></td><td style="text-align: center;"><span class="math inline">\(\pm\)</span></td><td style="text-align: center;"><code>$\mp$</code></td><td style="text-align: center;"><span class="math inline">\(\mp\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\neq$</code></td><td style="text-align: center;"><span class="math inline">\(\neq\)</span></td><td style="text-align: center;"><code>$\times$</code></td><td style="text-align: center;"><span class="math inline">\(\times\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\div$</code></td><td style="text-align: center;"><span class="math inline">\(\div\)</span></td><td style="text-align: center;"><code>$\leq$</code></td><td style="text-align: center;"><span class="math inline">\(\leq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\geq$</code></td><td style="text-align: center;"><span class="math inline">\(\geq\)</span></td><td style="text-align: center;"><code>$\ngeq$</code></td><td style="text-align: center;"><span class="math inline">\(\ngeq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\ast$</code></td><td style="text-align: center;"><span class="math inline">\(\ast\)</span></td><td style="text-align: center;"><code>$\approx$</code></td><td style="text-align: center;"><span class="math inline">\(\approx\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\equiv$</code></td><td style="text-align: center;"><span class="math inline">\(\equiv\)</span></td><td style="text-align: center;"><code>$bigcup$</code></td><td style="text-align: center;"><span class="math inline">\(\bigcup\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\iint$</code></td><td style="text-align: center;"><span class="math inline">\(\iint\)</span></td><td style="text-align: center;"><code>$\iiint$</code></td><td style="text-align: center;"><span class="math inline">\(\iiint\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\oint$</code></td><td style="text-align: center;"><span class="math inline">\(\oint\)</span></td><td style="text-align: center;"><code>$\mid$</code></td><td style="text-align: center;"><span class="math inline">\(\mid\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\because$</code></td><td style="text-align: center;"><span class="math inline">\(\because\)</span></td><td style="text-align: center;"><code>\therefore</code></td><td style="text-align: center;"><span class="math inline">\(\therefore\)</span></td></tr></tbody></table><h3 id="特殊符号">特殊符号</h3><table><thead><tr class="header"><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\infty\)</span></td><td style="text-align: center;"><code>$\infty$</code></td><td style="text-align: center;"><span class="math inline">\(\cup\)</span></td><td style="text-align: center;"><code>$\cup$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\cap\)</span></td><td style="text-align: center;"><code>$\cap$</code></td><td style="text-align: center;"><span class="math inline">\(\subset\)</span></td><td style="text-align: center;"><code>$\subset$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\subseteq\)</span></td><td style="text-align: center;"><code>$\subseteq$</code></td><td style="text-align: center;"><span class="math inline">\(\supset\)</span></td><td style="text-align: center;"><code>$\supset$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\in\)</span></td><td style="text-align: center;"><code>$\in$</code></td><td style="text-align: center;"><span class="math inline">\(\notin\)</span></td><td style="text-align: center;"><code>$\notin$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\varnothing\)</span></td><td style="text-align: center;"><code>$\varnothing$</code></td><td style="text-align: center;"><span class="math inline">\(\forall\)</span></td><td style="text-align: center;"><code>$\forall$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\exists\)</span></td><td style="text-align: center;"><code>$\exists$</code></td><td style="text-align: center;"><span class="math inline">\(\lnot\)</span></td><td style="text-align: center;"><code>$\lnot$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\nabla\)</span></td><td style="text-align: center;"><code>$\nabla$</code></td><td style="text-align: center;"><span class="math inline">\(\partial\)</span></td><td style="text-align: center;"><code>$\partial$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\angle\)</span></td><td style="text-align: center;"><code>$\angle$</code></td><td style="text-align: center;"><span class="math inline">\(\bot\)</span></td><td style="text-align: center;"><code>$\bot$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\bigodot\)</span></td><td style="text-align: center;"><code>$\bigodot$</code></td><td style="text-align: center;"><span class="math inline">\(\bigotimes\)</span></td><td style="text-align: center;"><code>$\bigotimes$</code></td></tr></tbody></table><h3 id="空格">空格</h3><ul><li><code>$\,$</code> <span class="math inline">\(\frac{1}{6}\)</span>m宽度</li><li><code>$\;$</code> <span class="math inline">\(\frac{2}{7}\)</span>m宽度</li><li><code>$\$</code> <span class="math inline">\(\frac{1}{3}\)</span>m宽度</li><li><code>$\quad$</code> m宽度</li><li><code>$\qquad$</code> 2m宽度</li></ul><h3 id="矢量与箭头">矢量与箭头</h3><table style="width:100%;"><colgroup><col style="width: 33%"><col style="width: 31%"><col style="width: 18%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\vec{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\vec{a}\)</span></td><td style="text-align: center;"><code>$\bar{s}$</code></td><td style="text-align: center;"><span class="math inline">\(\bar{s}\)</span> (平均值)</td></tr><tr class="even"><td style="text-align: center;"><code>$\rightarrow$</code></td><td style="text-align: center;"><span class="math inline">\(\rightarrow\)</span></td><td style="text-align: center;"><code>$\Rightarrow$</code></td><td style="text-align: center;"><span class="math inline">\(\Rightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\overrightarrow{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\overrightarrow{a}\)</span></td><td style="text-align: center;"><code>$\overleftrightarrow{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\overleftrightarrow{a}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\overleftarrow{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\overleftarrow{a}\)</span></td><td style="text-align: center;"><code>$\longrightarrow$</code></td><td style="text-align: center;"><span class="math inline">\(\longrightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\overline{a+b}$</code></td><td style="text-align: center;"><span class="math inline">\(\overline{a+b}\)</span></td><td style="text-align: center;"><code>$\underline{a+b}$</code></td><td style="text-align: center;"><span class="math inline">\(\underline{a+b}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</code></td><td style="text-align: center;"><span class="math inline">\(\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}\)</span></td><td style="text-align: center;"><code>$\hat{y}$</code></td><td style="text-align: center;"><span class="math inline">\(\hat{y}\)</span></td></tr></tbody></table><h3 id="矩阵与方程组">矩阵与方程组</h3><ul><li>pmatrix: <code>$\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}$</code> :<span class="math display">\[\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}\]</span></li><li>bmatrix: <code>$\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}$</code> :<span class="math display">\[\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}\]</span></li><li>Bmatrix: <code>$\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}$</code> :<span class="math display">\[\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}\]</span></li><li>vmatrix: <code>$\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}$</code> :<span class="math display">\[\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}\]</span></li><li>Vmatrix: <code>$\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}$</code> :<span class="math display">\[\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}\]</span></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;</span><br><span class="line">a<span class="emphasis">_&#123;11&#125;&amp;a_</span>&#123;12&#125;&amp;\cdots&amp;a_&#123;1n&#125;\\</span><br><span class="line">a<span class="emphasis">_&#123;21&#125;&amp;a_</span>&#123;21&#125;&amp;\cdots&amp;a_&#123;2n&#125;\\</span><br><span class="line">\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\</span><br><span class="line">a<span class="emphasis">_&#123;n1&#125;&amp;a_</span>&#123;n2&#125;&amp;\cdots&amp;a_&#123;nn&#125;\\</span><br><span class="line">\end&#123;matrix&#125;$$(类似有\ldots底端对齐)</span><br><span class="line">$$</span><br><span class="line">\left\&#123;</span><br><span class="line">\begin&#123;array&#125;\</span><br><span class="line">a<span class="emphasis">_1x + a_</span>2y + a<span class="emphasis">_3z = d_</span>1 \\</span><br><span class="line">b<span class="emphasis">_1x + b_</span>2y + b<span class="emphasis">_3z = d_</span>2 \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right.</span><br><span class="line">$$(array亦可改为cases)</span><br><span class="line">$$\begin&#123;cases&#125; </span><br><span class="line"><span class="code">a_&#123;11&#125;x_1&amp;+&amp;a_&#123;12&#125;x_2&amp;+&amp;\cdots&amp;+a_&#123;1n&#125;x_n&amp;=&amp;b_1\\</span></span><br><span class="line"><span class="code">&amp;&amp;&amp;&amp;\vdots\\</span></span><br><span class="line"><span class="code">a_&#123;n1&#125;x_1&amp;+&amp;a_&#123;n2&#125;x_2&amp;+&amp;\cdots&amp;+a_&#123;nn&#125;x_n&amp;=&amp;b_n&amp;</span></span><br><span class="line">\end&#123;cases&#125;$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{matrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\\ \ a_{21}&amp;a_{21}&amp;\cdots&amp;a_{2n}\\\ \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\\ \ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\\ \end{matrix}\]</span></p><p><span class="math display">\[\begin{cases} ​       a_{11}x_1&amp;+&amp;a_{12}x_2&amp;+&amp;\cdots&amp;+a_{1n}x_n&amp;=&amp;b_1\\\ &amp;&amp;&amp;&amp;\vdots\\\ a_{n1}x_1&amp;+&amp;a_{n2}x_2&amp;+&amp;\cdots&amp;+a_{nn}x_n&amp;=&amp;b_n&amp;           \end{cases}\]</span></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">公式快速参考</a></p><h2 id="表情">表情</h2><table><thead><tr class="header"><th style="text-align: center;">syntax</th><th style="text-align: center;">preview</th><th style="text-align: center;">syntax</th><th style="text-align: center;">preview</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>:sun_with_face:</code></td><td style="text-align: center;">🌞</td><td style="text-align: center;"><code>:smile:</code></td><td style="text-align: center;">😄</td></tr><tr class="even"><td style="text-align: center;"><code>:laughing:</code></td><td style="text-align: center;">😆</td><td style="text-align: center;"><code>:blush:</code></td><td style="text-align: center;">😊</td></tr><tr class="odd"><td style="text-align: center;"><code>:smiley:</code></td><td style="text-align: center;">😃</td><td style="text-align: center;"><code>:relaxed:</code></td><td style="text-align: center;">☺️</td></tr><tr class="even"><td style="text-align: center;"><code>:smirk:</code></td><td style="text-align: center;">😏</td><td style="text-align: center;"><code>:heart_eyes:</code></td><td style="text-align: center;">😍</td></tr><tr class="odd"><td style="text-align: center;"><code>:kissing_heart:</code></td><td style="text-align: center;">😘</td><td style="text-align: center;"><code>:kissing_closed_eyes:</code></td><td style="text-align: center;">😚</td></tr><tr class="even"><td style="text-align: center;"><code>:flushed:</code></td><td style="text-align: center;">😳</td><td style="text-align: center;"><code>:relieved:</code></td><td style="text-align: center;">😌</td></tr><tr class="odd"><td style="text-align: center;"><code>:satisfied:</code></td><td style="text-align: center;">😆</td><td style="text-align: center;"><code>:grin:</code></td><td style="text-align: center;">😁</td></tr><tr class="even"><td style="text-align: center;"><code>:wink:</code></td><td style="text-align: center;">😉</td><td style="text-align: center;"><code>:stuck_out_tongue_winking_eye:</code></td><td style="text-align: center;">😜</td></tr><tr class="odd"><td style="text-align: center;"><code>:stuck_out_tongue_closed_eyes:</code></td><td style="text-align: center;">😝</td><td style="text-align: center;"><code>:grinning:</code></td><td style="text-align: center;">😀</td></tr><tr class="even"><td style="text-align: center;"><code>:kissing:</code></td><td style="text-align: center;">😗</td><td style="text-align: center;"><code>:kissing_smiling_eyes:</code></td><td style="text-align: center;">😙</td></tr><tr class="odd"><td style="text-align: center;"><code>:stuck_out_tongue:</code></td><td style="text-align: center;">😛</td><td style="text-align: center;"><code>:sleeping:</code></td><td style="text-align: center;">😴</td></tr><tr class="even"><td style="text-align: center;"><code>:worried:</code></td><td style="text-align: center;">😟</td><td style="text-align: center;"><code>:frowning:</code></td><td style="text-align: center;">😦</td></tr><tr class="odd"><td style="text-align: center;"><code>:anguished:</code></td><td style="text-align: center;">😧</td><td style="text-align: center;"><code>:open_mouth:</code></td><td style="text-align: center;">😮</td></tr><tr class="even"><td style="text-align: center;"><code>:confused:</code></td><td style="text-align: center;">😕</td><td style="text-align: center;"><code>:hushed:</code></td><td style="text-align: center;">😯</td></tr><tr class="odd"><td style="text-align: center;"><code>:expressionless:</code></td><td style="text-align: center;">😑</td><td style="text-align: center;"><code>:unamused:</code></td><td style="text-align: center;">😒</td></tr><tr class="even"><td style="text-align: center;"><code>:sweat_smile:</code></td><td style="text-align: center;">😅</td><td style="text-align: center;"><code>:sweat:</code></td><td style="text-align: center;">😓</td></tr></tbody></table><h2 id="字体">字体</h2><table><thead><tr class="header"><th style="text-align: center;">输入</th><th style="text-align: center;">说明</th><th style="text-align: center;">实例</th><th style="text-align: center;">输入</th><th style="text-align: center;">说明</th><th style="text-align: center;">实例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\rm{D}$</code></td><td style="text-align: center;">罗马体</td><td style="text-align: center;"><span class="math inline">\(\rm{D}\)</span></td><td style="text-align: center;"><code>$\cal{D}$</code></td><td style="text-align: center;">花体</td><td style="text-align: center;"><span class="math inline">\(\cal{D}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\it{D}$</code></td><td style="text-align: center;">意大利体</td><td style="text-align: center;"><span class="math inline">\(\it{D}\)</span></td><td style="text-align: center;"><code>$\Bbb{D}$</code></td><td style="text-align: center;">黑板粗体</td><td style="text-align: center;"><span class="math inline">\(\Bbb{D}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\bf{D}$</code></td><td style="text-align: center;">粗体</td><td style="text-align: center;"><span class="math inline">\(\bf{D}\)</span></td><td style="text-align: center;"><code>$\mit{D}$</code></td><td style="text-align: center;">数学斜体</td><td style="text-align: center;"><span class="math inline">\(\mit{D}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\sf{D}$</code></td><td style="text-align: center;">等线体</td><td style="text-align: center;"><span class="math inline">\(\sf{D}\)</span></td><td style="text-align: center;"><code>$\scr{D}$</code></td><td style="text-align: center;">手写体</td><td style="text-align: center;"><span class="math inline">\(\scr{D}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\tt{D}$</code></td><td style="text-align: center;">打字机体</td><td style="text-align: center;"><span class="math inline">\(\tt{D}\)</span></td><td style="text-align: center;"><code>$\boldsymbol{D}$</code></td><td style="text-align: center;">黑体</td><td style="text-align: center;"><span class="math inline">\(\boldsymbol{D}\)</span></td></tr></tbody></table><h2 id="颜色">颜色</h2><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\color{red}{红色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FF0000&gt;红色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FF0000">红色</font></td></tr><tr class="even"><td style="text-align: center;"><code>$\color{green}{绿色}$</code></td><td style="text-align: center;"><code>&lt;font color=#00FF00&gt;绿色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#00FF00">绿色</font></td></tr><tr class="odd"><td style="text-align: center;"><code>$\color{blue}{蓝色}$</code></td><td style="text-align: center;"><code>&lt;font color=#0000FF&gt;蓝色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#0000FF">蓝色</font></td></tr><tr class="even"><td style="text-align: center;"><code>$\color{cyan}{青色}$</code></td><td style="text-align: center;"><code>&lt;font color=#00FFFF&gt;青色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#00FFFF">青色</font></td></tr><tr class="odd"><td style="text-align: center;"><code>$\color{yellow}{黄色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FFFF00&gt;黄色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FFFF00">黄色</font></td></tr><tr class="even"><td style="text-align: center;"><code>$\color{purple}{紫色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FF00FF&gt;紫色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FF00FF">紫色</font></td></tr><tr class="odd"><td style="text-align: center;"><code>$\color{orange}{橙色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FF6100&gt;橙色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FF6100">橙色</font></td></tr></tbody></table><h2 id="标题">标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h2 id="字体-1">字体</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗文字**</span> 对应 <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>加粗文字<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span> 及 <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>加粗文字<span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="emphasis">*倾斜文字*</span> 对应 <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>倾斜文字<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 及 <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>倾斜文字<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="strong">***斜体加粗文字**</span>* </span><br><span class="line">~~加删除线文字~~ 对应 <span class="xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>加删除线文字<span class="xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="引用">引用</h2><p>多个&gt;用于逐层嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br><span class="line">&gt;&gt;引用内容</span><br></pre></td></tr></table></figure><h2 id="分割线">分割线</h2><p>三个或者三个以上的 - 或者 *,效果一样</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure><h2 id="图片或链接">图片或链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片说明</span>](<span class="link">图片地址 ''title''</span>)</span><br><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "title"</span>)</span><br><span class="line">title可加可不加</span><br><span class="line">如:</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span></span>百度<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">![<span class="string">风景</span>](<span class="link">https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span>)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a> <img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="风景"></p><h2 id="列表">列表</h2><ul><li>无序列表使用*或+或-标识</li><li>有序列表使用数字加.标识，例如：1.</li></ul><h2 id="表格">表格</h2><p>短斜杠(数量至少有一个)左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:-:|:-:|:-:</span><br><span class="line">1|2|3</span><br><span class="line">4|5|6</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: center;">表头</th><th style="text-align: center;">条目一</th><th style="text-align: center;">条目二</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;">3</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">5</td><td style="text-align: center;">6</td></tr></tbody></table><h2 id="pandoc版markdown与标准版的区别"><span class="math inline">\(pandoc\)</span>版<span class="math inline">\(markdown\)</span>与标准版的区别</h2><p>标准Markdown语法并不要求在标题前添加一个空行，但是Pandoc语法却要求标题前添加一个空行（除了文档开头）</p><h1 id="html">Html</h1><p><a href="https://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">学习的地方</a></p><h2 id="基本文档">基本文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;文档标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">可见文本...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">    &lt;p&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;br&gt; （换行）</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="基本元素">基本元素</h2><b>粗体文<b>粗体文本</b> <code class="language-cpp"> int exgcd(int x, int y, int &amp;a, int &amp;b) { if (y == 0) { return a = 1, b = 0, x; } else { int g = exgcd(y, x % y, b, a); b -= x / y * a; return g; } }</code><br> <em>强调文本</em><br> <i>斜体文本</i><br> <kbd>键盘输入</kbd><br><pre>预格式化文本</pre><br> <small>更小的文本</small><br> <strong>重要的文本</strong><br> <abbr>缩写</abbr><br><address>联系信息</address><bdo>文字方向</bdo><blockquote>从另一个源引用的部分</blockquote><p><cite>工作的名称</cite> <del>删除的文本</del> <ins>插入的文本</ins><sub>下标文本</sub><sup>上标文本</sup>本</p></b> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;粗体文本&lt;/b&gt;</span><br><span class="line">&lt;code class=&quot;language-cpp&quot;&gt;</span><br><span class="line">int exgcd(int x, int y, int &amp;a, int &amp;b) &#123;</span><br><span class="line">    if (y == 0) &#123;</span><br><span class="line">        return a = 1, b = 0, x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        int g = exgcd(y, x % y, b, a);</span><br><span class="line">        b -= x / y * a;</span><br><span class="line">        return g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&lt;/code&gt;</span><br><span class="line">&lt;em&gt;强调文本&lt;/em&gt;</span><br><span class="line">&lt;i&gt;斜体文本&lt;/i&gt;</span><br><span class="line">&lt;kbd&gt;键盘输入&lt;/kbd&gt; </span><br><span class="line">&lt;pre&gt;预格式化文本&lt;/pre&gt;</span><br><span class="line">&lt;small&gt;更小的文本&lt;/small&gt;</span><br><span class="line">&lt;strong&gt;重要的文本&lt;/strong&gt;</span><br><span class="line">&lt;abbr&gt;缩写&lt;/abbr&gt;&lt;br&gt;</span><br><span class="line">&lt;address&gt;联系信息&lt;/address&gt;</span><br><span class="line">&lt;bdo&gt;文字方向&lt;/bdo&gt;</span><br><span class="line">&lt;blockquote&gt;从另一个源引用的部分&lt;/blockquote&gt;</span><br><span class="line">&lt;cite&gt;工作的名称&lt;/cite&gt; </span><br><span class="line">&lt;del&gt;删除的文本&lt;/del&gt; </span><br><span class="line">&lt;ins&gt;插入的文本&lt;/ins&gt;</span><br><span class="line">&lt;sub&gt;下标文本&lt;/sub&gt;</span><br><span class="line">&lt;sup&gt;上标文本&lt;/sup&gt;本&lt;/b&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="列表与表格">列表与表格</h2><ul><li>Coffee</li><li>Milk</li></ul><ol><li>Cola</li><li>sara</li></ol><dl><!--定义列表--><pre><code>&lt;dt&gt;Coffee&lt;/dt&gt;&lt;!--自定义列表项目--&gt;&lt;dd&gt;- Black hot drink&lt;/dd&gt;&lt;!--自定义列表项目--&gt;&lt;dt&gt;Milk&lt;/dt&gt;&lt;dd&gt;- White cold drink&lt;/dd&gt;</code></pre></dl><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Cola<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>sara<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="comment">&lt;!--定义列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="comment">&lt;!--自定义列表项目--&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>- Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="comment">&lt;!--自定义列表项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>- White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片">图片</h2><p>普通的链接：<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><p>图像链接： <a href="http://www.example.com/" target="_blank" rel="noopener"><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="替换文本"></a></p><p>邮件链接： <a href="2247389338@qq.com">发送e-mail</a> 书签： <a id="tips">提示部分</a> <a href="#tips">跳到提示部分</a> #### 框架 <iframe src="https://blog.csdn.net/AbelYang1" width="400" height="300"></iframe></p><script>    document.write("Hello World!")</script><noscript>抱歉，你的浏览器不支持 JavaScript!</noscript>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是一篇测试博文&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pandoc教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;late
      
    
    </summary>
    
      <category term="其他" scheme="https://2inf.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="小知识" scheme="https://2inf.top/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
