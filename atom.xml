<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>2inf&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://2inf.top/"/>
  <updated>2020-04-05T13:55:51.682Z</updated>
  <id>https://2inf.top/</id>
  
  <author>
    <name>小蒟蒻ywt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跳舞链</title>
    <link href="https://2inf.top/2020/04/05/%E8%B7%B3%E8%88%9E%E9%93%BE/"/>
    <id>https://2inf.top/2020/04/05/跳舞链/</id>
    <published>2020-04-05T08:20:11.000Z</published>
    <updated>2020-04-05T13:55:51.682Z</updated>
    
    <content type="html"><![CDATA[<h1>精确覆盖问题<a href="https://en.wikipedia.org/wiki/Exact_cover" target="_blank" rel="noopener">(Exact Cover)</a></h1><p>  定义:给定一个$R\times C$的$0,1$矩阵，问是否存在一个行集合，使得集合每一列恰有一个$1$</p><p><img src="/.top//fig1.jpg" alt="1" title="1"></p><ul><li>穷举法</li></ul><p>  每一行都有选与不选两种状态，枚举行的时间复杂度为$O(2^R)$，每次选行时需要遍历之前已选行的所有列以检查是否有冲突，检查需要的时间复杂度为$O(RC)$，因此总的复杂度为$O(RC\times 2^R)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N][N], v[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> state = <span class="number">1</span>; state &lt; <span class="number">1</span> &lt;&lt; n; ++state) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (flag &amp;&amp; ((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[j]) &#123; flag = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> v[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (!v[i]) flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!flag) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>状态压缩</li></ul><p>  把每一行看作一个$C$位二进制数，问题转化为在$R$个$C$位二进制数中, 选择数使得 (1)任意两个数的与为0；(2)所有数的或为$2^C-1$；令$tmp$表示当前所有被选择了的$C$位二进制数的或。时间复杂度$O(R\times 2^R)$</p><p><img src="/.top//fig2.jpg" alt="2" title="2"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N][N], num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        num[i] = num[i] &lt;&lt; <span class="number">1</span> | a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> state = <span class="number">1</span>; state &lt; <span class="number">1</span> &lt;&lt; n; ++state) &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp &amp; num[i]) <span class="keyword">break</span>;</span><br><span class="line">        tmp |= num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp == (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Dancing Links(<a href="https://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X" target="_blank" rel="noopener">Algorithm X</a>)</h1><p>红色的框代表选中的行，蓝色的框代表删除的列，绿色的框代表删除的行</p><p><img src="/.top//fig3.jpg" alt="3" title="3"></p><p><a href="https://www.youtube.com/watch?v=R9gRLnddOBg" target="_blank" rel="noopener">Dancing Links(2000)</a></p><p><a href="https://www.youtube.com/watch?v=_cR9zDlvP88" target="_blank" rel="noopener">Dancing Links(2018)</a></p><p>  算法大师Donald Knuth提出了“X算法”，Dancing Links翻译成舞蹈链，并不是算法本身，而是一种链式的数据结构，利用十字链表缓存和回溯矩阵，不需要额外开辟空间。</p><p><a href="https://www.luogu.com.cn/problem/P4929" target="_blank" rel="noopener">【模板】舞蹈链（DLX）</a></p><p>这里给出我个人的板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> l[maxnode], r[maxnode], u[maxnode], d[maxnode], row[maxnode], col[maxnode];</span><br><span class="line"><span class="keyword">int</span> h[maxn], s[maxm];</span><br><span class="line"><span class="keyword">int</span> ansd, ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _m)</span> </span>&#123;</span><br><span class="line">n = _n, m = _m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>;</span><br><span class="line">r[i] = i + <span class="number">1</span>;</span><br><span class="line">u[i] = d[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">r[m] = <span class="number">0</span>; l[<span class="number">0</span>] = m;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">cnt = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">s[C]++;</span><br><span class="line">row[cnt] = R, col[cnt] = C;</span><br><span class="line">u[cnt] = C;</span><br><span class="line">d[cnt] = d[C];</span><br><span class="line">u[d[C]] = cnt;</span><br><span class="line">d[C] = cnt;</span><br><span class="line"><span class="keyword">if</span> (h[R] == <span class="number">-1</span>) h[R] = l[cnt] = r[cnt] = cnt;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">r[cnt] = h[R];</span><br><span class="line">l[cnt] = l[h[R]];</span><br><span class="line">r[l[h[R]]] = cnt;</span><br><span class="line">l[h[R]] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">cnt++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">l[r[C]] = l[C], r[l[C]] = r[C];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[C]; i != C; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j]) &#123;</span><br><span class="line">u[d[j]] = u[j];</span><br><span class="line">d[u[j]] = d[j];</span><br><span class="line">s[col[j]]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[C]; i != C; i = u[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j]) &#123;</span><br><span class="line">u[d[j]] = j;</span><br><span class="line">d[u[j]] = j;</span><br><span class="line">s[col[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">l[r[C]] = r[l[C]] = C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deep; ++i) str[(ans[i] - <span class="number">1</span>) / <span class="number">9</span>] = <span class="string">'1'</span> + (ans[i] - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i != <span class="number">0</span>; i = r[i]) <span class="keyword">if</span> (s[i] &lt; s[c]) c = i;</span><br><span class="line">remove(c);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[c]; i != c; i = d[i]) &#123;</span><br><span class="line">ans[deep] = row[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j]) remove(col[j]);</span><br><span class="line"><span class="keyword">if</span> (dance(deep + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j]) resume(col[j]);</span><br><span class="line">&#125;</span><br><span class="line">resume(c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dlx;</span><br></pre></td></tr></table></figure><h1>精确覆盖的应用</h1><h2 id="数独问题"><a class="header-anchor" href="#数独问题">¶</a>数独问题</h2><p><a href="http://poj.org/problem?id=3074" target="_blank" rel="noopener">POJ3074 Sudoku</a></p><p><a href="https://paste.ubuntu.com/p/q2wK48rR2w/" target="_blank" rel="noopener">法一</a></p><p><a href="https://paste.ubuntu.com/p/KN4zkt26F7/" target="_blank" rel="noopener">法二</a></p><h1>重复覆盖</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> l[mx], r[mx], u[mx], d[mx], row[mx], col[mx];</span><br><span class="line"><span class="keyword">int</span> h[maxn], s[maxm];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _m)</span> </span>&#123;</span><br><span class="line">n = _n, m = _m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>;</span><br><span class="line">r[i] = i + <span class="number">1</span>;</span><br><span class="line">u[i] = d[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = m, r[m] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">cnt = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">s[C]++;</span><br><span class="line">row[cnt] = cnt, col[cnt] = C;</span><br><span class="line">u[cnt] = C;</span><br><span class="line">d[cnt] = d[C];</span><br><span class="line">u[d[C]] = cnt;</span><br><span class="line">d[C] = cnt;</span><br><span class="line"><span class="keyword">if</span> (h[R] == <span class="number">-1</span>) h[R] = l[cnt] = r[cnt] = cnt;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">l[cnt] = l[h[R]];</span><br><span class="line">r[cnt] = h[R];</span><br><span class="line">r[l[h[R]]] = cnt;</span><br><span class="line">l[h[R]] = cnt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[C]; i != C; i = d[i])</span><br><span class="line">l[r[i]] = l[i], r[l[i]] = r[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[C]; i != C; i = u[i])</span><br><span class="line">l[r[i]] = r[l[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> v[maxm];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = r[<span class="number">0</span>]; c != <span class="number">0</span>; c = r[c]) v[c] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = r[<span class="number">0</span>]; c != <span class="number">0</span>; c = r[c])</span><br><span class="line"><span class="keyword">if</span> (v[c]) &#123;</span><br><span class="line">ret++;</span><br><span class="line">v[c] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[c]; i != c; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line">v[col[j]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (deep + f() &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (deep &lt; ans) ans = deep;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i != <span class="number">0</span>; i = r[i]) <span class="keyword">if</span> (s[i] &lt; s[c]) c = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[c]; i != c; i = d[i]) &#123;</span><br><span class="line">remove(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j]) remove(j);</span><br><span class="line">dance(deep + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j]) resume(j);</span><br><span class="line">resume(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dlx;</span><br></pre></td></tr></table></figure><h1>重复覆盖的应用</h1>]]></content>
    
    <summary type="html">
    
      从精确覆盖问题入手引出跳舞链结构($DLX$), 并进一步介绍重复覆盖问题
    
    </summary>
    
      <category term="算法竞赛" scheme="https://2inf.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="DLX" scheme="https://2inf.top/tags/DLX/"/>
    
  </entry>
  
  <entry>
    <title>Catalan数的原理与应用</title>
    <link href="https://2inf.top/2019/10/12/Catalan%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://2inf.top/2019/10/12/Catalan数的原理与应用/</id>
    <published>2019-10-12T07:30:20.000Z</published>
    <updated>2020-03-26T09:38:22.628Z</updated>
    
    <content type="html"><![CDATA[<hr><p>由于$C_2=C_3=1$</p><p>设$G(x)=C_2+C_3x+C_4x^2+\cdots$<br>$$x^2:C_4=C_2C_3+C_3C_2\<br>x^3:C_5=C_2C_4+C_3C_3+C_4C_2\<br>x^4:C_6=C_2C_5+C_3C_4+C_4C_3+C_5C_2\<br>\vdots$$<br>$$\begin{array}{l}<br>G(x)-x-1&amp;=&amp;C_2(C_3x<sup>2+C_4x</sup>3+\cdots)\<br>&amp;&amp;+C_3x(C_2x+C_3x^2+\cdots)\<br>&amp;&amp;+C_4x<sup>2(C_2x+C_3x</sup>2+\cdots)+\cdots\<br>&amp;=&amp;-x+C_2(C_2x+C_3x^2+\cdots)\<br>&amp;&amp;+C_3x(C_2x+C_3x^2+\cdots)+\cdots<br>\end{array}$$</p><a id="more"></a> <p>$$\Longrightarrow\quad\quad \begin{array}{l}<br>G(x)-1&amp;=&amp;(C_2+C_3x+C_4x<sup>2+\cdots)(C_2x+C_3x</sup>2+\cdots)\<br>&amp;=&amp;x[G(x)]2<br>\end{array}$$</p><p>$$xG^2(x)-G(x)+1=0\<br>G(x)=\frac{1-\sqrt{1-4x}}{2x}$$</p><p>  而$\displaystyle(1-4x)<sup>{\frac{1}{2}}=1+\frac{1}{2}(-4x)-\frac{\displaystyle\frac{1}{2}(\frac{1}{2}-1)}{2!}(-4x)</sup>2+\frac{\displaystyle\frac{1}{2}(\frac{1}{2}-1)(\frac{1}{2}-2)}{3!}(-4x)^3+\cdots$</p><p>所以$(1-4x)<sup>{\frac{1}{2}}$中$x</sup>{n+1}$项的系数为<br>$$\begin{array}{l}<br>&amp;&amp;\displaystyle\frac{1}{(n+1)!}\frac{1}{2}\left(\frac{1}{2}-1\right)\left(\frac{1}{2}-2\right)\cdots\left(\frac{1}{2}-n\right)(-4)^{n+1}\<br>&amp;=&amp;\displaystyle\frac{(-1)<sup>{2n+1}}{(n+1)!}\frac{1\cdot3\cdot\cdots\cdot(2n-1)}{2</sup>{n+1}}2^{2n+2}\<br>&amp;=&amp;\displaystyle\frac{-2}{n+1}\frac{(2n)!}{(n!)^2}=\frac{-2}{n+1}\begin{pmatrix}2n\n\end{pmatrix}<br>\end{array}$$</p><p>故$\displaystyle G(x)=\frac{1-\sqrt{1-4x}}{2x}$且<br>$$C_{n+1}=\frac{1}{n}\begin{pmatrix}2n-2\n-1\end{pmatrix}$$</p><hr><p>由递推关系<br>$$nC_{n+1}=(4n-6)C_n$$<br>$$G(x)=C_2x+C_3x<sup>2+C_4x</sup>3+\cdots\<br>x:2C_3=4\cdot2C_2-6C_2\<br>x^2:3C_4=4\cdot3C_3-6C_3\<br>\vdots$$<br>$$G’(x)-1=4[xG(x)]’-6G(x)$$<br>$$G(x)=C\sqrt{1-4x}+\frac{1}{2}$$<br>由$G(0)=0,$有$\displaystyle C=-\frac{1}{2},$即$\displaystyle G(x)=\frac{1-\sqrt{1-4x}}{2}$</p><hr><ol><li>$C_{n+1}=C_2C_n+C_3C_{n-1}+\cdots+C_{n-1}C_3+C_nC_2$</li><li>$(n-3)C_n=\frac{n}{2}(C_3C_{n-1}+C_4C_{n-2}+\cdots+C_{n-1}C_3)$</li></ol><p>待填坑</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;由于$C_2=C_3=1$&lt;/p&gt;
&lt;p&gt;设$G(x)=C_2+C_3x+C_4x^2+\cdots$&lt;br&gt;
$$x^2:C_4=C_2C_3+C_3C_2\&lt;br&gt;
x^3:C_5=C_2C_4+C_3C_3+C_4C_2\&lt;br&gt;
x^4:C_6=C_2C_5+C_3C_4+C_4C_3+C_5C_2\&lt;br&gt;
\vdots$$&lt;br&gt;
$$\begin{array}{l}&lt;br&gt;
G(x)-x-1&amp;amp;=&amp;amp;C_2(C_3x&lt;sup&gt;2+C_4x&lt;/sup&gt;3+\cdots)\&lt;br&gt;
&amp;amp;&amp;amp;+C_3x(C_2x+C_3x^2+\cdots)\&lt;br&gt;
&amp;amp;&amp;amp;+C_4x&lt;sup&gt;2(C_2x+C_3x&lt;/sup&gt;2+\cdots)+\cdots\&lt;br&gt;
&amp;amp;=&amp;amp;-x+C_2(C_2x+C_3x^2+\cdots)\&lt;br&gt;
&amp;amp;&amp;amp;+C_3x(C_2x+C_3x^2+\cdots)+\cdots&lt;br&gt;
\end{array}$$&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="https://2inf.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="组合数学" scheme="https://2inf.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>一些字符串算法小结</title>
    <link href="https://2inf.top/2019/09/08/%E4%B8%80%E4%BA%9B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://2inf.top/2019/09/08/一些字符串算法小结/</id>
    <published>2019-09-08T07:52:32.000Z</published>
    <updated>2020-04-01T08:02:50.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="manacher-算法"><a class="header-anchor" href="#manacher-算法">¶</a>$Manacher$算法</h2><p>  <s>众所周知</s>, $Manacher$算法是一个求字符串中最长回文子序列问题的算法, 可以想到一个比较显然的做法: 长度为奇数的回文串以最中间字符的位置为对称轴, 而长度为偶数的回文串的对称轴在中间两个字符之间的空隙处. 于是我们考虑遍历这些对称轴, 并且同时向左右扩展, 直到左右两边的字符不同或到达边界.</p><p>  这个算法的复杂度是$O(n^2)$, 是无法过一些较大数据范围的题, 我们来思考一下这个算法的缺点, 显然, 回文串长度的奇偶性造成了对称轴的位置可能在某字符上, 也可能在两个字符之间的空隙处，要对两种情况分别处理. 为了解决这个问题, 可以强行在原字符串中插入其他本字符串不会出现的字符, 如<code>&quot;#&quot;</code>.</p><a id="more"></a> <p>  对于整个算法的主体, 定义$p[i]$表示以字符$i$为回文中心的最长回文串的半径, 那么$p[i]-1$就是字符串中最长回文串的长度(除去<code>'#'</code>), 定义$maxr$为目前找到回文串的最右端, 中心为$id$, 当我们扫描到的位置$i$, 若$id\leq i\leq maxr$, 可以找到对称点$2<em>id-i$求出其最长半径, 那么$p[i] = \min(p[2</em>id-i], maxr-i)$</p><p><a href="https://www.luogu.org/problem/P3805" target="_blank" rel="noopener">[模板]$Manacher$算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans, p[N];</span><br><span class="line"><span class="keyword">char</span> s[N], str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    str[<span class="number">0</span>] = str[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        str[(i&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>] = s[i];</span><br><span class="line">        str[(i&lt;&lt;<span class="number">1</span>)+<span class="number">3</span>] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = (n&lt;&lt;<span class="number">1</span>) + <span class="number">2</span>; str[n] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; str[i] != <span class="number">0</span>; ++i) str[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxr &gt; i) p[i] = min(p[<span class="number">2</span>*id-i], maxr - i);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; str[i+p[i]] == str[i-p[i]]; ++p[i]);</span><br><span class="line">        <span class="keyword">if</span> (p[i] + i &gt; maxr) &#123; maxr = p[i] + i; id = i; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    init();</span><br><span class="line">    manacher();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans = max(ans, p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kmp-算法"><a class="header-anchor" href="#kmp-算法">¶</a>$KMP$算法</h2><p>  $KMP$算法, 又名模式匹配算法, 能在线性时间内判定字符串$B[1\sim m]$是否为字符串$A[1\sim n]$的字串, 并求出字符串$B$在字符串$A$中各次出现的位置.</p><p>  容易想到一个$O(nm)$的朴素算法, 暴力枚举字符串$B$中每个位置$i$, 逐一比较$B[1]$与$A[i]$, $B[2]$与$A[i+1]\cdots$是否相等. 而$KMP$算法在匹配前会预处理模式串$B$, 具体步骤如下:</p><ol><li>对字符串$B$进行自我匹配, 求出数组$next$, 其中$next[i]$表示&quot;$B$中以i结尾的非前缀子串&quot;与&quot;$B$的前缀&quot;能够匹配的最大长度. 即:$next[i]=\max{j},$ 其中$j&lt;i$并且$B[i-j+1\sim i]=B[1\sim j]$, 若不存在这样的$j$， 则$next[i]=0$</li><li>对字符串$B$与$A$进行匹配, 求出一个数组$f$, 其中$f[i]$表示&quot;$A$中以$i$结尾的字串&quot;与&quot;$B$的前缀&quot;能够匹配的最长长度. 即:$f[i]=\max{j}$, 其中$j\leq i$并且$A[i-j+1\sim i]=B[1\sim j]$</li></ol><p>  如果我们采用朴素算法计算$next$数组, 即枚举$j\in[1,i-1]$, 并检查$A[i-j+1\sim i]$与$A[1\sim j]$是否相等. 时间复杂度不会低于$O(n^2)$, 为了更快求解$next$, 有以下引理.</p><p><strong>引理</strong><br>  若$j_0$是$next[i]$的一个&quot;候选项&quot;, 即$j_0&lt;i$且$A[i-j_0+1\sim i]=A[1\sim j_0]$, 则小于$j_0$的最大的$next[i]$的&quot;候选项&quot;是$next[j_0]$. 也即$next[j_0]+1\sim j_0-1$之间的数都不是$next[i]$的候选项</p><p><a href="https://www.luogu.org/problem/P3375" target="_blank" rel="noopener">[模板]$KMP$算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> n, m, Next[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; b[i] != b[j+<span class="number">1</span>]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line">        Next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), m = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    calc();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[i] != b[j+<span class="number">1</span>]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - m + <span class="number">1</span>); j = Next[j];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, Next[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="trie-字典树"><a class="header-anchor" href="#trie-字典树">¶</a>$Trie$(字典树)</h2><p>  $Trie$是一种用于实现字符串快速检索的多叉树结构, 其基本操作如下:</p><ol><li>若$P$的$c$字符指针指向一个已经存在的节点$Q$, 则令$P=Q$</li><li>若$P$的$c$字符指针指向空, 则新建一个节点$Q$, 令$P$的$c$字符指针指向$Q$, 然后令$P=Q$</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> trie[N][<span class="number">26</span>], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> ch = str[k] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!trie[p][ch]) trie[p][ch] = ++tot;</span><br><span class="line">        p = trie[p][ch];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        p = trie[p][str[k]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!p) <span class="keyword">return</span> ans;</span><br><span class="line">        ans += ed[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ac-自动机"><a class="header-anchor" href="#ac-自动机">¶</a>$AC$自动机</h2><p>  很多聚聚都说$AC$自动机就是在$trie$树上进行$KMP$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;manacher-算法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#manacher-算法&quot;&gt;¶&lt;/a&gt;$Manacher$算法&lt;/h2&gt;
&lt;p&gt;  &lt;s&gt;众所周知&lt;/s&gt;, $Manacher$算法是一个求字符串中最长回文子序列问题的算法, 可以想到一个比较显然的做法: 长度为奇数的回文串以最中间字符的位置为对称轴, 而长度为偶数的回文串的对称轴在中间两个字符之间的空隙处. 于是我们考虑遍历这些对称轴, 并且同时向左右扩展, 直到左右两边的字符不同或到达边界.&lt;/p&gt;
&lt;p&gt;  这个算法的复杂度是$O(n^2)$, 是无法过一些较大数据范围的题, 我们来思考一下这个算法的缺点, 显然, 回文串长度的奇偶性造成了对称轴的位置可能在某字符上, 也可能在两个字符之间的空隙处，要对两种情况分别处理. 为了解决这个问题, 可以强行在原字符串中插入其他本字符串不会出现的字符, 如&lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://2inf.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="字符串" scheme="https://2inf.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>组合数性质探究</title>
    <link href="https://2inf.top/2019/09/06/%E7%BB%84%E5%90%88%E6%95%B0%E6%80%A7%E8%B4%A8%E6%8E%A2%E7%A9%B6/"/>
    <id>https://2inf.top/2019/09/06/组合数性质探究/</id>
    <published>2019-09-06T15:51:48.000Z</published>
    <updated>2020-03-26T09:34:49.606Z</updated>
    
    <content type="html"><![CDATA[<p>  首先我们回顾一下一些简单性质</p><ol><li>$\begin{pmatrix}n\k\end{pmatrix}=\displaystyle\frac{n!}{k!(n-k)!}$</li><li>$\begin{pmatrix}n\k\end{pmatrix}=\displaystyle\frac{n}{k}\begin{pmatrix}n-1\k-1\end{pmatrix}$</li><li>$\begin{pmatrix}n\k\end{pmatrix}=\begin{pmatrix}n-1\k\end{pmatrix}+\begin{pmatrix}n-1\k-1\end{pmatrix}$</li><li>$\begin{pmatrix}n\m\end{pmatrix}\begin{pmatrix}m\k\end{pmatrix}=\begin{pmatrix}n\k\end{pmatrix}\begin{pmatrix}n-k\m-k\end{pmatrix}$</li><li>$\displaystyle\sum_{m=0}^n\begin{pmatrix}m\k\end{pmatrix}=\begin{pmatrix}n+1\k+1\end{pmatrix}$</li><li>$\displaystyle\sum_{k=0}<sup>nk\begin{pmatrix}n\k\end{pmatrix}=n2</sup>{n-1},\quad\sum_{k=0}<sup>nk</sup>2\begin{pmatrix}n\k\end{pmatrix}=n(n+1)2^{n-2}$</li></ol><a id="more"></a><h2 id="组合数的计算"><a class="header-anchor" href="#组合数的计算">¶</a>组合数的计算</h2><ul><li>利用$性质3$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    C[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= i; ++j) C[i][j] = C[i<span class="number">-1</span>][j<span class="number">-1</span>] + C[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>预处理阶乘和阶乘逆元</p></li><li><p>$Lucas$定理</p></li></ul><p>$$\begin{pmatrix}n\m\end{pmatrix}\equiv\begin{pmatrix}\lfloor n/p\rfloor\\lfloor m/p\rfloor\end{pmatrix}\begin{pmatrix}n\mod p\m\mod p\end{pmatrix}\pmod p\qquad (p为素数)$$</p><p>$proof:\quad$设$n=sp+q,m=tp+r\ (q,r\leq p)$,那么<br>$$\begin{array}{l}<br>(1+x)<sup>n&amp;=&amp;\left((1+x)</sup>p\right)<sup>s(1+x)</sup>q\<br>&amp;\equiv&amp;(1+x<sup>p)</sup>s(1+x)^q\pmod p\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>s\begin{pmatrix}s\i\end{pmatrix}x</sup>{ip}\sum_{j=0}<sup>q\begin{pmatrix}q\j\end{pmatrix}x</sup>j\<br>\end{array}$$</p><p>可以得到</p><p>$$(1+x)<sup>{sp+q}\equiv\sum_{i=0}</sup>s\begin{pmatrix}s\i\end{pmatrix}x<sup>{ip}\sum_{j=0}</sup>q\begin{pmatrix}q\j\end{pmatrix}x^j\pmod p$$</p><p>$LHS$中$(1+x)<sup>{sp+q}$中的$x</sup>{tp+r}$系数为$\begin{pmatrix}sp+q\tp+r\end{pmatrix}$, $RHS$中的$x^{tp+r}$系数为$\begin{pmatrix}s\t\end{pmatrix}\begin{pmatrix}q\r\end{pmatrix}$, 从而</p><p>$$\begin{pmatrix}sp+q\tp+r\end{pmatrix}\equiv\begin{pmatrix}s\t\end{pmatrix}\begin{pmatrix}q\r\end{pmatrix}\pmod p$$</p><p>这与原命题等价, 证毕.</p><p><a href="https://www.luogu.org/problem/P3807" target="_blank" rel="noopener">$Lucas$定理模板题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,l,r) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,v) memset(a, v, sizeof(a))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; ll f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll t, p, f[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a % p)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f[n] * power(f[m], p - <span class="number">2</span>) % p * power(f[n-m], p - <span class="number">2</span>) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> C(n % p, m % p) * lucas(n / p, m / p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(t);</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        read(n), read(m), read(p);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        inc(i,<span class="number">1</span>,p) f[i] = f[i<span class="number">-1</span>] * i % p;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, lucas(n + m, m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>勒让德定理$($或者叫扩展$Lucas$$)$</li></ul><p>  勒让德定理：在正数$n!$的素因子标准分解式中，素数$p$的最高指数为$(n!)=\displaystyle\sum_{m=1}<sup>\infty\left[\frac{n}{p</sup>m}\right]$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  首先我们回顾一下一些简单性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\begin{pmatrix}n\k\end{pmatrix}=\displaystyle\frac{n!}{k!(n-k)!}$&lt;/li&gt;
&lt;li&gt;$\begin{pmatrix}n\k\end{pmatrix}=\displaystyle\frac{n}{k}\begin{pmatrix}n-1\k-1\end{pmatrix}$&lt;/li&gt;
&lt;li&gt;$\begin{pmatrix}n\k\end{pmatrix}=\begin{pmatrix}n-1\k\end{pmatrix}+\begin{pmatrix}n-1\k-1\end{pmatrix}$&lt;/li&gt;
&lt;li&gt;$\begin{pmatrix}n\m\end{pmatrix}\begin{pmatrix}m\k\end{pmatrix}=\begin{pmatrix}n\k\end{pmatrix}\begin{pmatrix}n-k\m-k\end{pmatrix}$&lt;/li&gt;
&lt;li&gt;$\displaystyle\sum_{m=0}^n\begin{pmatrix}m\k\end{pmatrix}=\begin{pmatrix}n+1\k+1\end{pmatrix}$&lt;/li&gt;
&lt;li&gt;$\displaystyle\sum_{k=0}&lt;sup&gt;nk\begin{pmatrix}n\k\end{pmatrix}=n2&lt;/sup&gt;{n-1},\quad\sum_{k=0}&lt;sup&gt;nk&lt;/sup&gt;2\begin{pmatrix}n\k\end{pmatrix}=n(n+1)2^{n-2}$&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数学" scheme="https://2inf.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="组合数学" scheme="https://2inf.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈几个特殊函数</title>
    <link href="https://2inf.top/2019/08/28/%E6%B5%85%E8%B0%88%E5%87%A0%E4%B8%AA%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0/"/>
    <id>https://2inf.top/2019/08/28/浅谈几个特殊函数/</id>
    <published>2019-08-27T16:14:43.000Z</published>
    <updated>2020-03-26T09:34:08.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gamma函数"><a class="header-anchor" href="#gamma函数">¶</a>$\Gamma函数$</h2><p>  $\Gamma$函数是由如下含参数变量定义的积分, 又称第二类$Euler$积分, 其含参积分定义为</p><p>$$\Gamma(s)=\int_0<sup>{+\infty}x</sup>{s-1}e^{-x}\mathrm{d}x \tag{1}$$</p><p>它有 <strong>$Gauss$无穷乘积</strong>分解($Euler-Gauss$公式)</p><p>$$\Gamma(x)=\lim_{n\to\infty}\frac{n!n^x}{x(x+1)\cdots(x+n)}$$</p><a id="more"></a> <p><strong>性质:</strong></p><ol><li>$\Gamma(s+1)=s\Gamma(s)\ (s&gt;0)$</li><li>$\Gamma(s)=2\displaystyle\int_0<sup>{+\infty}x</sup>{2s-1}e<sup>{-x</sup>2}\mathrm{d}x$</li><li>$\Gamma(s)$在$(0,+\infty)$上为严格下凸函数, 它及其任意阶导数都连续, 且<br>$$\Gamma<sup>{(n)}(s)=\int_0</sup>{+\infty}x^{s-1}(\ln x)<sup>ne</sup>{-x}\mathrm{d}x$$</li></ol><h2 id="rm-b-函数"><a class="header-anchor" href="#rm-b-函数">¶</a>$\rm{B}函数$</h2><p>  ${\rm{B}}$函数是由如下含两个参变量的瑕积分定义的函数</p><p>$${\rm{B}}\left(p,q\right)=\int_0<sup>1x</sup>{p-1}(1-x)^{q-1}\mathrm{d}x,\quad p,q&gt;0 \tag{2}$$</p><p><strong>性质:</strong></p><ol><li>${\rm{B}}(p,q)={\rm{B}}(q,p)$</li><li>${\rm{B}}(p,q)=\displaystyle\frac{p-1}{p+q-1}{\rm{B}}(p-1,q)$</li><li>${\rm{B}}(p,q)=2\displaystyle\int_0<sup>\frac{\pi}{2}\cos</sup>{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}\theta$</li><li>${\rm{B}}(p,q)=\displaystyle\int_0<sup>{+\infty}\frac{x</sup>{q-1}}{(1+x)^{p+q}}\mathrm{d}x$</li></ol><h2 id="二者的关系"><a class="header-anchor" href="#二者的关系">¶</a>二者的关系</h2><p>  设$p&gt;0,q&gt;0$则有${\rm{B}}(p,q)=\displaystyle\frac{\Gamma§\Gamma(q)}{\Gamma(p+q)}$</p><p>  <strong>证明:</strong>  由性质知</p><p>$$\Gamma§=2\int_0<sup>{+\infty}x</sup>{2p-1}e<sup>{-x</sup>2}\mathrm{d}x,\quad\Gamma(q)=2\int_0<sup>{+\infty}x</sup>{2q-1}e<sup>{-x</sup>2}\mathrm{d}x$$</p><p>令$D=\left{(x,y):0\leq x&lt;+\infty,0\leq y&lt;+\infty\right}$, 则有</p><p>$$\Gamma§\Gamma(q)=4\iint_Dx<sup>{2p-1}y</sup>{2q-1}e<sup>{-(x</sup>2+y^2)}\mathrm{d}x\mathrm{d}y$$</p><p>利用极坐标变换, 记$D_1=\displaystyle\left{(r,\theta):0&lt;r&lt;+\infty,0\leq\theta\leq\frac{\pi}{2}\right}$, 则有</p><p>$$\begin{array}{l}<br>\Gamma§\Gamma(q)&amp;=&amp;4\displaystyle\iint_{D1}r<sup>{2(p+q)-1}e</sup>{-r<sup>2}\cos</sup>{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}r\mathrm{d}\theta\<br>&amp;=&amp;\displaystyle\left(2\int_0<sup>\frac{\pi}{2}\cos</sup>{2p-1}\theta\sin<sup>{2q-1}\theta\mathrm{d}\theta\right)\left(2\int_0</sup>{+\infty}r<sup>{2(p+q)-1}e</sup>{-r^2}\mathrm{d}r\right)\<br>&amp;=&amp;\displaystyle{\rm{B}}(p,q)\Gamma(p+q)<br>\end{array}$$</p><p>证毕.</p><hr><p>   <strong>(余元公式)</strong> 设$0&lt;p&lt;1$, 则有</p><p>$${\rm{B}}(p,1-p)=\Gamma§\Gamma(1-p)=\frac{\pi}{\sin p\pi}.$$</p><p>  <strong>证明:</strong>  由于${\rm{B}}(p,1-p)=\displaystyle\int_0<sup>{+\infty}\frac{x</sup>{p-1}}{1+x}\mathrm{d}x$, 利用变量替换$x=\frac{1}{t}$有:</p><p>$$\int_1<sup>{+\infty}\frac{x</sup>{p-1}}{1+x}\mathrm{d}x=\int_0<sup>1\frac{x</sup>{-p}}{1+x}\mathrm{d}x,$$</p><p>将$\displaystyle\frac{1}{1+x}$展开成幂级数, 从而有</p><p>$$\begin{array}{l}<br>{\rm{B}}(p,1-p)&amp;=&amp;\displaystyle\lim_{r\to1<sup>-}\int_0</sup>r\frac{x<sup>{p-1}+x</sup>{-p}}{1+x}\mathrm{d}x\<br>&amp;=&amp;\displaystyle\lim_{r\to1<sup>-}\int_0</sup>r\left[\sum_{k=0}<sup>{+\infty}(-1)</sup>kx<sup>{k+p-1}+\sum_{k=0}</sup>{+\infty}(-1)<sup>kx</sup>{k-p}\right]\mathrm{d}x\<br>&amp;=&amp;\displaystyle\lim_{r\to1<sup>-}\left[\sum_{k=0}</sup>{+\infty}\frac{(-1)<sup>k}{k+p}r</sup>{k+p}+\sum_{k=0}<sup>{+\infty}\frac{(-1)</sup>k}{k-p+1}r^{k-p+1}\right]\<br>&amp;=&amp;\displaystyle\sum_{k=0}<sup>{+\infty}\frac{(-1)</sup>k}{k+p}+\sum_{k=0}<sup>{+\infty}\frac{(-1)</sup>k}{k-p+1}\<br>&amp;=&amp;\displaystyle\frac{1}{p}+\sum_{k=1}<sup>{+\infty}(-1)</sup>k\left(\frac{1}{k+p}+\frac{1}{p-k}\right)\<br>&amp;=&amp;\displaystyle\frac{1}{p}+\sum_{k=1}<sup>{+\infty}(-1)</sup>k\frac{2p}{p<sup>2-k</sup>2}.<br>\end{array}$$</p><p>而$\cos px$的$Fourier$级数为</p><p>$$\cos px=\frac{\sin px}{\pi}\left[\frac{1}{p}+\sum_{k=1}<sup>{+\infty}(-1)</sup>k\frac{2p}{p<sup>2-k</sup>2}\cos kx\right]$$</p><p>在$\left|x\right|\leq\pi$处处收敛, 令$x=0$即得</p><p>$${\rm{B}}(p,1-p)=\frac{1}{p}+\sum_{k=1}<sup>{+\infty}(-1)</sup>k\frac{2p}{p<sup>2-k</sup>2}=\frac{\pi}{\sin p\pi}.$$</p><p>证毕.</p><p><strong>注</strong>:令$p=\displaystyle\frac{1}{2}$, 得<br>$$\Gamma^2\left(\frac{1}{2}\right)=\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{1}{2}\right)}{\Gamma(1)}={\rm{B}}(\frac{1}{2},\frac{1}{2})=\pi$$<br>则$\displaystyle\int_0<sup>{+\infty}e</sup>{-x^2}\mathrm{d}x=\frac{1}{2}\Gamma\left(\frac{1}{2}\right)=\frac{\sqrt\pi}{2}$, 也是一个得到这个重要等式的方法.</p><hr><p>  求$\Bbb{R}<sup>n$中单位球体$D:x_1</sup>2+x_2^2+\cdots x_n^2\leq1$的体积.</p><p>   <strong>分析:</strong> 考虑用与球面类似的换元求解</p><p>   <strong>解:</strong> 由$n$重积分的集合意义, 所求体积为</p><p>$$V=\iint\cdots\int_D\mathrm{d}x_1\mathrm{d}x_2\cdots\mathrm{d}x_n.$$</p><p>作变换</p><p>$$\begin{cases}<br>x_1&amp;=&amp;r\cos\theta_1,\<br>x_2&amp;=&amp;r\sin\theta_1\cos\theta_2\<br>x_3&amp;=&amp;r\sin\theta_1\sin\theta_2\cos\theta_3\<br>\cdots\cdots\<br>x_{n-1}&amp;=&amp;r\sin\theta_1\sin\theta_2\cdots\sin\theta_{n-2}\cos\theta_{n-1}\<br>x_{n}&amp;=&amp;r\sin\theta_1\sin\theta_2\cdots\sin\theta_{n-2}\sin\theta_{n-1}<br>\end{cases}$$</p><p>其中$\quad 0&lt;r&lt;1, 0&lt;\theta_1,\cdots,\theta_{n-2}&lt;\pi,0&lt;\theta_{n-1}&lt;2\pi$, 则其$Jacobian$行列式</p><p>$$\displaystyle\frac{\partial(x_1,x_2,\cdots,x_n)}{\partial(r,\theta_1,\theta_2,\cdots,\theta_{n-1})}=r<sup>{n-1}\sin</sup>{n-2}\theta_1\sin^{n-3}\theta_2\cdots\sin\theta_{n-2}$$</p><p>由此</p><p>$$\begin{array}{l}<br>V &amp;=&amp; \displaystyle\iint\cdots\int_D\mathrm{d}x_1\mathrm{d}x_2\cdots\mathrm{d}x_n\<br>&amp;=&amp; \displaystyle\int_0<sup>{2\pi}\mathrm{d}\theta_{n-1}\int_0</sup>\pi\mathrm{d}\theta_{n-2}\cdots\int_0<sup>\pi\mathrm{d}\theta_1\int_0</sup>1r<sup>{n-1}\sin</sup>{n-2}\theta_1\sin^{n-3}\theta_2\cdots\sin\theta_{n-2}\mathrm{d}r\<br>&amp;=&amp; \displaystyle\frac{2\pi}{n}\left(\int_0<sup>\pi\sin</sup>{n-2}\theta_1\mathrm{d}\theta_1\right)\left(\int_0<sup>\pi\sin</sup>{n-3}\theta_2\mathrm{d}\theta_2\right)\cdots\left(\int_0^\pi\sin\theta_{n-2}\mathrm{d}\theta_{n-2}\right)\<br>&amp;=&amp; \displaystyle\frac{2\pi}{n}{\rm{B}}\left(\frac{1}{2}, \frac{n-1}{2}\right){\rm{B}}\left(\frac{1}{2},\frac{n-2}{2}\right)\cdots{\rm{B}}\left(\frac{1}{2},1\right)\<br>&amp;=&amp; \displaystyle\frac{2\pi}{n}\cdot\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{n-1}{2}\right)}{\displaystyle\Gamma\left(\frac{n}{2}\right)}\cdot\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{n-2}{2}\right)}{\displaystyle\Gamma\left(\frac{n-1}{2}\right)}\cdots\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma(1)}{\displaystyle\Gamma\left(\frac{3}{2}\right)}\<br>&amp;=&amp; \displaystyle\frac{2\pi}{n}\cdot\frac{\displaystyle\Gamma^{n-2}\left(\frac{1}{2}\right)}{\displaystyle\Gamma\left(\frac{n}{2}\right)}\<br>&amp;=&amp; \displaystyle\frac{\displaystyle\pi^{\frac{n}{2}}}{\displaystyle\Gamma\left(\frac{n}{2}+1\right)}.<br>\end{array}$$</p><h2 id="zeta函数"><a class="header-anchor" href="#zeta函数">¶</a>$\zeta函数$</h2><p>  <strong>$Riemann\ zeta$</strong> 函数$\zeta(s)$, 是一个关于复数$s$的函数, 在在复平面上, $s$的实数部分$\sigma=\scr{R}s&gt;1$时, $\zeta(s)=\displaystyle\sum_{n=1}<sup>\infty\frac{1}{n</sup>s}$</p><h3 id="特殊点取值"><a class="header-anchor" href="#特殊点取值">¶</a>特殊点取值</h3><p>  考虑调和级数$\zeta(1)=\displaystyle\sum_{i=1}^\infty\frac{1}{n}$, 由$Cauchy$判别法, 级数$S_n$收敛当且仅当$\forall \epsilon&gt;0, \exists N, st.\ m,n&gt;N, \left|S_m-S_n\right|&lt;\epsilon$</p><p>$$\left|S_{2n}-S_n\right|=\frac{1}{n+1}+\cdots+\frac{1}{2n}&gt;\frac{1}{2n}+\cdots+\frac{1}{2n}=\frac{1}{2}$$</p><p>故调和级数发散</p><p><strong>$Parseval$等式</strong></p><p>$$\frac{1}{\pi}\int_{-\pi}<sup>\pi\left|f(x)\right|</sup>2=\frac{a_0<sup>2}{2}+\sum_{n=1}</sup>\infty(a_n<sup>2+b_n</sup>2)$$</p><p>$\displaystyle\sum_{n=1}<sup>\infty\frac{1}{n</sup>2}=\frac{\pi^2}{6}$</p><p>$\displaystyle\sum_{n=1}<sup>\infty\frac{1}{n</sup>4}=\frac{\pi^4}{90}$</p><p>  $zeta$函数的积分形式<br>$$\zeta(s)=\sum_{n=1}<sup>\infty\frac{1}{n</sup>{s}}=\frac{1}{\Gamma(s)}\int_0<sup>{+\infty}\frac{x</sup>{s-1}}{e^x-1}\mathrm{d}x,\quad s&gt;1$$</p><p>  求$\displaystyle\int_0^1\frac{\ln x}{1-x}\mathrm{d}x$</p><p>   <strong>解:</strong> 令$x=e^{-t},$ 则<br>$$\int_0^1\frac{\ln x}{1-x}\mathrm{d}x=\int_{+\infty}<sup>0\frac{-t}{1-e</sup>{-t}}e<sup>{-t}(-\mathrm{d}t)=-\int_0</sup>{+\infty}\frac{t}{e^t-1}\mathrm{d}t$$</p><p>在结论中取$s=2$, 则</p><p>$$\int_0^1\frac{\ln x}{1-x}\mathrm{d}x=-\Gamma(2)\sum_{n=1}<sup>{\infty}\frac{1}{n</sup>2}=-\frac{\pi^2}{6}$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;gamma函数&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#gamma函数&quot;&gt;¶&lt;/a&gt;$\Gamma函数$&lt;/h2&gt;
&lt;p&gt;  $\Gamma$函数是由如下含参数变量定义的积分, 又称第二类$Euler$积分, 其含参积分定义为&lt;/p&gt;
&lt;p&gt;$$\Gamma(s)=\int_0&lt;sup&gt;{+\infty}x&lt;/sup&gt;{s-1}e^{-x}\mathrm{d}x \tag{1}$$&lt;/p&gt;
&lt;p&gt;它有 &lt;strong&gt;$Gauss$无穷乘积&lt;/strong&gt;分解($Euler-Gauss$公式)&lt;/p&gt;
&lt;p&gt;$$\Gamma(x)=\lim_{n\to\infty}\frac{n!n^x}{x(x+1)\cdots(x+n)}$$&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="https://2inf.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学分析" scheme="https://2inf.top/tags/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>反演原理及应用</title>
    <link href="https://2inf.top/2019/08/25/%E5%8F%8D%E6%BC%94%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://2inf.top/2019/08/25/反演原理及应用/</id>
    <published>2019-08-24T16:51:43.000Z</published>
    <updated>2020-04-01T08:02:36.327Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是反演</h1><p>  对于数列$\left{f_n\right}$以及数列$\left{g_n\right}$满足</p><p>$$g_n=\sum_{i=0}^na_{ni}f_i \tag{1}$$</p><p>  反演便是利用$\left{g_n\right}$反推出$\left{f_n\right}$, 也即</p><p>$$f_n=\sum_{i=0}^nb_{ni}g_i \tag{2}$$</p><p>  本质上来说这是一个反解线性方程组的过程, 但观察后会发现整个方程组是一个下三角矩阵, 可以思考出更加快捷的方法</p><a id="more"></a> <h1>反演原理</h1><p>  为了便于后面的叙述, 首先引入$\delta(i,j)$函数$(Kronecker’s\ delta)$, 它的定义为</p><p>$$\delta\left(i,j\right)=\begin{cases}1\quad i=j\0\quad i\neq j\end{cases}\qquad(\text{也可记为}[i=j])$$</p><p>  下面考虑反演的过程, 考虑下面的式子应该满足什么条件</p><p>$$<br>\sum_{i=0}^nb_{ni}g_i=f_n \tag{3}<br>$$</p><p>$$<br>\begin{array}{l}<br>LHS&amp;=&amp;\displaystyle\sum_{i=0}^nb_{ni}g_i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>nb_{ni}\sum_{j=0}</sup>ia_{ij}f_j\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>nf_i\sum_{j=i}</sup>nb_{nj}a_{ji}<br>\end{array}<br>$$</p><p>  为了便于理解最后一步, 我们用矩阵进行表示</p><p>$$<br>\begin{bmatrix}<br>b_{n0}a_{00}f_0\<br>b_{n1}a_{10}f_0 &amp; b_{n1}a_{11}f_1\<br>b_{n2}a_{20}f_0 &amp; b_{n2}a_{21}f_1 &amp; b_{n2}a_{22}f_2\<br>\vdots &amp; \vdots &amp; \ddots \<br>b_{nn}a_{n0}f_0 &amp; b_{nn}a_{n1}f_1 &amp; \cdots &amp; b_{nn}a_{nn}f_n<br>\end{bmatrix}<br>$$</p><p>  前一个是<strong>对行</strong>进行, 再将行加起来, 后一个是<strong>对列</strong>进行, 再将列加起来</p><p>  因此, 式$(3)$成立的条件等价于</p><p>$$\sum_{j=i}^nb_{nj}a_{ji}=\delta(n,i) \tag{4}$$</p><p>  同理, 将$f$代入带$g$的求和式中, 可以推出</p><p>$$\sum_{j=i}^na_{nj}b_{ji}=\delta(n,i) \tag{5}$$</p><p>  如果某个数列满足上面的条件, 我们便阔以利用反演公式</p><h1>二项式反演</h1><h2 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h2><p>  二项式反演$(binomial\ inversion)$在容斥中经常用到, 可以表示为</p><p>$$<br>f_n=\sum_{i=0}<sup>n\left(-1\right)</sup>n\begin{pmatrix}n\i\end{pmatrix}g_i\Leftrightarrow<br>g_n=\sum_{i=0}<sup>n\left(-1\right)</sup>n\begin{pmatrix}n\i\end{pmatrix}<br>f_i \tag{6}<br>$$</p><p>  可以写成另一种常见形式</p><p>$$<br>f_n=\sum_{i=0}^n\begin{pmatrix}n\i\end{pmatrix}g_i\Leftrightarrow<br>g_n=\sum_{i=0}<sup>n\left(-1\right)</sup>{n-i}\begin{pmatrix}n\i\end{pmatrix}f_i \tag{7}<br>$$</p><p><strong>证明:</strong></p><p>$$\begin{array}{l}<br>g_n&amp;=&amp;\displaystyle\sum_{i=0}<sup>n\left(-1\right)</sup>{n-i}\begin{pmatrix}n\i\end{pmatrix}f_i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>n\left(-1\right)</sup>{n-i}\begin{pmatrix}n\i\end{pmatrix}\sum_{j=0}^i\begin{pmatrix}i\j\end{pmatrix}g_j\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>ng_i\sum_{j=i}</sup>n\begin{pmatrix}n\j\end{pmatrix}\begin{pmatrix}j\i\end{pmatrix}\left(-1\right)^{n-j}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>ng_i\sum_{j=i}</sup>n\begin{pmatrix}n\i\end{pmatrix}\begin{pmatrix}n-i\j-i\end{pmatrix}\left(-1\right)^{n-j}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>ng_i\begin{pmatrix}n\i\end{pmatrix}\sum_{j=0}</sup>{n-i}\begin{pmatrix}n-i\j\end{pmatrix}\left(-1\right)^{n-i-j}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>ng_i\begin{pmatrix}n\i\end{pmatrix}\left(1-1\right)</sup>{n-i}\<br>&amp;=&amp;g_n<br>\end{array}$$</p><h2 id="应用"><a class="header-anchor" href="#应用">¶</a>应用</h2><ul><li>错位排列</li></ul><p>  对于长度为$n$的序列${a_i}$, 求所有满足$1\leq i\leq n$, 使得$a_i\neq i$的种类数</p><p>  一个高中生想到的常规方法可能是利用递推, 记所求为$D_n$, $n$个错位排列按照第一位是$2,3,\cdots,n$分成$n-1$, 每个组排列个数一样多, 考虑其中一组, 不妨设第一位为$2$, 若第$2$位是$1$,有$D_{n-2}$种, 否则有$D_{n-1}$种, 结合$D_1=0,\ D_2=1$, 从而有</p><p>$$D_n=(n-1)(D_{n-1}+D_{n-2}) \tag{8}$$<br>$$D_n-nD_{n-1}=-\left(D_{n-1}-(n-1)D_{n-2}\right)=\cdots=(-1)^{n-2} \tag{9}$$<br>$$D_n=nD_{n-1}+(-1)<sup>n=\cdots=n!\sum_{i=0}</sup>n\frac{(-1)^i}{i!} \tag{10}$$</p><p>  回到正题, 我们有一个有意思的解法, 设$f_i$为恰好有$i$个位置是不变的排列, 那么<br>$$n!=\sum_{i=0}^n\begin{pmatrix}n\i\end{pmatrix}f_i \tag{11}$$<br>  可以看粗其形式和反演公式很像, 令$g_i=i!$, 有二项式反演<br>$$\begin{array}{l}<br>f_n&amp;=&amp;\displaystyle\sum_{i=0}<sup>n(-1)</sup>{n-i}\begin{pmatrix}n\i\end{pmatrix}g_i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>n(-1)</sup>{n-i}\frac{n!}{(n-i)!}\<br>&amp;=&amp;n!\displaystyle\sum_{i=0}<sup>n\frac{(-1)</sup>i}{i!}<br>\end{array}<br>$$</p><ul><li>染色问题</li></ul><p>  $n$个球排成一行, 有$m$种颜色, 每个球染一个颜色, 相邻两个球染不同颜色, 每种颜色至少使用一次, 求染色方案数</p><p>  不考虑每种颜色至少用一次这一条件, 那么答案显然是$m(m-1)^{n-1}$, 设$f_i$为恰好使用$i(i=0,1,2,\cdots,k)$种颜色的方案数, 那么</p><p>$$m(m-1)<sup>{n-1}=\sum_{i=0}</sup>m\begin{pmatrix}m\i\end{pmatrix}f_i \tag{12}$$</p><p>  经过反演得到</p><p>$$f_m=\sum_{i=0}<sup>m(-1)</sup>{m-i}\begin{pmatrix}m\i\end{pmatrix}g_i \tag{13}$$</p><p><a href="https://bzoj.zcmimi.tk/p/2839.html" target="_blank" rel="noopener">$BZOJ2839$:集合计数</a></p><p>  记$b_i$为交集有至少$i$个集合的个数, 枚举$i$个交集后, 共有$2^{n-i}$个互不相同的集合, 每个集合又有选与不选两种方案, 故$b_i=\begin{pmatrix}n\i\end{pmatrix}2<sup>{2</sup>{n-i}}$, 那么我们开始演了</p><p>$$b_k=\sum_{i=k}^n\begin{pmatrix}i\k\end{pmatrix}a_i\quad\Leftrightarrow\quad a_k=\sum_{i=k}<sup>n(-1)</sup>{n-k}\begin{pmatrix}i\k\end{pmatrix}b_i$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,l,r) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,v) memset(a,v,sizeof(a))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; ll f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n, k, ans;</span><br><span class="line">ll fac[N], inv[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; a = a * a % MOD, b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[m] % MOD * inv[n-m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n) fac[i] = (ll)fac[i<span class="number">-1</span>] * i % MOD, p[i] = (ll)p[i<span class="number">-1</span>] * <span class="number">2</span> % (MOD - <span class="number">1</span>);</span><br><span class="line">    inv[n] = power(fac[n], MOD - <span class="number">2</span>);</span><br><span class="line">    dec(i,<span class="number">1</span>,n<span class="number">-1</span>) inv[i] = (ll)inv[i+<span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    inc(i,k,n) &#123;</span><br><span class="line">        (ans += MOD + ((i-k) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * (C(i,k) * C(n,i) % MOD * (power(<span class="number">2</span>, p[n-i]) % MOD))) %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>斯特林反演</h1><h2 id="原理-v2"><a class="header-anchor" href="#原理-v2">¶</a>原理</h2><p>  在这里, 先回顾一下斯特林数($dalao$请自动忽略)</p><ul><li><strong>第一类斯特林数</strong></li></ul><p>  <strong>定义:</strong> 将$n$个元素排成$m$个轮换的方法数</p><p>  从$n-1$的情况推过来, 要么将最后一个元素放进自身的轮换, 要么将最后一个元素放进前$n-1$个元素分成的$\begin{bmatrix}n-1\m\end{bmatrix}$个轮换中的一个, 可以得到:</p><p>$$\begin{bmatrix}n\m\end{bmatrix}=\begin{bmatrix}n-1\m-1\end{bmatrix}+(n-1)*\begin{bmatrix}n-1\m\end{bmatrix} \tag{14}$$</p><p>  由于$\begin{bmatrix}n\<br>k\end{bmatrix}$是$n$个元素恰好包含$k$个轮换的排列个数, 对所有的$k$求和, 必然得到排列的总数</p><p>$$\sum_{k=0}^n\begin{bmatrix}n\<br>k\end{bmatrix}=n! \tag{15}$$</p><p>  下面是与下降幂$x<sup>{\underline{n}}$和阶乘幂$x</sup>{\overline{n}}$的关系</p><p>$$x<sup>{\underline{n}}=\sum_{i=0}</sup>n\begin{bmatrix}n\i\end{bmatrix}(-1)<sup>{n-i}x</sup>i \tag{16}$$</p><p>  用归纳法证明</p><p>$$\begin{array}{l}<br>x<sup>{\underline{n+1}}&amp;=&amp;(x-n)x</sup>{\underline{n}}\<br>&amp;=&amp;(x-n)\displaystyle\sum_{i=0}<sup>n\begin{bmatrix}n\i\end{bmatrix}(-1)</sup>{n-i}x^i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>n\begin{bmatrix}n\i\end{bmatrix}(-1)</sup>{n-i}x<sup>{i+1}-n\sum_{i=0}</sup>{n+1}\begin{bmatrix}n\i\end{bmatrix}(-1)<sup>{n-i}x</sup>i\<br>&amp;=&amp;\displaystyle\sum_{i=1}<sup>{n+1}\begin{bmatrix}n\i-1\end{bmatrix}(-1)</sup>{n-i+1}x<sup>{i}+n\sum_{i=0}</sup>{n+1}\begin{bmatrix}n\i\end{bmatrix}(-1)<sup>{n-i+1}x</sup>i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>{n+1}\left(\begin{bmatrix}n\i-1\end{bmatrix}+n\begin{bmatrix}n\i\end{bmatrix}\right)(-1)</sup>{n-i+1}x^i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>{n+1}\begin{bmatrix}n+1\i\end{bmatrix}(-1)</sup>{n+1-i}x^i<br>\end{array}$$</p><p>  类似可以证明</p><p>$$x<sup>{\overline{n}}=\sum_{i=0}</sup>n\begin{bmatrix}n\i\end{bmatrix}x^i \tag{17}$$</p><ul><li><strong>第二类斯特林数</strong></li></ul><p>  <strong>定义:</strong> 将一个有$n$件物品的集合划分成$m$个非空子集的方法数</p><p>  从$n-1$的情况推过来, 要么将最后一个元素单独放一类, 要么与前$n-1$个元素的某个非空子集放一起, 可以得到:</p><p>$$\begin{Bmatrix}n\m\end{Bmatrix}=\begin{Bmatrix}n-1\m-1\end{Bmatrix}+m*\begin{Bmatrix}n-1\m\end{Bmatrix} \tag{18}$$</p><p>  下面是与下降幂$x<sup>{\underline{n}}$和阶乘幂$x</sup>{\overline{n}}$的关系</p><p>$$m<sup>n=\sum_{i=0}</sup>n\begin{Bmatrix}n\i\end{Bmatrix}m^{\underline{i}} \tag{19}$$</p><p>  用归纳法证明, 由于$x*x<sup>{\underline{i}}=x</sup>{\underline{i+1}}+ix^{\underline{i}}$</p><p>$$\begin{array}{l}<br>m<sup>{n+1}&amp;=&amp;m\displaystyle\sum_{i=0}</sup>n\begin{Bmatrix}n\i\end{Bmatrix}m^{\underline{i}}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>n\begin{Bmatrix}n\i\end{Bmatrix}m</sup>{\underline{i+1}}+\sum_{i=0}<sup>n\begin{Bmatrix}n\i\end{Bmatrix}im</sup>{\underline{i}}\<br>&amp;=&amp;\displaystyle\sum_{i=1}<sup>{n+1}\begin{Bmatrix}n\i-1\end{Bmatrix}m</sup>{\underline{i}}+\sum_{i=0}<sup>{n+1}\begin{Bmatrix}n\i\end{Bmatrix}im</sup>{\underline{i}}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>{n+1}\left(\begin{Bmatrix}n\i-1\end{Bmatrix}+i\begin{Bmatrix}n\i\end{Bmatrix}\right)m</sup>{\underline{i}}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>{n+1}\begin{Bmatrix}n+1\i\end{Bmatrix}m</sup>{\underline{i}}<br>\end{array}$$</p><p>  类似可以证明</p><p>$$m<sup>n=\sum_{i=0}</sup>n\begin{Bmatrix}n\i\end{Bmatrix}(-1)<sup>{n-i}m</sup>{\overline{i}} \tag{20}$$</p><p>  当然还有两个比较显然的东西</p><p>$$x<sup>{\underline{n}}=(-1)(-x)</sup>{\overline{n}} \tag{21}$$<br>$$x<sup>{\overline{n}}=(-1)(-x)</sup>{\underline{n}} \tag{22}$$</p><ul><li><strong>反转公式</strong></li></ul><p>$$\sum_{k=m}<sup>n(-1)</sup>{n-k}\begin{bmatrix}n\k\end{bmatrix}\begin{Bmatrix}k\m\end{Bmatrix}=[m=n] \tag{23}$$</p><p>$$\sum_{k=m}<sup>n(-1)</sup>{n-k}\begin{Bmatrix}n\k\end{Bmatrix}\begin{bmatrix}k\m\end{bmatrix}=[m=n] \tag{24}$$</p><p>$proof\ 1:$</p><p>$$\begin{array}{l}<br>m<sup>{\underline{n}}&amp;=&amp;\displaystyle\sum_{i=0}</sup>n\begin{bmatrix}n\i\end{bmatrix}(-1)<sup>{n-i}m</sup>i\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>n\begin{bmatrix}n\i\end{bmatrix}(-1)</sup>{n-i}\sum_{j=0}<sup>i\begin{Bmatrix}i\j\end{Bmatrix}m</sup>{\underline{j}}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>nm</sup>{\underline{i}}\sum_{j=i}<sup>n(-1)</sup>{n-j}\begin{bmatrix}n\j\end{bmatrix}\begin{Bmatrix}j\i\end{Bmatrix}<br>\end{array}$$</p><p>$proof\ 2:$</p><p>$$\begin{array}{l}<br>m<sup>n&amp;=&amp;\displaystyle\sum_{i=0}</sup>n\begin{Bmatrix}n\i\end{Bmatrix}m^{\underline{i}}\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>n\begin{Bmatrix}n\i\end{Bmatrix}\sum_{j=0}</sup>i(-1)<sup>{i-j}\begin{bmatrix}i\j\end{bmatrix}m</sup>j\<br>&amp;=&amp;\displaystyle\sum_{i=0}<sup>nm</sup>i\sum_{j=i}<sup>n(-1)</sup>{n-j}\begin{Bmatrix}n\j\end{Bmatrix}\begin{bmatrix}j\i\end{bmatrix}<br>\end{array}$$</p><ul><li><strong>斯特林反演</strong></li></ul><p>$$f(n)=\sum_{i=0}^n\begin{Bmatrix}n\k\end{Bmatrix}g(k) \quad\Leftrightarrow\quad g(n)=\sum_{k=0}<sup>n(-1)</sup>{n-k}\begin{bmatrix}n\k\end{bmatrix}f(k) \tag{25}$$</p><p>  $(25)$的证明如下:</p><p>$$\begin{array}{l}<br>f(n)&amp;=&amp;\displaystyle\sum_{k=0}^n\begin{Bmatrix}n\k\end{Bmatrix}g(k)\<br>&amp;=&amp;\displaystyle\sum_{k=0}<sup>n\begin{Bmatrix}n\k\end{Bmatrix}\sum_{j=0}</sup>k(-1)^{k-j}\begin{bmatrix}k\j\end{bmatrix}f(j)\<br>&amp;=&amp;\displaystyle\sum_{k=0}<sup>n\sum_{j=k}</sup>n\begin{Bmatrix}n\j\end{Bmatrix}\begin{bmatrix}j\k\end{bmatrix}(-1)^{j-k}f(k)\<br>&amp;=&amp;\displaystyle\sum_{k=0}^n[k=n]f(k)\<br>&amp;=&amp;f(n)<br>\end{array}$$</p><h1>莫比乌斯反演</h1><h2 id="原理-v3"><a class="header-anchor" href="#原理-v3">¶</a>原理</h2><p>  <strong>莫比乌斯函数$\mu(m)$</strong> 对所有整数$m\geq1由等式$</p><p>$$\sum_{d|m}\mu(d)=\left[m=1\right] \tag{26}$$</p><p>来定义, 这个等式是一个递归式, 代入$m=1,2,\cdots,12$可以得到前$12$个值:</p><table><thead><tr><th style="text-align:center">$m$</th><th style="text-align:center">$1$</th><th style="text-align:center">$2$</th><th style="text-align:center">$3$</th><th style="text-align:center">$4$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th><th style="text-align:center">$9$</th><th style="text-align:center">$10$</th><th style="text-align:center">$11$</th><th style="text-align:center">$12$</th></tr></thead><tbody><tr><td style="text-align:center">$\mu(m)$</td><td style="text-align:center">$1$</td><td style="text-align:center">$-1$</td><td style="text-align:center">$-1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$-1$</td><td style="text-align:center">$1$</td><td style="text-align:center">$-1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$-1$</td><td style="text-align:center">$0$</td></tr></tbody></table><p>$$g(m)=\sum_{d|m}f(d)\quad\Leftrightarrow\quad f(m)=\sum_{d|m}\mu(\frac{m}{d})g(d) \tag{27}$$</p><p>  $(27)$的证明如下:<br>$$\begin{array}{l}<br>g(m)&amp;=&amp;\displaystyle\sum_{d|m}f(d)\<br>&amp;=&amp;\displaystyle\sum_{d|m}\sum_{k|d}\mu(\frac{d}{k})g(k)\<br>&amp;=&amp;\displaystyle\sum_{k|m}g(k)\sum_{d|m,k|d}\mu(\frac{d}{k})\<br>&amp;=&amp;\displaystyle\sum_{k|m}g(k)\sum_{d|(m/k)}\mu(d)\<br>&amp;=&amp;\displaystyle\sum_{k|m}[m/k=1]g(k)\<br>&amp;=&amp;g(m)<br>\end{array}$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;什么是反演&lt;/h1&gt;
&lt;p&gt;  对于数列$\left{f_n\right}$以及数列$\left{g_n\right}$满足&lt;/p&gt;
&lt;p&gt;$$g_n=\sum_{i=0}^na_{ni}f_i \tag{1}$$&lt;/p&gt;
&lt;p&gt;  反演便是利用$\left{g_n\right}$反推出$\left{f_n\right}$, 也即&lt;/p&gt;
&lt;p&gt;$$f_n=\sum_{i=0}^nb_{ni}g_i \tag{2}$$&lt;/p&gt;
&lt;p&gt;  本质上来说这是一个反解线性方程组的过程, 但观察后会发现整个方程组是一个下三角矩阵, 可以思考出更加快捷的方法&lt;/p&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://2inf.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="组合数学" scheme="https://2inf.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>算法模板</title>
    <link href="https://2inf.top/2019/08/24/ACM%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    <id>https://2inf.top/2019/08/24/ACM算法模板/</id>
    <published>2019-08-23T16:15:02.000Z</published>
    <updated>2020-04-01T08:01:38.134Z</updated>
    
    <content type="html"><![CDATA[<h1>基础</h1><h2 id="排序"><a class="header-anchor" href="#排序">¶</a>排序</h2><h3 id="归并排序"><a class="header-anchor" href="#归并排序">¶</a>归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergesort(l, mid);</span><br><span class="line">    mergesort(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> p = l, q = mid + <span class="number">1</span>, cnt = l;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid &amp;&amp; q &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p] &lt; a[q]) t[cnt++] = a[p++];</span><br><span class="line">        <span class="keyword">else</span> t[cnt++] = a[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid) t[cnt++] = a[p++];</span><br><span class="line">    <span class="keyword">while</span>(q &lt;= r) t[cnt++] = a[q++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) a[i] = t[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h3 id="拓扑排序"><a class="header-anchor" href="#拓扑排序">¶</a>拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head[N], u[N], v[N], deg[N], tot, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    v[++tot] = y;</span><br><span class="line">    u[tot] = head[x];</span><br><span class="line">    head[x] = tot;</span><br><span class="line">    deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!deg[i]) q.push(i);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        a[++cnt] = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = u[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = v[i];</span><br><span class="line">            <span class="keyword">if</span> (--deg[y] == <span class="number">0</span>) q.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学"><a class="header-anchor" href="#数学">¶</a>数学</h2><h3 id="素数"><a class="header-anchor" href="#素数">¶</a>素数</h3><ul><li>$Eratosthenes$筛法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(nloglogn)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i]) <span class="keyword">continue</span>;</span><br><span class="line">        p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N / i; ++j) v[i*j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线性筛法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] * i &lt;= N; ++j) &#123;</span><br><span class="line">            v[i*p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧几里得"><a class="header-anchor" href="#欧几里得">¶</a>欧几里得</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得"><a class="header-anchor" href="#扩展欧几里得">¶</a>扩展欧几里得</h3><p>  在求出$gcd(a,b)$的同时求出二元一次不定方程$ax+by=gcd(a,b)$的一组整数解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        exgcd(b, a % b, x, y);</span><br><span class="line">        y -= a / b * y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉函数"><a class="header-anchor" href="#欧拉函数">¶</a>欧拉函数</h3><p>  我们知道$\varphi(n)$表示小于$n$且与$n$互素的整数个数, 而$n$可分解为$n=\displaystyle\prod_{i=1}<sup>kp_i</sup>{a_i}$, 根据容斥原理我们有</p><p>$$\varphi(n)=\sum_{S\subseteq\left{p_1,p_2,\cdots,p_k\right}}(-1)^{|S|}\frac{n}{\displaystyle\prod_{p_i\in S}p_i}$$</p><p>  展开后可以得到</p><p>$$\varphi(n)=n*\prod_{i=1}^k\left(1-\frac{1}{p_i}\right)$$</p><ol><li>若$n$是素数 , 有$\varphi(n)=n−1$</li><li>若$gcd(n,m)=1$, 有$\varphi(mn)=\varphi(m)\varphi(n)$</li><li>若$n$和$m$是素数 , 有$\varphi(nm)=nm−1$</li><li>若$p$是素数 , 有$\varphi(p<sup>q)=p</sup>q−p^{q−1}$</li><li>$\displaystyle\sum_{d|m}\varphi(d)=m$</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个Euler函数值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">int</span> res = n;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123; </span><br><span class="line">res -= res / i; </span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) res -= res / n; </span><br><span class="line"><span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(nlogn)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) phi[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (phi[i] == i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a class="header-anchor" href="#数据结构">¶</a>数据结构</h2><h3 id="并查集"><a class="header-anchor" href="#并查集">¶</a>并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论"><a class="header-anchor" href="#图论">¶</a>图论</h2><h3 id="最短路"><a class="header-anchor" href="#最短路">¶</a>最短路</h3><h4 id="dijkstra"><a class="header-anchor" href="#dijkstra">¶</a>$dijkstra$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">int</span> a[N][N], d[N], pre[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        d[i] = INF; vis[i] = <span class="number">0</span>; pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; (x == <span class="number">-1</span> || d[j] &lt; d[x])) x = j;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + a[x][y]) &#123;</span><br><span class="line">                d[y] = d[x] + a[x][y];</span><br><span class="line">                pre[y] = x;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dijkstra-堆优化"><a class="header-anchor" href="#dijkstra-堆优化">¶</a>$dijkstra(堆优化)$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to, w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot].w = z;</span><br><span class="line">    e[tot].next = head[x];</span><br><span class="line">    e[tot].to = y;</span><br><span class="line">    head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + e[i].w) &#123;</span><br><span class="line">                d[y] = d[x] + e[i].w;</span><br><span class="line">                q.push(make_pair(-d[y], y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dijkstra-v2"><a class="header-anchor" href="#dijkstra-v2">¶</a>$dijkstra$</h4><ul><li>最小环</li></ul><h3 id="最小生成树"><a class="header-anchor" href="#最小生成树">¶</a>最小生成树</h3><h4 id="kruskal-算法"><a class="header-anchor" href="#kruskal-算法">¶</a>$Kruskal$算法</h4><p>  比较适合于稀疏图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, f[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (edge a, edge b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">krusal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = Find(e[i].u);</span><br><span class="line">        <span class="keyword">int</span> y = Find(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            ans += e[i].w;</span><br><span class="line">            f[x] = y;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//不连通</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prim-算法"><a class="header-anchor" href="#prim-算法">¶</a>$Prim$算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> a[N][N], d[N], v[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!v[j] &amp;&amp; (x == <span class="number">0</span> || d[j] &lt; d[x])) x = j;</span><br><span class="line">        v[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">if</span> (!v[y]) d[y] = min(d[y], a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>提高</h1><h2 id="图论-v2"><a class="header-anchor" href="#图论-v2">¶</a>图论</h2><h3 id="网络流初步"><a class="header-anchor" href="#网络流初步">¶</a>网络流初步</h3><h4 id="edmonds-karp"><a class="header-anchor" href="#edmonds-karp">¶</a>Edmonds-Karp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s, t, maxflow, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ver[M], edge[M], Next[M], head[N], v[N], incf[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = y, edge[tot] = z, Next[tot] = head[x], head[x] = tot;</span><br><span class="line">    ver[++tot] = x, edge[tot] = <span class="number">0</span>, Next[tot] = head[y], head[y] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s); v[s] = <span class="number">1</span>;</span><br><span class="line">    incf[s] = INF;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">            <span class="keyword">if</span> (edge[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = ver[i];</span><br><span class="line">                <span class="keyword">if</span> (v[y]) <span class="keyword">continue</span>;</span><br><span class="line">                incf[y] = min(incf[x], edge[i]);</span><br><span class="line">                pre[y] = i;</span><br><span class="line">                q.push(y);</span><br><span class="line">                v[y] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (y == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t;</span><br><span class="line">        <span class="keyword">while</span> (x != s) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = pre[x];</span><br><span class="line">            edge[i] -= incf[t];</span><br><span class="line">            edge[i^<span class="number">1</span>] += incf[t];</span><br><span class="line">            x = ver[i^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        maxflow += incf[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dinic"><a class="header-anchor" href="#dinic">¶</a>Dinic</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>附录</h1><h2 id="对拍"><a class="header-anchor" href="#对拍">¶</a>对拍</h2><p>$bat$语言版本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">do</span> (</span><br><span class="line">  mine.exe &lt; stdin<span class="variable">%%i</span>.txt &gt; out<span class="variable">%%i</span>.txt</span><br><span class="line">  fc out<span class="variable">%%i</span>.txt stdout<span class="variable">%%i</span>.txt &gt; diff<span class="variable">%%i</span>.txt</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">set</span> cnt=<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%i</span>:UnAccepted!</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">del</span> diff<span class="variable">%%i</span>.txt</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%i</span>:Accepted!</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%cnt%</span>==<span class="number">0</span> <span class="built_in">color</span> a &amp;&amp; <span class="built_in">echo</span> *** Totally Accepted! ***</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%cnt%</span>==<span class="number">1</span> <span class="built_in">color</span> c &amp;&amp; <span class="built_in">echo</span> *** <span class="keyword">Not</span> All Accepted! ***</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h2 id="vim配置"><a class="header-anchor" href="#vim配置">¶</a>vim配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> cin</span><br><span class="line"><span class="keyword">colo</span> evening</span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;基础&lt;/h1&gt;
&lt;h2 id=&quot;排序&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#排序&quot;&gt;¶&lt;/a&gt;排序&lt;/h2&gt;
&lt;h3 id=&quot;归并排序&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#归并排序&quot;&gt;¶&lt;/a&gt;归并排序&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergesort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l == r) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (l + r) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mergesort(l, mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mergesort(mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = l, q = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, cnt = l;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p &amp;lt;= mid &amp;amp;&amp;amp; q &amp;lt;= r)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[p] &amp;lt; a[q]) t[cnt++] = a[p++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; t[cnt++] = a[q++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p &amp;lt;= mid) t[cnt++] = a[p++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(q &amp;lt;= r) t[cnt++] = a[q++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = l; i &amp;lt;= r; ++i) a[i] = t[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://2inf.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ1845 Sumdiv</title>
    <link href="https://2inf.top/2019/07/17/POJ1845%20Sumdiv/"/>
    <id>https://2inf.top/2019/07/17/POJ1845 Sumdiv/</id>
    <published>2019-07-17T02:47:04.000Z</published>
    <updated>2020-04-01T08:02:07.383Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1845" target="_blank" rel="noopener">$Sumdiv$</a></p><p>  <strong>题意</strong>: 求$A^B$的所有约数之和$\mod{9901}\left(1\leq A,B \leq5*10^7\right)$</p><p>  <strong>分析</strong>: A分解质因数为$p_1^{c_1}\times p_2^{c_2}\times\cdots\times p_n<sup>{c_n}$。那么$A</sup>B$表示为$p_1^{Bc_1}\times p_2^{Bc_2}\times\cdots\times p_n<sup>{Bc_n}$。$A</sup>B$的所有约数表示为集合${p_1^{k_1}\times p_2^{k_2}\times\cdots\times p_n^{k_n}}$，其中$0\leq k_i \leq B\times c_i\left(1\leq i \leq n\right)$</p><a id="more"></a> <p>  由乘法分配律, $A^B$的所有约数之和为:</p><p>$$\left(1+p_1+\cdots+p_1<sup>{B*c_1}\right)*\left(1+p_2+\cdots+p_2</sup>{B<em>c_2}\right)</em>\cdots\*\left(1+p_n+\cdots+p_n<sup>{B*c_n}\right)=\prod_{i=1}</sup>n\left(\sum_{j=0}<sup>{B*c_i}\left(p_i\right)</sup>j\right)$$</p><p>  括号内为等比数列，直接使用求和公式，需要做除法。答案还需对9901取模，mod运算只对加、减、乘有分配律，不能对分子分母取模后做除法，换一种思路，<strong>用分治法对等比数列求和</strong>。</p><p>  用分治法求$\displaystyle\sum_{i=1}<sup>cp</sup>i\quad\text{若c为奇数:}$<br>$$\sum_{i=1}<sup>cp</sup>i=\left(1+p+\cdots+p<sup>\frac{c-1}{2}\right)+\left(p</sup>\frac{c+1}{2}+\cdots+p<sup>c\right)\=\left(1+p+\cdots+p</sup>\frac{c-1}{2}\right)+p<sup>\frac{c+1}{2}*\left(1+p+\cdots+p</sup>\frac{c-1}{2}\right)\=(1+p<sup>\frac{c+1}{2})*\sum_{i=1}</sup>\frac{c+1}{2}p^i$$</p><p>  若c为偶数，类似有:</p><p>$$\sum_{i=1}<sup>cp</sup>i=(1+p<sup>\frac{c}{2})*\sum_{i=1}</sup>{\frac{c}{2}-1}p<sup>i+p</sup>c$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1005</span>, MOD = <span class="number">9901</span>;</span><br><span class="line">pair&lt;ll, ll&gt; fac[N];</span><br><span class="line">ll cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a % MOD)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll p, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!c) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &amp; <span class="number">1</span>) <span class="keyword">return</span> (qpow(p, (c + <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>) * sum(p, c / <span class="number">2</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ((qpow(p, c / <span class="number">2</span>) + <span class="number">1</span>) * sum(p, c / <span class="number">2</span> - <span class="number">1</span>) + qpow(p, c)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ll num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                num++;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            fac[++cnt] = make_pair(i, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) fac[++cnt] = make_pair(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</span><br><span class="line">    divide(a);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        ll p = fac[i].first, c = fac[i].second;</span><br><span class="line">        ans = ans * sum(p, b * c) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a == <span class="number">0</span> ? <span class="number">0</span> : ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1845&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$Sumdiv$&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;题意&lt;/strong&gt;: 求$A^B$的所有约数之和$\mod{9901}\left(1\leq A,B \leq5*10^7\right)$&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;分析&lt;/strong&gt;: A分解质因数为$p_1^{c_1}\times p_2^{c_2}\times\cdots\times p_n&lt;sup&gt;{c_n}$。那么$A&lt;/sup&gt;B$表示为$p_1^{Bc_1}\times p_2^{Bc_2}\times\cdots\times p_n&lt;sup&gt;{Bc_n}$。$A&lt;/sup&gt;B$的所有约数表示为集合${p_1^{k_1}\times p_2^{k_2}\times\cdots\times p_n^{k_n}}$，其中$0\leq k_i \leq B\times c_i\left(1\leq i \leq n\right)$&lt;/p&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://2inf.top/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="分治" scheme="https://2inf.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>部分写作知识点小结</title>
    <link href="https://2inf.top/2019/01/03/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E5%B0%8F%E7%BB%93/"/>
    <id>https://2inf.top/2019/01/03/博客写作小结/</id>
    <published>2019-01-03T14:55:00.000Z</published>
    <updated>2020-03-26T09:32:38.229Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一篇测试博文</p><p><a href="https://pandoc.org/MANUAL.html#pandocs-markdown" target="_blank" rel="noopener">pandoc教程</a></p><h1>$LaTex$</h1><p>下面教程摘自MITOPENCOURSEWARE</p><ul><li><a href="https://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/" target="_blank" rel="noopener"><u>LaTeX Tutorial</u></a></li><li><a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="noopener"><u>Draw a symbol to get its LaTeX command</u></a></li><li><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols" target="_blank" rel="noopener"><u>LaTeX Symbols</u></a></li></ul><a id="more"></a> <h1>Markdown</h1><p>Markdown教程现在已经烂大街了，在这里主要是作为备忘录进行查阅。</p><h2 id="公式"><a class="header-anchor" href="#公式">¶</a>公式</h2><p>插入公式与代码分别是用$与 ` 符号(～键)包裹所写部分</p><ul><li>在需要高亮的代码块的前一行及后一行使用三个反引号。</li><li>同时第一行反引号后面，写代码块所使用的语言。</li><li>使用 <code>\left</code>和 <code>\right</code>来创建自动匹配高度的 ()，[] 和 {} 。<br>在每个公式末尾前使用<code>\tag{行标}</code>来实现行标。</li></ul><h3 id="希腊字母"><a class="header-anchor" href="#希腊字母">¶</a>希腊字母</h3><table><thead><tr><th style="text-align:center">显示</th><th style="text-align:center">大写</th><th style="text-align:center">命令</th><th style="text-align:center">显示</th><th style="text-align:center">大写</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">$\alpha$</td><td style="text-align:center">$\rm{A}$</td><td style="text-align:center"><code>$\alpha$</code></td><td style="text-align:center">$\beta$</td><td style="text-align:center">$\rm{B}$</td><td style="text-align:center"><code>$\beta$</code></td></tr><tr><td style="text-align:center">$\gamma$</td><td style="text-align:center">$\Gamma$</td><td style="text-align:center"><code>$\gamma$</code></td><td style="text-align:center">$\delta$</td><td style="text-align:center">$\Delta$</td><td style="text-align:center"><code>$\delta$</code></td></tr><tr><td style="text-align:center">$\epsilon$</td><td style="text-align:center">$\rm{E}$</td><td style="text-align:center"><code>$\epsilon$</code></td><td style="text-align:center">$\zeta$</td><td style="text-align:center">$\rm{Z}$</td><td style="text-align:center"><code>$\zeta$</code></td></tr><tr><td style="text-align:center">$\eta$</td><td style="text-align:center">$\rm{H}$</td><td style="text-align:center"><code>$\eta$</code></td><td style="text-align:center">$\theta$</td><td style="text-align:center">$\Theta$</td><td style="text-align:center"><code>$\theta$</code></td></tr><tr><td style="text-align:center">$\iota$</td><td style="text-align:center">$\rm{I}$</td><td style="text-align:center"><code>$\iota$</code></td><td style="text-align:center">$\kappa$</td><td style="text-align:center">$\rm{K}$</td><td style="text-align:center"><code>$\kappa$</code></td></tr><tr><td style="text-align:center">$\lambda$</td><td style="text-align:center">$\Lambda$</td><td style="text-align:center"><code>$\lambda$</code></td><td style="text-align:center">$\mu$</td><td style="text-align:center">$\rm{M}$</td><td style="text-align:center"><code>$\mu$</code></td></tr><tr><td style="text-align:center">$\nu$</td><td style="text-align:center">$\rm{N}$</td><td style="text-align:center"><code>$\nu$</code></td><td style="text-align:center">$\xi$</td><td style="text-align:center">$\Xi$</td><td style="text-align:center"><code>$\xi$</code></td></tr><tr><td style="text-align:center">$\pi$</td><td style="text-align:center">$\Pi$</td><td style="text-align:center"><code>$\pi$</code></td><td style="text-align:center">$\rho$</td><td style="text-align:center">$\rm{R}$</td><td style="text-align:center"><code>$\rho$</code></td></tr><tr><td style="text-align:center">$\sigma$</td><td style="text-align:center">$\Sigma$</td><td style="text-align:center"><code>$\sigma$</code></td><td style="text-align:center">$\tau$</td><td style="text-align:center">$\rm{T}$</td><td style="text-align:center"><code>$\tau$</code></td></tr><tr><td style="text-align:center">$\upsilon$</td><td style="text-align:center">$\Upsilon$</td><td style="text-align:center"><code>$\upsilon$</code></td><td style="text-align:center">$\phi$</td><td style="text-align:center">$\Phi$</td><td style="text-align:center"><code>$\phi$</code></td></tr><tr><td style="text-align:center">$\chi$</td><td style="text-align:center">$\rm{X}$</td><td style="text-align:center"><code>$\chi$</code></td><td style="text-align:center">$\psi$</td><td style="text-align:center">$\Psi$</td><td style="text-align:center"><code>$\psi$</code></td></tr><tr><td style="text-align:center">$\omega$</td><td style="text-align:center">$\Omega$</td><td style="text-align:center"><code>$\omega$</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>\注:只需将命令的首字母大写即可得大写希腊字母，在命令前加上var前缀即可得到斜体希腊字母如:  $\Gamma\phi$ &amp; $\varGamma\varphi​$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\Gamma\phi$ &amp; $\varGamma\varphi​$</span><br></pre></td></tr></table></figure><h3 id="运算"><a class="header-anchor" href="#运算">¶</a>运算</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">显示</th><th style="text-align:center">命令</th><th style="text-align:center">显示</th></tr></thead><tbody><tr><td style="text-align:center"><code>$\pm$</code></td><td style="text-align:center">$\pm$</td><td style="text-align:center"><code>$\mp$</code></td><td style="text-align:center">$\mp$</td></tr><tr><td style="text-align:center"><code>$\neq$</code></td><td style="text-align:center">$\neq$</td><td style="text-align:center"><code>$\times$</code></td><td style="text-align:center">$\times$</td></tr><tr><td style="text-align:center"><code>$\div$</code></td><td style="text-align:center">$\div$</td><td style="text-align:center"><code>$\leq$</code></td><td style="text-align:center">$\leq$</td></tr><tr><td style="text-align:center"><code>$\geq$</code></td><td style="text-align:center">$\geq$</td><td style="text-align:center"><code>$\ngeq$</code></td><td style="text-align:center">$\ngeq$</td></tr><tr><td style="text-align:center"><code>$\ast$</code></td><td style="text-align:center">$\ast$</td><td style="text-align:center"><code>$\approx$</code></td><td style="text-align:center">$\approx$</td></tr><tr><td style="text-align:center"><code>$\equiv$</code></td><td style="text-align:center">$\equiv$</td><td style="text-align:center"><code>$bigcup$</code></td><td style="text-align:center">$\bigcup$</td></tr><tr><td style="text-align:center"><code>$\iint$</code></td><td style="text-align:center">$\iint$</td><td style="text-align:center"><code>$\iiint$</code></td><td style="text-align:center">$\iiint$</td></tr><tr><td style="text-align:center"><code>$\oint$</code></td><td style="text-align:center">$\oint$</td><td style="text-align:center"><code>$\mid$</code></td><td style="text-align:center">$\mid$</td></tr><tr><td style="text-align:center"><code>$\because$</code></td><td style="text-align:center">$\because$</td><td style="text-align:center"><code>\therefore</code></td><td style="text-align:center">$\therefore$</td></tr></tbody></table><h3 id="特殊符号"><a class="header-anchor" href="#特殊符号">¶</a>特殊符号</h3><table><thead><tr><th style="text-align:center">显示</th><th style="text-align:center">命令</th><th style="text-align:center">显示</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">$\infty$</td><td style="text-align:center"><code>$\infty$</code></td><td style="text-align:center">$\cup$</td><td style="text-align:center"><code>$\cup$</code></td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center"><code>$\cap$</code></td><td style="text-align:center">$\subset$</td><td style="text-align:center"><code>$\subset$</code></td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:center"><code>$\subseteq$</code></td><td style="text-align:center">$\supset$</td><td style="text-align:center"><code>$\supset$</code></td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center"><code>$\in$</code></td><td style="text-align:center">$\notin$</td><td style="text-align:center"><code>$\notin$</code></td></tr><tr><td style="text-align:center">$\varnothing$</td><td style="text-align:center"><code>$\varnothing$</code></td><td style="text-align:center">$\forall$</td><td style="text-align:center"><code>$\forall$</code></td></tr><tr><td style="text-align:center">$\exists$</td><td style="text-align:center"><code>$\exists$</code></td><td style="text-align:center">$\lnot$</td><td style="text-align:center"><code>$\lnot$</code></td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:center"><code>$\nabla$</code></td><td style="text-align:center">$\partial$</td><td style="text-align:center"><code>$\partial$</code></td></tr><tr><td style="text-align:center">$\angle$</td><td style="text-align:center"><code>$\angle$</code></td><td style="text-align:center">$\bot$</td><td style="text-align:center"><code>$\bot$</code></td></tr><tr><td style="text-align:center">$\bigodot$</td><td style="text-align:center"><code>$\bigodot$</code></td><td style="text-align:center">$\bigotimes$</td><td style="text-align:center"><code>$\bigotimes$</code></td></tr></tbody></table><h3 id="空格"><a class="header-anchor" href="#空格">¶</a>空格</h3><ul><li><code>$\,$</code> $\frac{1}{6}$m宽度</li><li><code>$\;$</code> $\frac{2}{7}$m宽度</li><li><code>$\$</code> $\frac{1}{3}$m宽度</li><li><code>$\quad$</code> m宽度</li><li><code>$\qquad$</code> 2m宽度</li></ul><h3 id="矢量与箭头"><a class="header-anchor" href="#矢量与箭头">¶</a>矢量与箭头</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">显示</th><th style="text-align:center">命令</th><th style="text-align:center">显示</th></tr></thead><tbody><tr><td style="text-align:center"><code>$\vec{a}$</code></td><td style="text-align:center">$\vec{a}$</td><td style="text-align:center"><code>$\bar{s}$</code></td><td style="text-align:center">$\bar{s}$ (平均值)</td></tr><tr><td style="text-align:center"><code>$\rightarrow$</code></td><td style="text-align:center">$\rightarrow$</td><td style="text-align:center"><code>$\Rightarrow$</code></td><td style="text-align:center">$\Rightarrow$</td></tr><tr><td style="text-align:center"><code>$\overrightarrow{a}$</code></td><td style="text-align:center">$\overrightarrow{a}$</td><td style="text-align:center"><code>$\overleftrightarrow{a}$</code></td><td style="text-align:center">$\overleftrightarrow{a}$</td></tr><tr><td style="text-align:center"><code>$\overleftarrow{a}$</code></td><td style="text-align:center">$\overleftarrow{a}$</td><td style="text-align:center"><code>$\longrightarrow$</code></td><td style="text-align:center">$\longrightarrow$</td></tr><tr><td style="text-align:center"><code>$\overline{a+b}$</code></td><td style="text-align:center">$\overline{a+b}$</td><td style="text-align:center"><code>$\underline{a+b}$</code></td><td style="text-align:center">$\underline{a+b}$</td></tr><tr><td style="text-align:center"><code>$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</code></td><td style="text-align:center">$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</td><td style="text-align:center"><code>$\hat{y}$</code></td><td style="text-align:center">$\hat{y}$</td></tr></tbody></table><h3 id="矩阵与方程组"><a class="header-anchor" href="#矩阵与方程组">¶</a>矩阵与方程组</h3><ul><li>pmatrix:<br><code>$\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}$</code> : \begin{pmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{pmatrix}</li><li>bmatrix:<br><code>$\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}$</code> : \begin{bmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{bmatrix}</li><li>Bmatrix:<br><code>$\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}$</code> : \begin{Bmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{Bmatrix}</li><li>vmatrix:<br><code>$\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}$</code> : \begin{vmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{vmatrix}</li><li>Vmatrix:<br><code>$\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}$</code> : \begin{Vmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{Vmatrix}</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;</span><br><span class="line">a<span class="emphasis">_&#123;11&#125;&amp;a_</span>&#123;12&#125;&amp;\cdots&amp;a_&#123;1n&#125;\\</span><br><span class="line">a<span class="emphasis">_&#123;21&#125;&amp;a_</span>&#123;21&#125;&amp;\cdots&amp;a_&#123;2n&#125;\\</span><br><span class="line">\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\</span><br><span class="line">a<span class="emphasis">_&#123;n1&#125;&amp;a_</span>&#123;n2&#125;&amp;\cdots&amp;a_&#123;nn&#125;\\</span><br><span class="line">\end&#123;matrix&#125;$$(类似有\ldots底端对齐)</span><br><span class="line">$$</span><br><span class="line">\left\&#123;</span><br><span class="line">\begin&#123;array&#125;\</span><br><span class="line">a<span class="emphasis">_1x + a_</span>2y + a<span class="emphasis">_3z = d_</span>1 \\</span><br><span class="line">b<span class="emphasis">_1x + b_</span>2y + b<span class="emphasis">_3z = d_</span>2 \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right.</span><br><span class="line">$$(array亦可改为cases)</span><br><span class="line">$$\begin&#123;cases&#125; </span><br><span class="line"><span class="code">a_&#123;11&#125;x_1&amp;+&amp;a_&#123;12&#125;x_2&amp;+&amp;\cdots&amp;+a_&#123;1n&#125;x_n&amp;=&amp;b_1\\</span></span><br><span class="line"><span class="code">&amp;&amp;&amp;&amp;\vdots\\</span></span><br><span class="line"><span class="code">a_&#123;n1&#125;x_1&amp;+&amp;a_&#123;n2&#125;x_2&amp;+&amp;\cdots&amp;+a_&#123;nn&#125;x_n&amp;=&amp;b_n&amp;</span></span><br><span class="line">\end&#123;cases&#125;$$</span><br></pre></td></tr></table></figure><p>$$\begin{matrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\ \ a_{21}&amp;a_{21}&amp;\cdots&amp;a_{2n}\\ \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\ \ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\ \end{matrix}$$</p><p>$$\begin{cases}<br>​a_{11}x_1&amp;+&amp;a_{12}x_2&amp;+&amp;\cdots&amp;+a_{1n}x_n&amp;=&amp;b_1\\ &amp;&amp;&amp;&amp;\vdots\\ a_{n1}x_1&amp;+&amp;a_{n2}x_2&amp;+&amp;\cdots&amp;+a_{nn}x_n&amp;=&amp;b_n&amp;<br>\end{cases}$$</p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">公式快速参考</a></p><h2 id="表情"><a class="header-anchor" href="#表情">¶</a>表情</h2><table><thead><tr><th style="text-align:center">syntax</th><th style="text-align:center">preview</th><th style="text-align:center">syntax</th><th style="text-align:center">preview</th></tr></thead><tbody><tr><td style="text-align:center"><code>:sun_with_face:</code></td><td style="text-align:center">🌞</td><td style="text-align:center"><code>:smile:</code></td><td style="text-align:center">😄</td></tr><tr><td style="text-align:center"><code>:laughing:</code></td><td style="text-align:center">😆</td><td style="text-align:center"><code>:blush:</code></td><td style="text-align:center">😊</td></tr><tr><td style="text-align:center"><code>:smiley:</code></td><td style="text-align:center">😃</td><td style="text-align:center"><code>:relaxed:</code></td><td style="text-align:center">☺️</td></tr><tr><td style="text-align:center"><code>:smirk:</code></td><td style="text-align:center">😏</td><td style="text-align:center"><code>:heart_eyes:</code></td><td style="text-align:center">😍</td></tr><tr><td style="text-align:center"><code>:kissing_heart:</code></td><td style="text-align:center">😘</td><td style="text-align:center"><code>:kissing_closed_eyes:</code></td><td style="text-align:center">😚</td></tr><tr><td style="text-align:center"><code>:flushed:</code></td><td style="text-align:center">😳</td><td style="text-align:center"><code>:relieved:</code></td><td style="text-align:center">😌</td></tr><tr><td style="text-align:center"><code>:satisfied:</code></td><td style="text-align:center">😆</td><td style="text-align:center"><code>:grin:</code></td><td style="text-align:center">😁</td></tr><tr><td style="text-align:center"><code>:wink:</code></td><td style="text-align:center">😉</td><td style="text-align:center"><code>:stuck_out_tongue_winking_eye:</code></td><td style="text-align:center">😜</td></tr><tr><td style="text-align:center"><code>:stuck_out_tongue_closed_eyes:</code></td><td style="text-align:center">😝</td><td style="text-align:center"><code>:grinning:</code></td><td style="text-align:center">😀</td></tr><tr><td style="text-align:center"><code>:kissing:</code></td><td style="text-align:center">😗</td><td style="text-align:center"><code>:kissing_smiling_eyes:</code></td><td style="text-align:center">😙</td></tr><tr><td style="text-align:center"><code>:stuck_out_tongue:</code></td><td style="text-align:center">😛</td><td style="text-align:center"><code>:sleeping:</code></td><td style="text-align:center">😴</td></tr><tr><td style="text-align:center"><code>:worried:</code></td><td style="text-align:center">😟</td><td style="text-align:center"><code>:frowning:</code></td><td style="text-align:center">😦</td></tr><tr><td style="text-align:center"><code>:anguished:</code></td><td style="text-align:center">😧</td><td style="text-align:center"><code>:open_mouth:</code></td><td style="text-align:center">😮</td></tr><tr><td style="text-align:center"><code>:confused:</code></td><td style="text-align:center">😕</td><td style="text-align:center"><code>:hushed:</code></td><td style="text-align:center">😯</td></tr><tr><td style="text-align:center"><code>:expressionless:</code></td><td style="text-align:center">😑</td><td style="text-align:center"><code>:unamused:</code></td><td style="text-align:center">😒</td></tr><tr><td style="text-align:center"><code>:sweat_smile:</code></td><td style="text-align:center">😅</td><td style="text-align:center"><code>:sweat:</code></td><td style="text-align:center">😓</td></tr></tbody></table><h2 id="字体"><a class="header-anchor" href="#字体">¶</a>字体</h2><table><thead><tr><th style="text-align:center">输入</th><th style="text-align:center">说明</th><th style="text-align:center">实例</th><th style="text-align:center">输入</th><th style="text-align:center">说明</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center"><code>$\rm{D}$</code></td><td style="text-align:center">罗马体</td><td style="text-align:center">$\rm{D}$</td><td style="text-align:center"><code>$\cal{D}$</code></td><td style="text-align:center">花体</td><td style="text-align:center">$\cal{D}$</td></tr><tr><td style="text-align:center"><code>$\it{D}$</code></td><td style="text-align:center">意大利体</td><td style="text-align:center">$\it{D}$</td><td style="text-align:center"><code>$\Bbb{D}$</code></td><td style="text-align:center">黑板粗体</td><td style="text-align:center">$\Bbb{D}$</td></tr><tr><td style="text-align:center"><code>$\bf{D}$</code></td><td style="text-align:center">粗体</td><td style="text-align:center">$\bf{D}$</td><td style="text-align:center"><code>$\mit{D}$</code></td><td style="text-align:center">数学斜体</td><td style="text-align:center">$\mit{D}$</td></tr><tr><td style="text-align:center"><code>$\sf{D}$</code></td><td style="text-align:center">等线体</td><td style="text-align:center">$\sf{D}$</td><td style="text-align:center"><code>$\scr{D}$</code></td><td style="text-align:center">手写体</td><td style="text-align:center">$\scr{D}$</td></tr><tr><td style="text-align:center"><code>$\tt{D}$</code></td><td style="text-align:center">打字机体</td><td style="text-align:center">$\tt{D}$</td><td style="text-align:center"><code>$\boldsymbol{D}$</code></td><td style="text-align:center">黑体</td><td style="text-align:center">$\boldsymbol{D}$</td></tr></tbody></table><h2 id="颜色"><a class="header-anchor" href="#颜色">¶</a>颜色</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">命令</th><th style="text-align:center">显示</th></tr></thead><tbody><tr><td style="text-align:center"><code>$\color{red}{红色}$</code></td><td style="text-align:center"><code>&lt;font color=#FF0000&gt;红色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#FF0000">红色</font></td></tr><tr><td style="text-align:center"><code>$\color{green}{绿色}$</code></td><td style="text-align:center"><code>&lt;font color=#00FF00&gt;绿色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#00FF00">绿色</font></td></tr><tr><td style="text-align:center"><code>$\color{blue}{蓝色}$</code></td><td style="text-align:center"><code>&lt;font color=#0000FF&gt;蓝色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#0000FF">蓝色</font></td></tr><tr><td style="text-align:center"><code>$\color{cyan}{青色}$</code></td><td style="text-align:center"><code>&lt;font color=#00FFFF&gt;青色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#00FFFF">青色</font></td></tr><tr><td style="text-align:center"><code>$\color{yellow}{黄色}$</code></td><td style="text-align:center"><code>&lt;font color=#FFFF00&gt;黄色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#FFFF00">黄色</font></td></tr><tr><td style="text-align:center"><code>$\color{purple}{紫色}$</code></td><td style="text-align:center"><code>&lt;font color=#FF00FF&gt;紫色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#FF00FF">紫色</font></td></tr><tr><td style="text-align:center"><code>$\color{orange}{橙色}$</code></td><td style="text-align:center"><code>&lt;font color=#FF6100&gt;橙色&lt;/font&gt;</code></td><td style="text-align:center"><font color="#FF6100">橙色</font></td></tr></tbody></table><h2 id="标题"><a class="header-anchor" href="#标题">¶</a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h2 id="字体-v2"><a class="header-anchor" href="#字体-v2">¶</a>字体</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗文字**</span> 对应 <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>加粗文字<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span> 及 <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>加粗文字<span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="emphasis">*倾斜文字*</span> 对应 <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>倾斜文字<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 及 <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>倾斜文字<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="strong">***斜体加粗文字**</span>* </span><br><span class="line">~~加删除线文字~~ 对应 <span class="xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>加删除线文字<span class="xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2><p>多个&gt;用于逐层嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br><span class="line">&gt;&gt;引用内容</span><br></pre></td></tr></table></figure><h2 id="分割线"><a class="header-anchor" href="#分割线">¶</a>分割线</h2><p>三个或者三个以上的 - 或者 *,效果一样</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure><h2 id="图片或链接"><a class="header-anchor" href="#图片或链接">¶</a>图片或链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片说明</span>](<span class="link">图片地址 ''title''</span>)</span><br><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "title"</span>)</span><br><span class="line">title可加可不加</span><br><span class="line">如:</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span></span>百度<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">![<span class="string">风景</span>](<span class="link">https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span>)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a><br><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="风景"></p><h2 id="列表"><a class="header-anchor" href="#列表">¶</a>列表</h2><ul><li>无序列表使用*或+或-标识</li><li>有序列表使用数字加.标识，例如：1.</li></ul><h2 id="表格"><a class="header-anchor" href="#表格">¶</a>表格</h2><p>短斜杠(数量至少有一个)左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:-:|:-:|:-:</span><br><span class="line">1|2|3</span><br><span class="line">4|5|6</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">条目一</th><th style="text-align:center">条目二</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td></tr></tbody></table><h2 id="pandoc-版-markdown-与标准版的区别"><a class="header-anchor" href="#pandoc-版-markdown-与标准版的区别">¶</a>$pandoc$版$markdown$与标准版的区别</h2><p>标准Markdown语法并不要求在标题前添加一个空行，但是Pandoc语法却要求标题前添加一个空行（除了文档开头）</p><h1>Html</h1><p><a href="https://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">学习的地方</a></p><h2 id="基本文档"><a class="header-anchor" href="#基本文档">¶</a>基本文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;文档标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">可见文本...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">    &lt;p&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;br&gt; （换行）</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="基本元素"><a class="header-anchor" href="#基本元素">¶</a>基本元素</h2><p><b>粗体文<b>粗体文本</b><br><code class="language-cpp"><br>int exgcd(int x, int y, int &amp;a, int &amp;b) {<br>if (y == 0) {<br>return a = 1, b = 0, x;<br>} else {<br>int g = exgcd(y, x % y, b, a);<br>b -= x / y * a;<br>return g;<br>}<br>}</code><br><br><em>强调文本</em><br><br><i>斜体文本</i><br><br><kbd>键盘输入</kbd><br></b></p><pre>预格式化文本</pre><br><p><small>更小的文本</small><br><br><strong>重要的文本</strong><br><br><abbr>缩写</abbr><br></p><address>联系信息</address><bdo>文字方向</bdo><blockquote>从另一个源引用的部分</blockquote><cite>工作的名称</cite> <del>删除的文本</del> <ins>插入的文本</ins><sub>下标文本</sub><sup>上标文本</sup>本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;粗体文本&lt;/b&gt;</span><br><span class="line">&lt;code class=&quot;language-cpp&quot;&gt;</span><br><span class="line">int exgcd(int x, int y, int &amp;a, int &amp;b) &#123;</span><br><span class="line">    if (y == 0) &#123;</span><br><span class="line">        return a = 1, b = 0, x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        int g = exgcd(y, x % y, b, a);</span><br><span class="line">        b -= x / y * a;</span><br><span class="line">        return g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&lt;/code&gt;</span><br><span class="line">&lt;em&gt;强调文本&lt;/em&gt;</span><br><span class="line">&lt;i&gt;斜体文本&lt;/i&gt;</span><br><span class="line">&lt;kbd&gt;键盘输入&lt;/kbd&gt; </span><br><span class="line">&lt;pre&gt;预格式化文本&lt;/pre&gt;</span><br><span class="line">&lt;small&gt;更小的文本&lt;/small&gt;</span><br><span class="line">&lt;strong&gt;重要的文本&lt;/strong&gt;</span><br><span class="line">&lt;abbr&gt;缩写&lt;/abbr&gt;&lt;br&gt;</span><br><span class="line">&lt;address&gt;联系信息&lt;/address&gt;</span><br><span class="line">&lt;bdo&gt;文字方向&lt;/bdo&gt;</span><br><span class="line">&lt;blockquote&gt;从另一个源引用的部分&lt;/blockquote&gt;</span><br><span class="line">&lt;cite&gt;工作的名称&lt;/cite&gt; </span><br><span class="line">&lt;del&gt;删除的文本&lt;/del&gt; </span><br><span class="line">&lt;ins&gt;插入的文本&lt;/ins&gt;</span><br><span class="line">&lt;sub&gt;下标文本&lt;/sub&gt;</span><br><span class="line">&lt;sup&gt;上标文本&lt;/sup&gt;本&lt;/b&gt;</span><br></pre></td></tr></table></figure><h2 id="列表与表格"><a class="header-anchor" href="#列表与表格">¶</a>列表与表格</h2><ul>    <li>Coffee</li><li>Milk</li></ul><ol>    <li>Cola</li><li>sara</li></ol><dl><!--定义列表-->    <dt>Coffee</dt><!--自定义列表项目--><dd>- Black hot drink</dd><!--自定义列表项目-->    <dt>Milk</dt><dd>- White cold drink</dd></dl><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Cola<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>sara<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="comment">&lt;!--定义列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="comment">&lt;!--自定义列表项目--&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>- Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="comment">&lt;!--自定义列表项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>- White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片"><a class="header-anchor" href="#图片">¶</a>图片</h2><p>普通的链接：<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><p>图像链接： <a href="http://www.example.com/" target="_blank" rel="noopener"><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="替换文本"></a></p><p>邮件链接： <a href="2247389338@qq.com">发送e-mail</a><br>书签：<br><a id="tips">提示部分</a><br><a href="#tips">跳到提示部分</a></p><h4 id="框架"><a class="header-anchor" href="#框架">¶</a>框架</h4><iframe src="https://blog.csdn.net/AbelYang1" width="400" height="300"></iframe><script>    document.write("Hello World!")</script><p><noscript>抱歉，你的浏览器不支持 JavaScript!</noscript></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是一篇测试博文&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pandoc教程&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;$LaTex$&lt;/h1&gt;
&lt;p&gt;下面教程摘自MITOPENCOURSEWARE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;u&gt;LaTeX Tutorial&lt;/u&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://detexify.kirelabs.org/classify.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;u&gt;Draw a symbol to get its LaTeX command&lt;/u&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;u&gt;LaTeX Symbols&lt;/u&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他" scheme="https://2inf.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="小知识" scheme="https://2inf.top/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
