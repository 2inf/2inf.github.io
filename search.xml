<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线段树学习</title>
      <link href="/Algorithm/Learing%20Segment%20Tree/"/>
      <url>/Algorithm/Learing%20Segment%20Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="基础">基础</h1><h2 id="概念">概念</h2><p>  线段树(<a href="https://en.wikipedia.org/wiki/Segment_tree" target="_blank" rel="noopener">Segment tree</a>)是基于分治的二叉树，用于在区间上进行信息统计。线段树每个节点都代表一个区间，每个叶节点代表长度为1的区间，每个内部节点<span class="math inline">\([l,r]\)</span>，左子节点<span class="math inline">\([l,mid]\)</span>，右子节点<span class="math inline">\([mid+1,r]\)</span>，其中<span class="math inline">\(mid=\lfloor\frac{l+r}{2}\rfloor\)</span>。</p><p>  除去树的最后一层，整棵线段树一定是一颗完全二叉树，树的深度为<span class="math inline">\(O(\log{N})\)</span>。我们将根节点编号为<span class="math inline">\(1\)</span>，编号为<span class="math inline">\(x\)</span>的节点左子节点为<span class="math inline">\(x*2\)</span>，右子节点编号为<span class="math inline">\(x*2+1\)</span>。<span class="math inline">\(N\)</span>个叶节点的满二叉树有<span class="math inline">\(1+2+\cdots+\frac{N}{2}+N=2N-1\)</span>个节点，而最后一层有空余，故保存线段树数组长度不小于<span class="math inline">\(4N\)</span>。</p><p>  以区间最大值为例</p><ul><li>建树</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> dat;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[p].l = l, t[p].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123; t[p].dat = a[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    t[p].dat = max(t[p&lt;&lt;<span class="number">1</span>].dat, t[p&lt;&lt;<span class="number">1</span> | <span class="number">1</span>].dat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单点修改</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[p].l == t[p].r) &#123; t[p].dat = v; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) update(p&lt;&lt;<span class="number">1</span>, x, v);</span><br><span class="line">    <span class="keyword">else</span> update(p&lt;&lt;<span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">    t[p].dat = max(t[p&lt;&lt;<span class="number">1</span>].dat, t[p&lt;&lt;<span class="number">1</span> | <span class="number">1</span>].dat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>区间查询</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) <span class="keyword">return</span> t[p].dat;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = max(ans, query(p&lt;&lt;<span class="number">1</span>, l, r);)</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans = max(ans, query(p&lt;&lt;<span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P3372" target="_blank" rel="noopener">P3372 线段树1</a></p><p><a href="https://paste.ubuntu.com/p/dp6XmZdkqs/" target="_blank" rel="noopener">代码</a></p><p><a href="https://www.luogu.com.cn/problem/P3373" target="_blank" rel="noopener">P3373 线段树2</a></p><p><a href="https://paste.ubuntu.com/p/nYWWrvcqws/" target="_blank" rel="noopener">代码</a></p><h2 id="经典应用">经典应用</h2><h3 id="区间最值">区间最值</h3>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跳舞链</title>
      <link href="/Algorithm/Dancing%20Links/"/>
      <url>/Algorithm/Dancing%20Links/</url>
      
        <content type="html"><![CDATA[<h1 id="精确覆盖问题exact-cover">精确覆盖问题<a href="https://en.wikipedia.org/wiki/Exact_cover" target="_blank" rel="noopener">(Exact Cover)</a></h1><p>  定义:给定一个<span class="math inline">\(R\times C\)</span>的<span class="math inline">\(0,1\)</span>矩阵，问是否存在一个行集合，使得集合每一列<strong>恰好</strong>有一个<span class="math inline">\(1\)</span>。</p><p><img src="/Algorithm/Dancing%20Links/fig1.jpg"></p><ul><li>穷举法</li></ul><p>  每一行都有选与不选两种状态，枚举行的时间复杂度为<span class="math inline">\(O(2^R)\)</span>，每次选行时需要遍历之前已选行的所有列以检查是否有冲突，检查需要的时间复杂度为<span class="math inline">\(O(RC)\)</span>，因此总的复杂度为<span class="math inline">\(O(RC\times 2^R)\)</span>。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N][N], v[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> state = <span class="number">1</span>; state &lt; <span class="number">1</span> &lt;&lt; n; ++state) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (flag &amp;&amp; ((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[j]) &#123; flag = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> v[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (!v[i]) flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!flag) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>状态压缩</li></ul><p>  把每一行看作一个<span class="math inline">\(C\)</span>位二进制数，问题转化为在<span class="math inline">\(R\)</span>个<span class="math inline">\(C\)</span>位二进制数中, 选择数使得 (1)任意两个数的与为0；(2)所有数的或为<span class="math inline">\(2^C-1\)</span>；令<span class="math inline">\(tmp\)</span>表示当前所有被选择了的<span class="math inline">\(C\)</span>位二进制数的或。时间复杂度<span class="math inline">\(O(R\times 2^R)\)</span></p><p><img src="/Algorithm/Dancing%20Links/fig2.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N][N], num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        num[i] = num[i] &lt;&lt; <span class="number">1</span> | a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> state = <span class="number">1</span>; state &lt; <span class="number">1</span> &lt;&lt; n; ++state) &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp &amp; num[i]) <span class="keyword">break</span>;</span><br><span class="line">        tmp |= num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp == (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dancing-linksalgorithm-x">Dancing Links(<a href="https://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X" target="_blank" rel="noopener">Algorithm X</a>)</h1><p>红色的框代表选中的行，蓝色的框代表删除的列，绿色的框代表删除的行</p><p><img src="/Algorithm/Dancing%20Links/fig3.jpg"></p><p><a href="https://www.youtube.com/watch?v=R9gRLnddOBg" target="_blank" rel="noopener">Dancing Links(2000)</a></p><p><a href="https://www.youtube.com/watch?v=_cR9zDlvP88" target="_blank" rel="noopener">Dancing Links(2018)</a></p><p>  算法大师Donald Knuth提出了“X算法”，Dancing Links翻译成舞蹈链，并不是算法本身，而是一种链式的数据结构，利用<strong>十字链表</strong>缓存和回溯矩阵，不需要额外开辟空间。</p><p><a href="https://www.luogu.com.cn/problem/P4929" target="_blank" rel="noopener">【模板】舞蹈链（DLX）</a></p><p>这里给出我个人的板子 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> l[maxnode], r[maxnode], u[maxnode], d[maxnode], row[maxnode], col[maxnode];</span><br><span class="line"><span class="keyword">int</span> h[maxn], s[maxm];</span><br><span class="line"><span class="keyword">int</span> ansd, ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _m)</span> </span>&#123;</span><br><span class="line">n = _n, m = _m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>;</span><br><span class="line">r[i] = i + <span class="number">1</span>;</span><br><span class="line">u[i] = d[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">r[m] = <span class="number">0</span>; l[<span class="number">0</span>] = m;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">cnt = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">s[C]++;</span><br><span class="line">row[cnt] = R, col[cnt] = C;</span><br><span class="line">u[cnt] = C;</span><br><span class="line">d[cnt] = d[C];</span><br><span class="line">u[d[C]] = cnt;</span><br><span class="line">d[C] = cnt;</span><br><span class="line"><span class="keyword">if</span> (h[R] == <span class="number">-1</span>) h[R] = l[cnt] = r[cnt] = cnt;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">r[cnt] = h[R];</span><br><span class="line">l[cnt] = l[h[R]];</span><br><span class="line">r[l[h[R]]] = cnt;</span><br><span class="line">l[h[R]] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">cnt++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">l[r[C]] = l[C], r[l[C]] = r[C];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[C]; i != C; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j]) &#123;</span><br><span class="line">u[d[j]] = u[j];</span><br><span class="line">d[u[j]] = d[j];</span><br><span class="line">s[col[j]]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[C]; i != C; i = u[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j]) &#123;</span><br><span class="line">u[d[j]] = j;</span><br><span class="line">d[u[j]] = j;</span><br><span class="line">s[col[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">l[r[C]] = r[l[C]] = C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deep; ++i) str[(ans[i] - <span class="number">1</span>) / <span class="number">9</span>] = <span class="string">'1'</span> + (ans[i] - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i != <span class="number">0</span>; i = r[i]) <span class="keyword">if</span> (s[i] &lt; s[c]) c = i;</span><br><span class="line">remove(c);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[c]; i != c; i = d[i]) &#123;</span><br><span class="line">ans[deep] = row[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j]) remove(col[j]);</span><br><span class="line"><span class="keyword">if</span> (dance(deep + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j]) resume(col[j]);</span><br><span class="line">&#125;</span><br><span class="line">resume(c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dlx;</span><br></pre></td></tr></table></figure></p><h1 id="精确覆盖的应用">精确覆盖的应用</h1><p>  求解实际问题时，应考虑行与列的意义，即行表示<strong>决策</strong>，列表示<strong>状态</strong>。</p><h2 id="n皇后问题">N皇后问题</h2><p><a href="https://vjudge.net/problem/SPOJ-NQUEEN" target="_blank" rel="noopener">SPOJ 1771</a></p><p>在一个N×N的棋盘上放置N个皇后(N &lt;= 50)，使得任何两个皇后之间不相互攻击（即同一行、同一列、同一对角线不能有大于1个皇后）。求一种摆放方案。</p><p>  每个皇后能放置的位置共有<span class="math inline">\(N^2\)</span>种，即有<span class="math inline">\(N^2\)</span>行。列有<span class="math inline">\(4\)</span>种约束条件：</p><ol type="1"><li><span class="math inline">\([1,N]\)</span>表示棋盘N行的占据情况</li><li><span class="math inline">\([N+1,2N]\)</span>表示棋盘N列的占据情况</li><li><span class="math inline">\([2N+1,4N-1]\)</span>表示棋盘2N-1条主对角线的占据情况</li><li><span class="math inline">\([4N,6N-2]\)</span>表示棋盘2N-1条副对角线的占据情况</li></ol><p>故共有<span class="math inline">\(6N-2\)</span>列。</p><p><img src="/Algorithm/Dancing%20Links/queen.jpg"></p><p>  对于<span class="math inline">\((i,j)\)</span>的位置，占据的行为<span class="math inline">\(i\)</span>；占据的列为<span class="math inline">\(j\)</span>；主对角线可以通过<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>的相对情况来判断，所有<span class="math inline">\(i-j\)</span>相同的占据的主对角线为<span class="math inline">\(N+i-j\)</span>；副对角线类似，所有<span class="math inline">\(i+j\)</span>相同的位置占据的副对角线为<span class="math inline">\(i+j-1\)</span>；</p><p>  然而，N皇后问题不能直接求精确覆盖，这是因为行和列必须完全覆盖到，但是主和副对角线没有要求一定要全部覆盖，所以算法走到N步停止, 每次消除代表着行或者列的那些列的1, 而不是优先考虑对角线。</p><p><a href="https://paste.ubuntu.com/p/NHwtvcKpqn/" target="_blank" rel="noopener">代码</a></p><h2 id="数独问题">数独问题</h2><ol type="1"><li><a href="http://poj.org/problem?id=3074" target="_blank" rel="noopener">POJ3074 Sudoku</a></li></ol><ul><li><span class="math inline">\(DFS\)</span></li></ul><p>  现实生活中，我们玩数独的策略是先填能唯一确定的位置，然后从选项少的位置突破。从而有我们的搜索策略：在每个状态下，从所有未填位置里选择能填合法数字最少的位置，考虑该位置填什么数，作为搜索的分支。考虑以下优化：(1)每行、列、宫用一个9位二进制数保存，当一个位置填上数后，将对应行、列、宫变为0更新状态，回溯时改为1；(2)对每个位置，将所在行、列、宫的数进行与运算得到还能填哪些数，并用<span class="math inline">\(lowbit\)</span>取出；</p><p><a href="https://paste.ubuntu.com/p/q2wK48rR2w/" target="_blank" rel="noopener">代码</a></p><ul><li><span class="math inline">\(DLX\)</span></li></ul><p>  每一个决策可由三元组<span class="math inline">\((r,c,w)\)</span>表示，这是因为每个宫可由<span class="math inline">\((r,c)\)</span>确定，故共有<span class="math inline">\(9*9*9\)</span>行。其次，每个决策有四个影响(1)<span class="math inline">\((r,c)\)</span>填了一个数字；(2)第<span class="math inline">\(r\)</span>行用了一个<span class="math inline">\(w\)</span>；(3)第<span class="math inline">\(c\)</span>列用了一个<span class="math inline">\(w\)</span>；(4)第<span class="math inline">\(a\)</span>宫用了一个<span class="math inline">\(w\)</span>。共<span class="math inline">\(9*9*4\)</span>列。</p><ol type="1"><li><span class="math inline">\([1, 81]\)</span>列，分别对应了81个格子是否被放置了数字。</li><li><span class="math inline">\([82, 2*81]\)</span>列，分别对应了9行，每行[1, 9]个数字的放置情况。</li><li><span class="math inline">\([2*81+1, 3*81]\)</span>列，分别对应了9列，每列[1, 9]个数字的放置情况。</li><li><span class="math inline">\([3*81+1, 4*81]\)</span>列，分别对应了9个“宫”，每“宫”[1, 9]个数字的放置情况。</li></ol><p><a href="https://paste.ubuntu.com/p/KN4zkt26F7/" target="_blank" rel="noopener">代码</a></p><ol start="2" type="1"><li><a href="https://www.luogu.com.cn/problem/P1074" target="_blank" rel="noopener">noip2009-靶形数独</a></li></ol><p>  与上题类似，只需添加一个权值数组，并更新答案，此时将<code>bool dance(int deep)</code>中改为<code>void</code>型，否则会返回搜到的第一组解而无法更新答案。</p><p><a href="https://paste.ubuntu.com/p/Hsn5DWdvzZ/" target="_blank" rel="noopener">代码</a></p><h1 id="重复覆盖">重复覆盖</h1><p>  定义:给定一个<span class="math inline">\(R\times C\)</span>的<span class="math inline">\(0,1\)</span>矩阵，问是否存在一个行集合，使得集合每一列<strong>至少</strong>有一个<span class="math inline">\(1\)</span>。</p><p>  精确覆盖是重复覆盖的特殊情况，参照精确覆盖的算法构建跳舞链，对行进行枚举，不同的是，我们仅删除该行上有“1”的列，但不再删除列对应的行。为了满足搜索的行数最小，我们引入<b>迭代加深(IDA*)</b>。</p><ul><li><p>迭代加深：枚举一个最大深度，然后对问题进行搜索，搜索过程记录当前深度，如果当前深度大于最大深度则无条件返回。</p></li><li><p>启发式函数：设计一个估价函数<span class="math inline">\(f(\ )\)</span>，函数返回的是至少还需要多少行才能完成重复覆盖。实际值 &gt; 估计值<span class="math inline">\(f(\ )&gt;K\)</span></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> l[mx], r[mx], u[mx], d[mx], row[mx], col[mx];</span><br><span class="line"><span class="keyword">int</span> h[maxn], s[maxm];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _m)</span> </span>&#123;</span><br><span class="line">n = _n, m = _m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">l[i] = i - <span class="number">1</span>;</span><br><span class="line">r[i] = i + <span class="number">1</span>;</span><br><span class="line">u[i] = d[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">l[<span class="number">0</span>] = m, r[m] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">cnt = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">s[C]++;</span><br><span class="line">row[cnt] = cnt, col[cnt] = C;</span><br><span class="line">u[cnt] = C;</span><br><span class="line">d[cnt] = d[C];</span><br><span class="line">u[d[C]] = cnt;</span><br><span class="line">d[C] = cnt;</span><br><span class="line"><span class="keyword">if</span> (h[R] == <span class="number">-1</span>) h[R] = l[cnt] = r[cnt] = cnt;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">l[cnt] = l[h[R]];</span><br><span class="line">r[cnt] = h[R];</span><br><span class="line">r[l[h[R]]] = cnt;</span><br><span class="line">l[h[R]] = cnt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[C]; i != C; i = d[i])</span><br><span class="line">l[r[i]] = l[i], r[l[i]] = r[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u[C]; i != C; i = u[i])</span><br><span class="line">l[r[i]] = r[l[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> v[maxm];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = r[<span class="number">0</span>]; c != <span class="number">0</span>; c = r[c]) v[c] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = r[<span class="number">0</span>]; c != <span class="number">0</span>; c = r[c])</span><br><span class="line"><span class="keyword">if</span> (v[c]) &#123;</span><br><span class="line">ret++;</span><br><span class="line">v[c] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[c]; i != c; i = d[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j])</span><br><span class="line">v[col[j]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (deep + f() &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (!r[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (deep &lt; ans) ans = deep;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r[<span class="number">0</span>]; i != <span class="number">0</span>; i = r[i]) <span class="keyword">if</span> (s[i] &lt; s[c]) c = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d[c]; i != c; i = d[i]) &#123;</span><br><span class="line">remove(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = r[i]; j != i; j = r[j]) remove(j);</span><br><span class="line">dance(deep + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j != i; j = l[j]) resume(j);</span><br><span class="line">resume(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dlx;</span><br></pre></td></tr></table></figure><h1 id="重复覆盖的应用">重复覆盖的应用</h1><p><a href="http://acm.fzu.edu.cn/problem.php?pid=1686" target="_blank" rel="noopener">fzu1686-神龙的难题</a></p><p>  每一个1看成列，每个位置作为左上角的矩阵看成行</p><p><a href="https://paste.ubuntu.com/p/fWByWbrTf7/" target="_blank" rel="noopener">代码</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2295" target="_blank" rel="noopener">hdu2295-Radar</a></p><p>  扫描半径越大，雷达覆盖城市越容易，我们可以二分枚举半径R，然后根据这个半径来建立雷达和城市之间的关系矩阵<span class="math inline">\(A\)</span>。<span class="math inline">\(A[i][j]=1\)</span>当且仅当第i个雷达到第j个城市的距离小于等于R，问题z转化为看能不能选择K行（每行代表每个雷达）满足每行上的列都至少有一个“1”（每个列代表每个城市）。</p><p><a href="https://paste.ubuntu.com/p/Kdkg3vwCXT/" target="_blank" rel="noopener">代码</a></p><p><font size="6"><strong>参考资料</strong></font></p><p><a href="DLX.pdf">Donald E. Knuth的原稿</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Catalan数的原理与应用</title>
      <link href="/Math/Theory%20and%20application%20of%20Catalan%20Number/"/>
      <url>/Math/Theory%20and%20application%20of%20Catalan%20Number/</url>
      
        <content type="html"><![CDATA[<hr><p>由于<span class="math inline">\(C_2=C_3=1\)</span></p><p>设<span class="math inline">\(G(x)=C_2+C_3x+C_4x^2+\cdots\)</span> <span class="math display">\[x^2:C_4=C_2C_3+C_3C_2\\x^3:C_5=C_2C_4+C_3C_3+C_4C_2\\x^4:C_6=C_2C_5+C_3C_4+C_4C_3+C_5C_2\\\vdots\]</span> <span class="math display">\[\begin{array}{l}G(x)-x-1&amp;=&amp;C_2(C_3x^2+C_4x^3+\cdots)\\&amp;&amp;+C_3x(C_2x+C_3x^2+\cdots)\\&amp;&amp;+C_4x^2(C_2x+C_3x^2+\cdots)+\cdots\\&amp;=&amp;-x+C_2(C_2x+C_3x^2+\cdots)\\&amp;&amp;+C_3x(C_2x+C_3x^2+\cdots)+\cdots\end{array}\]</span></p><a id="more"></a><p><span class="math display">\[\Longrightarrow\quad\quad \begin{array}{l}G(x)-1&amp;=&amp;(C_2+C_3x+C_4x^2+\cdots)(C_2x+C_3x^2+\cdots)\\&amp;=&amp;x[G(x)]2\end{array}\]</span></p><p><span class="math display">\[xG^2(x)-G(x)+1=0\\G(x)=\frac{1-\sqrt{1-4x}}{2x}\]</span></p><p>  而<span class="math inline">\(\displaystyle(1-4x)^{\frac{1}{2}}=1+\frac{1}{2}(-4x)-\frac{\displaystyle\frac{1}{2}(\frac{1}{2}-1)}{2!}(-4x)^2+\frac{\displaystyle\frac{1}{2}(\frac{1}{2}-1)(\frac{1}{2}-2)}{3!}(-4x)^3+\cdots\)</span></p><p>所以<span class="math inline">\((1-4x)^{\frac{1}{2}}\)</span>中<span class="math inline">\(x^{n+1}\)</span>项的系数为 <span class="math display">\[\begin{array}{l}&amp;&amp;\displaystyle\frac{1}{(n+1)!}\frac{1}{2}\left(\frac{1}{2}-1\right)\left(\frac{1}{2}-2\right)\cdots\left(\frac{1}{2}-n\right)(-4)^{n+1}\\&amp;=&amp;\displaystyle\frac{(-1)^{2n+1}}{(n+1)!}\frac{1\cdot3\cdot\cdots\cdot(2n-1)}{2^{n+1}}2^{2n+2}\\&amp;=&amp;\displaystyle\frac{-2}{n+1}\frac{(2n)!}{(n!)^2}=\frac{-2}{n+1}\begin{pmatrix}2n\\n\end{pmatrix}\end{array}\]</span></p><p>故<span class="math inline">\(\displaystyle G(x)=\frac{1-\sqrt{1-4x}}{2x}\)</span>且 <span class="math display">\[C_{n+1}=\frac{1}{n}\begin{pmatrix}2n-2\\n-1\end{pmatrix}\]</span></p><hr><p>由递推关系 <span class="math display">\[nC_{n+1}=(4n-6)C_n\]</span> <span class="math display">\[G(x)=C_2x+C_3x^2+C_4x^3+\cdots\\x:2C_3=4\cdot2C_2-6C_2\\x^2:3C_4=4\cdot3C_3-6C_3\\\vdots\]</span> <span class="math display">\[G&#39;(x)-1=4[xG(x)]&#39;-6G(x)\]</span> <span class="math display">\[G(x)=C\sqrt{1-4x}+\frac{1}{2}\]</span> 由<span class="math inline">\(G(0)=0,\)</span>有<span class="math inline">\(\displaystyle C=-\frac{1}{2},\)</span>即<span class="math inline">\(\displaystyle G(x)=\frac{1-\sqrt{1-4x}}{2}\)</span></p><hr><ol type="1"><li><span class="math inline">\(C_{n+1}=C_2C_n+C_3C_{n-1}+\cdots+C_{n-1}C_3+C_nC_2\)</span></li><li><span class="math inline">\((n-3)C_n=\frac{n}{2}(C_3C_{n-1}+C_4C_{n-2}+\cdots+C_{n-1}C_3)\)</span></li></ol><p>待填坑</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些字符串算法小结</title>
      <link href="/Algorithm/summary%20of%20string%20algorithm/"/>
      <url>/Algorithm/summary%20of%20string%20algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="manacher算法"><span class="math inline">\(Manacher\)</span>算法</h2><p>  <del>众所周知</del>, <span class="math inline">\(Manacher\)</span>算法是一个求字符串中最长回文子序列问题的算法, 可以想到一个比较显然的做法: 长度为奇数的回文串以最中间字符的位置为对称轴, 而长度为偶数的回文串的对称轴在中间两个字符之间的空隙处. 于是我们考虑遍历这些对称轴, 并且同时向左右扩展, 直到左右两边的字符不同或到达边界.</p><p>  这个算法的复杂度是<span class="math inline">\(O(n^2)\)</span>, 是无法过一些较大数据范围的题, 我们来思考一下这个算法的缺点, 显然, 回文串长度的奇偶性造成了对称轴的位置可能在某字符上, 也可能在两个字符之间的空隙处，要对两种情况分别处理. 为了解决这个问题, 可以强行在原字符串中插入其他本字符串不会出现的字符, 如<code>"#"</code>.</p><a id="more"></a><p>  对于整个算法的主体, 定义<span class="math inline">\(p[i]\)</span>表示以字符<span class="math inline">\(i\)</span>为回文中心的最长回文串的半径, 那么<span class="math inline">\(p[i]-1\)</span>就是字符串中最长回文串的长度(除去<code>'#'</code>), 定义<span class="math inline">\(maxr\)</span>为目前找到回文串的最右端, 中心为<span class="math inline">\(id\)</span>, 当我们扫描到的位置<span class="math inline">\(i\)</span>, 若<span class="math inline">\(id\leq i\leq maxr\)</span>, 可以找到对称点<span class="math inline">\(2*id-i\)</span>求出其最长半径, 那么<span class="math inline">\(p[i] = \min(p[2*id-i], maxr-i)\)</span></p><p><a href="https://www.luogu.org/problem/P3805" target="_blank" rel="noopener">[模板]<span class="math inline">\(Manacher\)</span>算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans, p[N];</span><br><span class="line"><span class="keyword">char</span> s[N], str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    str[<span class="number">0</span>] = str[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        str[(i&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>] = s[i];</span><br><span class="line">        str[(i&lt;&lt;<span class="number">1</span>)+<span class="number">3</span>] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = (n&lt;&lt;<span class="number">1</span>) + <span class="number">2</span>; str[n] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; str[i] != <span class="number">0</span>; ++i) str[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxr &gt; i) p[i] = min(p[<span class="number">2</span>*id-i], maxr - i);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; str[i+p[i]] == str[i-p[i]]; ++p[i]);</span><br><span class="line">        <span class="keyword">if</span> (p[i] + i &gt; maxr) &#123; maxr = p[i] + i; id = i; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    init();</span><br><span class="line">    manacher();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans = max(ans, p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kmp算法"><span class="math inline">\(KMP\)</span>算法</h2><p>  <span class="math inline">\(KMP\)</span>算法, 又名模式匹配算法, 能在线性时间内判定字符串<span class="math inline">\(B[1\sim m]\)</span>是否为字符串<span class="math inline">\(A[1\sim n]\)</span>的字串, 并求出字符串<span class="math inline">\(B\)</span>在字符串<span class="math inline">\(A\)</span>中各次出现的位置.</p><p>  容易想到一个<span class="math inline">\(O(nm)\)</span>的朴素算法, 暴力枚举字符串<span class="math inline">\(B\)</span>中每个位置<span class="math inline">\(i\)</span>, 逐一比较<span class="math inline">\(B[1]\)</span>与<span class="math inline">\(A[i]\)</span>, <span class="math inline">\(B[2]\)</span>与<span class="math inline">\(A[i+1]\cdots\)</span>是否相等. 而<span class="math inline">\(KMP\)</span>算法在匹配前会预处理模式串<span class="math inline">\(B\)</span>, 具体步骤如下:</p><ol type="1"><li>对字符串<span class="math inline">\(B\)</span>进行自我匹配, 求出数组<span class="math inline">\(next\)</span>, 其中<span class="math inline">\(next[i]\)</span>表示"<span class="math inline">\(B\)</span>中以i结尾的非前缀子串"与"<span class="math inline">\(B\)</span>的前缀"能够匹配的最大长度. 即:<span class="math inline">\(next[i]=\max\{j\},\)</span> 其中<span class="math inline">\(j&lt;i\)</span>并且<span class="math inline">\(B[i-j+1\sim i]=B[1\sim j]\)</span>, 若不存在这样的<span class="math inline">\(j\)</span>， 则<span class="math inline">\(next[i]=0\)</span></li><li>对字符串<span class="math inline">\(B\)</span>与<span class="math inline">\(A\)</span>进行匹配, 求出一个数组<span class="math inline">\(f\)</span>, 其中<span class="math inline">\(f[i]\)</span>表示"<span class="math inline">\(A\)</span>中以<span class="math inline">\(i\)</span>结尾的字串"与"<span class="math inline">\(B\)</span>的前缀"能够匹配的最长长度. 即:<span class="math inline">\(f[i]=\max\{j\}\)</span>, 其中<span class="math inline">\(j\leq i\)</span>并且<span class="math inline">\(A[i-j+1\sim i]=B[1\sim j]\)</span></li></ol><p>  如果我们采用朴素算法计算<span class="math inline">\(next\)</span>数组, 即枚举<span class="math inline">\(j\in[1,i-1]\)</span>, 并检查<span class="math inline">\(A[i-j+1\sim i]\)</span>与<span class="math inline">\(A[1\sim j]\)</span>是否相等. 时间复杂度不会低于<span class="math inline">\(O(n^2)\)</span>, 为了更快求解<span class="math inline">\(next\)</span>, 有以下引理.</p><p><strong>引理</strong>   若<span class="math inline">\(j_0\)</span>是<span class="math inline">\(next[i]\)</span>的一个"候选项", 即<span class="math inline">\(j_0&lt;i\)</span>且<span class="math inline">\(A[i-j_0+1\sim i]=A[1\sim j_0]\)</span>, 则小于<span class="math inline">\(j_0\)</span>的最大的<span class="math inline">\(next[i]\)</span>的"候选项"是<span class="math inline">\(next[j_0]\)</span>. 也即<span class="math inline">\(next[j_0]+1\sim j_0-1\)</span>之间的数都不是<span class="math inline">\(next[i]\)</span>的候选项</p><p><a href="https://www.luogu.org/problem/P3375" target="_blank" rel="noopener">[模板]<span class="math inline">\(KMP\)</span>算法</a> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> n, m, Next[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; b[i] != b[j+<span class="number">1</span>]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line">        Next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, b + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), m = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    calc();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[i] != b[j+<span class="number">1</span>]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - m + <span class="number">1</span>); j = Next[j];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, Next[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="trie字典树"><span class="math inline">\(Trie\)</span>(字典树)</h2><p>  <span class="math inline">\(Trie\)</span>是一种用于实现字符串快速检索的多叉树结构, 其基本操作如下:</p><ol type="1"><li>若<span class="math inline">\(P\)</span>的<span class="math inline">\(c\)</span>字符指针指向一个已经存在的节点<span class="math inline">\(Q\)</span>, 则令<span class="math inline">\(P=Q\)</span></li><li>若<span class="math inline">\(P\)</span>的<span class="math inline">\(c\)</span>字符指针指向空, 则新建一个节点<span class="math inline">\(Q\)</span>, 令<span class="math inline">\(P\)</span>的<span class="math inline">\(c\)</span>字符指针指向<span class="math inline">\(Q\)</span>, 然后令<span class="math inline">\(P=Q\)</span></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> trie[N][<span class="number">26</span>], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> ch = str[k] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!trie[p][ch]) trie[p][ch] = ++tot;</span><br><span class="line">        p = trie[p][ch];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        p = trie[p][str[k]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!p) <span class="keyword">return</span> ans;</span><br><span class="line">        ans += ed[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ac自动机"><span class="math inline">\(AC\)</span>自动机</h2><p>  很多聚聚都说<span class="math inline">\(AC\)</span>自动机就是在<span class="math inline">\(trie\)</span>树上进行<span class="math inline">\(KMP\)</span></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数学基础</title>
      <link href="/Math/The%20basis%20of%20combinatorics/"/>
      <url>/Math/The%20basis%20of%20combinatorics/</url>
      
        <content type="html"><![CDATA[<h1 id="组合数binomial-coefficient">组合数(<a href="https://en.wikipedia.org/wiki/Binomial_coefficient" target="_blank" rel="noopener">Binomial coefficient</a>)</h1><h2 id="性质">性质</h2><p>  首先我们回顾一下一些简单性质</p><ol type="1"><li><span class="math inline">\(\begin{pmatrix}n\\k\end{pmatrix}=\displaystyle\frac{n!}{k!(n-k)!}\)</span></li><li><span class="math inline">\(\begin{pmatrix}n\\k\end{pmatrix}=\displaystyle\frac{n}{k}\begin{pmatrix}n-1\\k-1\end{pmatrix}\)</span></li><li><span class="math inline">\(\begin{pmatrix}n\\k\end{pmatrix}=\begin{pmatrix}n-1\\k\end{pmatrix}+\begin{pmatrix}n-1\\k-1\end{pmatrix}\)</span></li><li><span class="math inline">\(\begin{pmatrix}n\\m\end{pmatrix}\begin{pmatrix}m\\k\end{pmatrix}=\begin{pmatrix}n\\k\end{pmatrix}\begin{pmatrix}n-k\\m-k\end{pmatrix}\)</span></li><li><span class="math inline">\(\displaystyle\sum_{m=0}^n\begin{pmatrix}m\\k\end{pmatrix}=\begin{pmatrix}n+1\\k+1\end{pmatrix}\)</span></li><li><span class="math inline">\(\displaystyle\sum_{k=0}^nk\begin{pmatrix}n\\k\end{pmatrix}=n2^{n-1},\quad\sum_{k=0}^nk^2\begin{pmatrix}n\\k\end{pmatrix}=n(n+1)2^{n-2}\)</span></li></ol><a id="more"></a><h2 id="组合数的计算">组合数的计算</h2><h3 id="利用性质3">利用性质3</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    C[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= i; ++j) C[i][j] = C[i<span class="number">-1</span>][j<span class="number">-1</span>] + C[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预处理阶乘和阶乘逆元">预处理阶乘和阶乘逆元</h3><h4 id="费马小定理fermats-little-theorem">费马小定理(<a href="https://en.wikipedia.org/wiki/Fermat%27s_little_theorem" target="_blank" rel="noopener">Fermat's little theorem</a>)</h4><p>  <span class="math inline">\(p\)</span>为质数，且<span class="math inline">\(p\nmid a\)</span>，则</p><p><span class="math display">\[a^{p-1}\equiv1\pmod p\]</span></p><p><span class="math display">\[inv(a)\equiv a^{p-2}\pmod p\]</span></p><p><span class="math display">\[\begin{pmatrix}n\\m\end{pmatrix}=fac(n)*inv(m!)*inv((n-m)!)\]</span></p><p><span class="math display">\[inv(i!)\equiv inv((i+1)!)*(i+1)\pmod p\]</span> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * power(fac[m], p - <span class="number">2</span>) % p * power(fac[n-m], p - <span class="number">2</span>) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 求解<span class="math inline">\(C_n^m mod\ p\)</span>，该法要求p为质数</p><h3 id="lucas定理lucass-theorem">Lucas定理(<a href="https://en.wikipedia.org/wiki/Lucas%27s_theorem" target="_blank" rel="noopener">Lucas's theorem</a>)</h3><p><span class="math display">\[\begin{pmatrix}n\\m\end{pmatrix}\equiv\begin{pmatrix}\lfloor n/p\rfloor\\\lfloor m/p\rfloor\end{pmatrix}\begin{pmatrix}n\mod p\\m\mod p\end{pmatrix}\pmod p\qquad (p为素数)\]</span></p><p><span class="math inline">\(proof:\quad\)</span>设<span class="math inline">\(n=sp+q,m=tp+r\ (q,r\leq p)\)</span>,那么 <span class="math display">\[\begin{array}{l}(1+x)^n&amp;=&amp;\left((1+x)^p\right)^s(1+x)^q\\&amp;\equiv&amp;(1+x^p)^s(1+x)^q\pmod p\\&amp;=&amp;\displaystyle\sum_{i=0}^s\begin{pmatrix}s\\i\end{pmatrix}x^{ip}\sum_{j=0}^q\begin{pmatrix}q\\j\end{pmatrix}x^j\\\end{array}\]</span></p><p>可以得到</p><p><span class="math display">\[(1+x)^{sp+q}\equiv\sum_{i=0}^s\begin{pmatrix}s\\i\end{pmatrix}x^{ip}\sum_{j=0}^q\begin{pmatrix}q\\j\end{pmatrix}x^j\pmod p\]</span></p><p><span class="math inline">\(LHS\)</span>中<span class="math inline">\((1+x)^{sp+q}\)</span>中的<span class="math inline">\(x^{tp+r}\)</span>系数为<span class="math inline">\(\begin{pmatrix}sp+q\\tp+r\end{pmatrix}\)</span>, <span class="math inline">\(RHS\)</span>中的<span class="math inline">\(x^{tp+r}\)</span>系数为<span class="math inline">\(\begin{pmatrix}s\\t\end{pmatrix}\begin{pmatrix}q\\r\end{pmatrix}\)</span>, 从而</p><p><span class="math display">\[\begin{pmatrix}sp+q\\tp+r\end{pmatrix}\equiv\begin{pmatrix}s\\t\end{pmatrix}\begin{pmatrix}q\\r\end{pmatrix}\pmod p\]</span></p><p>这与原命题等价, 证毕.</p><p><a href="https://www.luogu.org/problem/P3807" target="_blank" rel="noopener">Lucas定理模板题</a></p><p><a href="https://paste.ubuntu.com/p/WS4v7wh9dH/" target="_blank" rel="noopener">code</a></p><h3 id="lucas定理crt合并">Lucas定理+CRT合并</h3><h4 id="crt合并">CRT合并</h4><p>  对同余方程</p><p><span class="math display">\[\begin{cases}x\equiv{a_1}\pmod{p_1}\\x\equiv{a_2}\pmod{p_2}\end{cases}\]</span></p><p>令<span class="math inline">\(x=mp_1+a_1,\)</span>代入方程2得</p><p><span class="math display">\[mp_1\equiv{a_2-a_1}\pmod{p_2}\]</span></p><p>即</p><p><span class="math display">\[mp_1-np_2=a_2-a_1\]</span></p><p>由贝祖定理(<a href="https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity" target="_blank" rel="noopener">Bezout's identity</a>)，若<span class="math inline">\(m\)</span>有解<span class="math inline">\(m_0\)</span>(即<span class="math inline">\(\gcd(p_1,p_2)|a_2-a_1,m_0\)</span>可用exgcd求)，则<span class="math inline">\(m\)</span>满足通项</p><p><span class="math display">\[m=m_0+k\frac{p_2}{\gcd(p_1,p_2)}\quad k\in\Bbb{Z}\]</span></p><p>代入<span class="math inline">\(x\)</span>表达式有</p><p><span class="math display">\[x=m_0p_1+k{\rm{lcm}}(p_1,p_2)+a_1\]</span></p><p>故</p><p><span class="math display">\[x\equiv m_0p_1+a_1\pmod{ {\rm lcm}(p_1,p_2) }\]</span></p><h4 id="孙子定理chinese-remainder-theorem">孙子定理(<a href="https://en.wikipedia.org/wiki/Chinese_remainder_theorem" target="_blank" rel="noopener">Chinese remainder theorem</a>)</h4><p>  对同余方程组，其中<span class="math inline">\(p_i\)</span>两两互质</p><p><span class="math display">\[\begin{cases}x\equiv{a_1}\pmod{p_1}\\x\equiv{a_2}\pmod{p_2}\\\quad\vdots\\x\equiv{a_n}\pmod{p_n}\end{cases}\]</span></p><p>设<span class="math inline">\(\displaystyle P=\prod_{i=1}^np_i,\ P_i=\frac{P}{p_i}\)</span>，则方程组有通解</p><p><span class="math display">\[x\equiv\sum_{i=1}^na_iP_i{\rm inv}(P_i)\pmod{P}\]</span></p><p><a href="https://www.luogu.com.cn/problem/P2480" target="_blank" rel="noopener">P2840</a></p><h3 id="勒让德定理legendres-formula-或者叫扩展lucas">勒让德定理(<a href="https://en.wikipedia.org/wiki/Legendre%27s_formula" target="_blank" rel="noopener">Legendre's formula</a>) (或者叫扩展Lucas)</h3><p>  考虑计算</p><p><span class="math display">\[\begin{pmatrix}n\\m\end{pmatrix}\mod{p}\]</span></p><p>对<span class="math inline">\(p\)</span>进行唯一分解<span class="math inline">\(p=\prod p_i^{c_i}\)</span></p><p>  我们想知道<span class="math inline">\(n!\)</span>分解里<span class="math inline">\(p_i\)</span>的最高指数，设<span class="math inline">\(f(n)\)</span>表示<span class="math inline">\(n!\)</span>分解里<span class="math inline">\(p\)</span>的最高指数，我们这样考虑：先将<span class="math inline">\(p\)</span>的倍数(<span class="math inline">\(\lfloor\frac{n}{p}\rfloor\)</span>个)全部除以<span class="math inline">\(p\)</span>，再考虑除<span class="math inline">\(p\)</span>后的子问题，有递推</p><p><span class="math display">\[f(n)=f(\lfloor\frac{n}{p}\rfloor)+\lfloor\frac{n}{p}\rfloor\]</span></p><p>  勒让德定理：在正数<span class="math inline">\(n!\)</span>的素因子标准分解式中，素数<span class="math inline">\(p\)</span>的最高指数为 <span class="math display">\[v_p(n!)=\displaystyle\sum_{i=1}^\infty\lfloor\frac{n}{p^i}\rfloor\]</span></p><h2 id="一些应用">一些应用</h2><blockquote><p>给定<span class="math inline">\(n,m\)</span>输出<span class="math inline">\(C_n^m\)</span>的后十位。其中<span class="math inline">\(0&lt;m\le n\le 30000\)</span>，输出时不足十位数也按十位输出，此时高位补0。<br><b>input</b>：29999 27381<br><b>output</b>：4531330240</p></blockquote><p>  将分子分母进行分解并进行约分，数组<span class="math inline">\(c\)</span>记录重数</p><p><a href="https://paste.ubuntu.com/p/fhXvk2wHz5/" target="_blank" rel="noopener">code</a></p><h1 id="生成函数generating-function">生成函数(<a href="https://en.wikipedia.org/wiki/Generating_function" target="_blank" rel="noopener">Generating function</a>)</h1><p>  对于有限数列<span class="math inline">\(a_0,a_1,a_2,\cdots,a_n,\)</span>多项式<span class="math inline">\(f(z)=\displaystyle\sum_{k=0}^na_kz^k\)</span>称为数列<span class="math inline">\(\{a_k\}\)</span>的生成函数。无穷数列相关定义类似。</p><h2 id="技巧">技巧</h2><ul><li>乘积</li></ul><p><span class="math display">\[f(z)g(z)=\sum_{i&gt;=0}a_iz^i\sum_{j&gt;=0}b_jz^j\\=(a_0b_0)+(a_0b_1+a_1b_0)z+(a_0b_2+a_1b_1+a_2b_0)z^2\]</span></p><p><span class="math inline">\(f(z)g(z)\)</span>是<span class="math inline">\(\{c_n\}\)</span>的生成函数，其中</p><p><span class="math display">\[c_n=\sum_{k=0}^na_kb_{n-k}\]</span></p><p>其中一个特例是</p><p><span class="math display">\[\frac{1}{1-z}f(z)=a_0+(a_0+a_1)z+(a_0+a_1+a_2)z^2+\cdots\]</span></p><p>三个函数乘积的生成函数遵循</p><p><span class="math display">\[d_n=\sum_{\begin{array}{c}i,j,k&gt;0\\i+j+k=n\end{array} }a_ib_jc_k\]</span></p><p>一般地，任意函数乘积遵循</p><p><span class="math display">\[\prod_{j\geq0}\sum_{i\geq0}a_{ij}z^i=\sum_{n\geq0}\left(z^n\sum_{\begin{array}{c}i_0,i_1,\cdots\geq0\\i_0+i_1+\cdots=n\end{array} }a_{0i_0}a_{ai_1}\cdots\right)\]</span></p><p>$$$$</p><ul><li>变换</li></ul><p><span class="math display">\[\frac{1}{2}(f(z)+f(-z))=\sum_{n\geq0}a_{2n}z^{2n}\]</span> <span class="math display">\[\frac{1}{2}(f(z)-f(-z))=\sum_{n\geq0}a_{2n+1}z^{2n+1}\]</span></p><p>利用复数根<span class="math inline">\(w=e^{\frac{2\pi i}{m} }=\cos{\frac{2\pi}{m} }+i\sin{\frac{2\pi}{m} }\)</span>，我们可以扩展得到</p><p><span class="math display">\[\sum_{n\geq0,n\bmod m=r}a_nz^n=\frac{1}{m}\sum_{0\leq k&lt;m}w^{-kr}f(w^kz)\]</span></p><p>例如<span class="math inline">\(m=3\)</span>，<span class="math inline">\(w=-\frac{1}{2}+\frac{\sqrt{3}}{2}i\)</span>，有</p><p><span class="math display">\[a_1z+a_4z^4+a_7z^7+\cdots=\frac{1}{3}(f(z)+w^{-1}f(wz)+w^{-2}f(w^2z))\]</span></p><h2 id="生成函数举例">生成函数举例</h2><p><span class="math display">\[(1+z)^n=\sum_{k\geq0}\begin{pmatrix}n\\k\end{pmatrix}z^k\]</span></p><p><span class="math display">\[\frac{1}{(1-z)^{n+1} }=\sum_{k\geq0}\begin{pmatrix}n+k\\n\end{pmatrix}z^k\]</span></p><p><span class="math display">\[e^z=\sum_{k\geq0}\frac{1}{k!}z^k\]</span></p><p><span class="math display">\[\ln{(1+z)}=z-\frac{1}{2}z^2+\cdots=\sum_{k\geq1}\frac{(-1)^{k+1} }{k}z^k\]</span></p><p><span class="math display">\[\frac{z}{e^z-1}=1-\frac{1}{2}z+\frac{1}{12}z^2+\cdots=\sum_{k\geq0}\frac{B_k}{k!}z^k\]</span></p><p>其中<span class="math inline">\(B_k\)</span>为<a href="https://en.wikipedia.org/wiki/Bernoulli_number" target="_blank" rel="noopener">伯努利数</a>，以下函数涉及到<a href="https://en.wikipedia.org/wiki/Stirling_number" target="_blank" rel="noopener">斯特林数</a></p><p><span class="math display">\[(e^z-1)^n=z^n+\frac{1}{n+1}\begin{Bmatrix}n+1\\n\end{Bmatrix}z^{n+1}+\cdots=n!\sum_{k}\begin{Bmatrix}k\\n\end{Bmatrix}\frac{z^k}{k!}\]</span></p><p><span class="math display">\[\left(\ln\frac{1}{1-z}\right)^n=z^n+\frac{1}{n+1}\begin{bmatrix}n+1\\n\end{bmatrix}z^{n+1}+\cdots=n!\sum_{k}\begin{bmatrix}k\\n\end{bmatrix}\frac{z^k}{k!}\]</span></p><p><span class="math display">\[z(z+1)\cdots(z+n-1)=\sum_{k}\begin{bmatrix}n\\k\end{bmatrix}z^k\]</span></p><p><span class="math display">\[\frac{z^n}{(1-z)(1-2z)\cdots(1-nz)}=\begin{Bmatrix}k\\n\end{Bmatrix}z^k\]</span></p><h2 id="证明组合恒等式">证明组合恒等式</h2><p><span class="math display">\[(1)\sum_{k=1}^nC_n^kC_n^{n+1-k}=C_{2n}^{n+1}\]</span></p><details><p><summary>proof</summary></p><p><span class="math inline">\(\displaystyle\left(\sum_{i=0}^nC_n^iz^i\right)\left(\sum_{j=0}^nC_n^jz^j\right)=(1+z)^{2n}=\sum_{k=0}^{2n}C_{2n}^kz^k\)</span>, 两边<span class="math inline">\(z^{n+1}\)</span>系数相等。</p></details><p><span class="math display">\[(2)\sum_{k=0}^{[\frac{n}{2}]}(-1)^kC_{n+1}^kC_{2n-2k}^n=n+1\]</span></p><details><p><summary>proof</summary></p><p><span class="math display">\[\displaystyle\sum_{k=0}^{n+1}C_{n+1}^kz^k=(1+z)^{n+1}\\=\frac{(1-z^2)^{n+1}}{(1-z)^{n+1}}=\left(\sum_{k=0}^{n+1}(-1)^kC_{n+1}^kz^{2k}\right)\left(\sum_{j=0}^\infty C_{n+j}^nz^j\right),\]</span></p><p>右边<span class="math inline">\(z^n\)</span>系数<span class="math inline">\(=\displaystyle\sum_{k=0}^{[\frac{n}{2}]}(-1)^kC_{n+1}^kC_{n+(n-2k)}^n=\sum_{k=0}^{[\frac{n}{2}]}(-1)^kC_{n+1}^kC_{2n-2k}^n=\)</span>左边<span class="math inline">\(z^n\)</span>系数<span class="math inline">\(=n+1\)</span></p></details><p><span class="math display">\[(3)\sum_{k=p}^n(-1)^kC_n^kC_k^p=(-1)^n\delta_{pn},\text{其中}\delta_{ij}=\begin{cases}1\quad ,i=j\\0\quad ,i\neq j\end{cases}\]</span></p><details><p><summary>proof</summary></p><p><span class="math display">\[\displaystyle\because k\geq p\text{时}(1+z)^k=\sum_{i=0}^kC_k^iz^i\text{中}z^p\text{系数}C_k^p,0\leq k &lt; p\text{时}(1+z)^k\text{中}z^p\text{系数}0\]</span> <span class="math inline">\(\displaystyle\therefore\sum_{k=0}^n(-1)^kC_n^k(1+z)^k中z^p系数为\sum_{k=p}^n(-1)^kC_n^kC_k^p\)</span>并且<span class="math inline">\(\displaystyle\sum_{k=0}^n(-1)^kC_n^k(1+z)^k=[1-(1+z)]^n=(-1)^nz^n\)</span>中<span class="math inline">\(z^p\)</span>系数为<span class="math inline">\((-1)\delta_{pn}\)</span>,即证。</p></details><h2 id="实际应用">实际应用</h2><blockquote><p>将一张<span class="math inline">\(n\)</span>元的纸币全部兑换为1元和2元的纸币，问有多少种不同的兑换方法?</p></blockquote><p>  所求方法数为下列多项式中<span class="math inline">\(z^n\)</span>的系数<span class="math inline">\(a_n\)</span> <span class="math display">\[f(z)=\sum_{n=0}^\infty a_nz^n=\left(\sum_{i=0}^\infty z^i\right)\left(\sum_{j=0}^\infty z^{2j}\right)\\=\left(\frac{1}{1-z}\right)\left(\frac{1}{1-z^2}\right)=\frac{1}{4(1+z)}+\frac{1}{2(1-z^2)}+\frac{1}{4(1-z)}\\=\sum_{n=0}^\infty\left(\frac{n+1}{2}+\frac{1+(-1)^n}{4}\right)z^n\]</span> 故所求方法数为<span class="math inline">\(\displaystyle a_n=\frac{n+1}{2}+\frac{1+(-1)^n}{4}=\left[\frac{n+2}{2}\right]\)</span></p><blockquote><p>求<span class="math inline">\(n\)</span>位十进制数中出现偶数个5的数的个数。</p></blockquote><p>  设<span class="math inline">\(a_n\)</span>表示<span class="math inline">\(n\)</span>位十进制数中出现偶数个5的个数，<span class="math inline">\(b_n\)</span>表示<span class="math inline">\(n\)</span>位十进制数中出现奇数个的个数，则：</p><p><span class="math display">\[\begin{cases}a_n=9a_{n-1}+b_{n-1}\\b_n=9b_{n-1}+a_{n-1}\\a_1=8,\ b_1=1\end{cases}\]</span></p><p>设<span class="math inline">\(\{a_n\}\)</span>，<span class="math inline">\(\{b_n\}\)</span>生成函数分别为<span class="math inline">\(f(z)\)</span>，<span class="math inline">\(g(z)\)</span>则</p><p><span class="math display">\[(1-9z)f(z)-zg(z)=a_1=8\]</span> <span class="math display">\[(1-9z)g(z)-zf(z)=b_1=1\]</span></p><p>解得</p><p><span class="math display">\[f(z)=\frac{1}{2}\left(\frac{7}{1-8z}+\frac{9}{1-10z}\right)=\frac{1}{2}\left(\sum_{n=0}^\infty7*(8z)^n+\sum_{n=0}^\infty9*(10z)^n\right)\]</span></p><p>所以 <span class="math display">\[a_n=\frac{7*8^{n-1}+9*10^{n-1}}{2}\]</span></p><p><a href="https://www.luogu.com.cn/problem/P2563" target="_blank" rel="noopener">P2563</a>质数分解问题</p><p>构造生成函数</p><p><span class="math display">\[G(z)=\sum_{k=0}^{\infty}z^{2k}*\sum_{k=0}^{\infty}z^{3k}\sum_{k=0}^{\infty}z^{5k}*\cdots\]</span></p><p>则<span class="math inline">\(z^n\)</span>的系数为所求方案数。</p><p><a href="https://paste.ubuntu.com/p/5VgZ7tsgVX/" target="_blank" rel="noopener">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈几个特殊函数</title>
      <link href="/Math/Talk%20about%20a%20few%20special%20functions/"/>
      <url>/Math/Talk%20about%20a%20few%20special%20functions/</url>
      
        <content type="html"><![CDATA[<h1 id="gamma函数"><span class="math inline">\(\Gamma函数\)</span></h1><p>  在数学中，<span class="math inline">\(\Gamma\)</span>函数，是<strong>阶乘函数</strong>在实数与复数域上的扩展。</p><p>  <span class="math inline">\(\Gamma\)</span>函数可通过第二类<span class="math inline">\(Euler\)</span>积分定义:</p><p><span class="math display">\[\Gamma(z)=\int_0^{\infty}t^{z-1}e^{-t}\mathrm{d}t\]</span></p><p><img src="/Math/Talk%20about%20a%20few%20special%20functions/gamma1.jpg"></p><h2 id="简单性质">简单性质</h2><ol type="1"><li><span class="math inline">\(\displaystyle\Gamma(z+1)=\int_0^{\infty}t^{z}e^{-t}\mathrm{d}t=t^z(-e^{-t})|_0^\infty+z\int_0^\infty t^{z-1}e^{-t}\mathrm{d}t=z\Gamma(z)\ (z&gt;0)\)</span></li></ol><p>  从而<span class="math inline">\(\Gamma(z)=(z-1)!\)</span></p><ol start="2" type="1"><li><p><span class="math inline">\(\Gamma(z)=2\displaystyle\int_0^{+\infty}t^{2z-1}e^{-t^2}\mathrm{d}t\)</span></p></li><li><p><span class="math inline">\(\Gamma(z)\)</span>在<span class="math inline">\((0,+\infty)\)</span>上为严格下凸函数, 它及其任意阶导数都连续, 且 <span class="math display">\[\Gamma^{(n)}(z)=\int_0^{+\infty}t^{z-1}(\ln t)^ne^{-t}\mathrm{d}t\]</span></p></li></ol><p><strong>命题[Bohr-Mollerup定理]</strong> 如果<span class="math inline">\(f:(0,\infty)\to(0,\infty)\)</span>，且满足： 1. <span class="math inline">\(f(z)&gt;0,f(1)=1\)</span> 2. <span class="math inline">\(f(z+1)=zf(z)\)</span> 3. <span class="math inline">\(\ln{f(z)}\)</span>是凸函数</p><p>则<span class="math inline">\(f(z)\equiv \Gamma(z),z\in(0,\infty)\)</span></p><h2 id="欧拉无穷乘积公式">欧拉无穷乘积公式</h2><p>  我们考察被积函数<span class="math inline">\(f(t)=t^{z-1}e^{-t}\)</span>，设函数序列<span class="math inline">\(f_n(t):[0,+\infty)\rightarrow\Bbb{C}\)</span>,且<span class="math inline">\(\displaystyle f_n(t)=\begin{cases}t^{z-1}(1-\frac{t}{n})^n\quad ,t\in[0,n]\\0\quad,\text{其他}\end{cases}\)</span>，显然<span class="math inline">\(\displaystyle\lim_{n\to\infty}f_n(t)=f(t)\)</span>，且<span class="math inline">\(|Re[f_n(t)]|\leq t^{Re(z)-1}e^{-t}, |Im[f_n(t)]|\leq t^{Im(z)-1}e^{-t}\)</span>，由<strong>控制收敛定理</strong>得</p><p><span class="math display">\[\lim_{n\to\infty}\int_0^{\infty}f_n(t)\mathrm{d}t=\int_0^{\infty}f(t)\mathrm{d}t\]</span></p><p>又因为<span class="math inline">\(\displaystyle f_n(t)\equiv0\forall t\notin[0,n],\therefore \int_0^{\infty}f_n(t)\mathrm{d}t=\int_0^{n}f_n(t)\mathrm{d}t\)</span>,，所以</p><p><span class="math display">\[\lim_{n\to\infty}\int_0^{n}f_n(t)\mathrm{d}t=\int_0^{\infty}f(t)\mathrm{d}t\]</span></p><p>定义<span class="math inline">\(\displaystyle P_n(z)=\int_0^{n}t^{z-1}\left(1-\frac{t}{n}\right)^n\mathrm{d}t\)</span>，我们由以上结论可得</p><p><span class="math display">\[\lim_{n\to\infty}P_n(z)=\Gamma(z)\]</span></p><p>  当然我们也可以按如下方式证明：</p><p><span class="math display">\[\Gamma(z)-P_n(z)=\int_0^n[e^{-t}-(1-\frac{t}{n})]t^{z-1}\mathrm{d}t+\int_n^{\infty}e^{-t}t^{z-1}\mathrm{d}t\]</span></p><p>易知<span class="math inline">\(RHS\)</span>第二项极限<span class="math inline">\(n\to\infty\)</span>为0，对第一项，我们由以下引理</p><p><span class="math display">\[0\leq e^{-t}-\left(1-\frac{t}{n}\right)^n\leq \frac{t^2}{n}e^{-t}\]</span></p><p>得</p><p><span class="math display">\[\left|\int_0^n[e^{-t}-(1-\frac{t}{n})]t^{z-1}\mathrm{d}t\right|\leq\int_0^n\frac{1}{n}e^{-t}t^{x+1}\mathrm{d}t&lt;\frac{1}{n}\int_0^{\infty}e^{-t}t^{x+1}\mathrm{d}t\rightarrow0\]</span></p><p>其中<span class="math inline">\(x=Re(z)\)</span>，这样就证明了<span class="math inline">\(\displaystyle\lim_{n\to\infty}P_n(z)=\Gamma(z)\)</span></p><p>  下面证明引理，<span class="math inline">\(0&lt;y&lt;1\)</span>时有<span class="math inline">\(1+y\leq e^y\leq(1-y)^{-1}\)</span>，令<span class="math inline">\(t=\frac{t}{n}\)</span>得</p><p><span class="math display">\[\left(1+\frac{t}{n}\right)^{-n}\geq e^{-t}\geq\left(1-\frac{t}{n}\right)^n\]</span></p><p>故</p><p><span class="math display">\[0\leq e^{-t}-\left(1-\frac{t}{n}\right)^n=e^{-t}\left[1-e^t\left(1-\frac{t}{n}\right)^n\right]\leq e^{-t}\left[1-\left(1-\frac{t^2}{n^2}\right)^n\right]\]</span></p><p>又由伯努利不等式<span class="math inline">\(0\leq\alpha\leq1\)</span>有<span class="math inline">\((1-n\alpha)^n\geq1-n\alpha\)</span>得</p><p><span class="math display">\[1-\left(1-\frac{t^2}{n^2}\right)^n\leq\frac{t^2}{n}\]</span></p><p>即证</p><p>在<span class="math inline">\(P_n(z)\)</span>中令<span class="math inline">\(t=nx\)</span>得</p><p><span class="math display">\[\int_0^{n}t^{z-1}\left(1-\frac{t}{n}\right)^n\mathrm{d}t=n^z\int_0^1x^{z-1}(1-x)^n\mathrm{d}x=n^zI_{n,z}\]</span></p><p>分部积分得</p><p><span class="math display">\[\begin{array}{l}I_{n,z}&amp;=&amp;\displaystyle\int_0^1(1-x)^n\mathrm{d}\left(\frac{x^z}{z}\right)\\&amp;=&amp;\displaystyle\frac{x^z(1-x)^n}{z}|+\frac{n}{z}\int_0^1x^z(1-x)^{n-1}\mathrm{d}x\\&amp;=&amp;\displaystyle\frac{n}{z}I_{n-1,z+1}\end{array}\]</span></p><p>而</p><p><span class="math display">\[I_{0,z+n}=\int_0^1x^{z+n-1}\mathrm{d}x=\frac{1}{z+n}\]</span></p><p>从而</p><p><span class="math display">\[I_{n,z}=\frac{n!}{z(z+1)\cdots(z+n)}\]</span></p><p>得到<span class="math inline">\(\Gamma\)</span>函数另一个定义: <strong><span class="math inline">\(Gauss\)</span>无穷乘积</strong>分解</p><p><span class="math display">\[\Gamma(z)=\lim_{n\to\infty}\frac{n!n^z}{z(z+1)\cdots(z+n)}\]</span></p><p>由于<span class="math inline">\(\displaystyle\lim_{n\to\infty}\frac{n}{z+n}=1\)</span>，又可以写成</p><p><span class="math display">\[\Gamma(z)=\lim_{n\to\infty}\frac{(n-1)!n^z}{z(z+1)\cdots(z+n-1)}\]</span></p><p>这就是著名的<span class="math inline">\(Euler-Gauss\)</span>公式</p><p>又因为<span class="math inline">\(\displaystyle n^z=\prod_{k=1}^{n-1}\left(1+\frac{1}{k}\right)\)</span>, 极限可以改写成</p><p><span class="math display">\[\Gamma(z)=\lim_{n\to\infty}\frac{1}{z}\prod_{k=1}^n\left(1+\frac{z}{k}\right)^{-1}\left(1+\frac{1}{k}\right)^z\]</span></p><p>我们得到<span class="math inline">\(\Gamma\)</span>函数的欧拉乘积形式</p><p><span class="math display">\[\Gamma(z)=\frac{1}{z}\prod_{k=1}^\infty\frac{\left(1+\frac{1}{k}\right)^z}{1+\frac{z}{k}}\]</span></p><h2 id="weierstrass无穷乘积"><span class="math inline">\(Weierstrass\)</span>无穷乘积</h2><p>  由于<span class="math inline">\(\Gamma\)</span>函数恒不为<span class="math inline">\(0\)</span>，有</p><p><span class="math display">\[\begin{array}{l}\displaystyle\frac{1}{\Gamma(z)}&amp;=&amp;\displaystyle\lim_{n\to\infty}\frac{z(z+1)\cdots(z+n)}{n!n^z}\\&amp;=&amp;\displaystyle\lim_{n\to\infty}zn^{-z}\prod_{k=1}^n\left(1+\frac{z}{k}\right)\\&amp;=&amp;\displaystyle\lim_{n\to\infty}ze^{-z\ln n}\prod_{k=1}^n\left(1+\frac{z}{k}\right)\\&amp;=&amp;\displaystyle\lim_{n\to\infty}ze^{-z(\ln n-H_n)}e^{-zH_n}\prod_{k=1}^n\left(1+\frac{z}{k}\right)\\&amp;=&amp;\displaystyle\lim_{n\to\infty}ze^{z(H_n-\ln n)}\prod_{k=1}^n\left(1+\frac{z}{k}\right)e^{-\frac{z}{k}}\\&amp;=&amp;\displaystyle ze^{z\lim\limits_{n\to\infty}(H_n-\ln n)}\prod_{k=1}^n\left(1+\frac{z}{k}\right)e^{-\frac{z}{k}}\\&amp;=&amp;\displaystyle ze^{\gamma z}\prod_{k=1}^n\left(1+\frac{z}{k}\right)e^{-\frac{z}{k}}\end{array}\]</span></p><p>上式即为<span class="math inline">\(\Gamma\)</span>函数的<span class="math inline">\(Weierstrass\)</span>定义，其中<span class="math inline">\(\displaystyle H_n=\sum_{k=1}^n\frac{1}{k}\)</span>，欧拉常数<span class="math inline">\(\displaystyle\gamma=\lim_{n\to\infty}(H_n-\ln n)=0.577215\cdots\)</span></p><h2 id="与三角函数的关系">与三角函数的关系</h2><p>  由欧拉无穷乘积公式</p><p><span class="math display">\[\Gamma(z)\Gamma(-z)=-\frac{1}{z^2}\prod_{k=1}^\infty\left(1-\frac{z^2}{n^2}\right)^{-1}\]</span></p><p>由正弦函数无穷乘积公式</p><p><span class="math display">\[\frac{\sin z}{z}=\prod_{k=1}^\infty\left(1-\frac{z^2}{\pi^2k^2}\right)\]</span></p><p>得</p><p><span class="math display">\[\Gamma(z)\Gamma(-z)=-\frac{\pi}{z\sin{\pi z}}\]</span></p><p>由<span class="math inline">\(\Gamma(1-z)=-z\Gamma(-z)\)</span>得</p><p><span class="math display">\[\Gamma(z)\Gamma(1-z)=\frac{\pi}{\sin{\pi z}}\]</span></p><p>为余元公式，写成对称形式得</p><p><span class="math display">\[\Gamma(1+z)\Gamma(1-z)=z!*(-z)!=\frac{\pi z}{\sin{\pi z}}\]</span></p><p>在正弦函数无穷乘积公式中令<span class="math inline">\(\displaystyle z=\frac{\pi}{2}\)</span>得<span class="math inline">\(Wallis\)</span>乘积</p><p><span class="math display">\[\frac{\pi}{2}=\prod_{k=1}^\infty\frac{(2k)^2}{(2k-1)(2k+1)}=\lim_{n\to\infty}\left(\prod_{k=1}^n\frac{2k}{2k-1}\right)^2\frac{1}{2n+1}\]</span></p><h2 id="欧拉乘积公式">欧拉乘积公式</h2><p>  我们应用余元公式证明</p><p><span class="math display">\[\Gamma(z)\Gamma\left(z+\frac{1}{m}\right)\Gamma\left(z+\frac{2}{m}\right)\cdots\Gamma\left(z+\frac{m-1}{m}\right)=(2\pi)^{\frac{m-1}{2}}m^{\frac{1}{2}-mz}\Gamma(mz)\]</span></p><p>令</p><p><span class="math display">\[C =\frac{m^{mz}}{m\Gamma(mz)}\prod_{k=0}^{m-1}\Gamma\left(z+\frac{k}{m}\right)\]</span></p><p>由<span class="math inline">\(Euler-Gauss\)</span>公式</p><p><span class="math display">\[\begin{array}{l}C&amp;=&amp;\displaystyle m^{mz-1}\lim_{n\to\infty}\frac{\prod\limits_{k=0}^{m-1}\frac{(n-1)!}{(z+\frac{k}{m})(z+\frac{k}{m}+1)\cdots(z+\frac{k}{m}+n-1)}n^{z+\frac{k}{m}}}{\frac{(mn-1)!}{mz(mz+1)\cdots(mz+mn-1)}(mn)^{mz}}\\&amp;=&amp;\displaystyle m^{mz-1}\lim_{n\to\infty}\frac{[(n-1)!]^mn^{mz+\frac{1}{2}(m-1)}m^{(n+1)m}}{(mn-1)!(mn)^{mz}}\\&amp;=&amp;\displaystyle\lim_{n\to\infty}\frac{[(n-1)!]^mn^{\frac{1}{2}(m-1)}m^{nm-1}}{(mn-1)!}\end{array}\]</span></p><p>从而<span class="math inline">\(C\)</span>与<span class="math inline">\(z\)</span>无关，令<span class="math inline">\(z=\frac{1}{n}\)</span>得</p><p><span class="math display">\[C=\prod_{k=0}^{m-1}\Gamma\left(\frac{k+1}{m}\right)=\prod_{k=1}^{m-1}\Gamma\left(\frac{k}{m}\right)=\prod_{k=1}^{m-1}\Gamma\left(1-\frac{k}{m}\right)\]</span></p><p>由余元公式得</p><p><span class="math display">\[C^2=\prod_{k=1}^{m-1}[\Gamma\left(\frac{k}{m}\right)\Gamma\left(1-\frac{k}{m}\right)]=\pi^{m-1}\prod_{k=1}^{m-1}\left(\sin \frac{k\pi}{m}\right)^{-1}\]</span></p><p>由于<span class="math inline">\(z^m-1=0\)</span>的根为<span class="math inline">\(z=e^{\frac{2k\pi i}{m}},k=0,1,\cdots,m-1\)</span></p><p><span class="math display">\[\frac{z^m-1}{z-1}=\sum_{k=0}^{m-1}z^k=\prod_{k=1}^{m-1}\left(z-e^{\frac{2k\pi i}{m}}\right)\]</span></p><p>令<span class="math inline">\(z=1\)</span>得</p><p><span class="math display">\[\begin{array}{l}m&amp;=&amp;\displaystyle\prod_{k=1}^{m-1}\left(1-e^{\frac{2k\pi i}{m}}\right)\\&amp;=&amp;\displaystyle\prod_{k=1}^{m-1}e^{\frac{k\pi i}{m}}\left(-2i\sin{\frac{k\pi}{m}}\right)\\&amp;=&amp;\displaystyle e^{\frac{m-1}{2}\pi i}2^{m-1}(-i)^{m-1}\prod_{k=1}^{m-1}\sin{\frac{k\pi}{m}}\\&amp;=&amp;\displaystyle2^{m-1}\prod_{k=1}^{m-1}\sin{\frac{k\pi}{m}}\end{array}\]</span></p><p>从而</p><p><span class="math display">\[C^2=\frac{(2\pi)^{m-1}}{m}\]</span></p><p>取平方根代入即得</p><p><span class="math display">\[\prod_{k=0}^{m-1}\Gamma\left(z+\frac{k}{m}\right)=(2\pi)^{\frac{m-1}{2}}m^{\frac{1}{2}-mz}\Gamma(mz)\]</span></p><p>令<span class="math inline">\(m=2\)</span>得<span class="math inline">\(Legendre\)</span>加倍公式</p><p><span class="math display">\[\Gamma(2z)=\frac{2^{2z-1}}{\sqrt{\pi}}\Gamma(z)\Gamma\left(z+\frac{1}{2}\right)\]</span></p><h2 id="psi函数"><span class="math inline">\(\Psi\)</span>函数</h2><p>  定义<span class="math inline">\(Digamma\)</span>函数</p><p><span class="math display">\[\Psi(z)=\frac{\mathrm{d}\ln{\Gamma(z)}}{\mathrm{d}z}=\frac{\Gamma&#39;(z)}{\Gamma(z)}\]</span></p><p>它有一个漂亮的性质</p><p><span class="math display">\[\Psi(z+1)=\Psi(z)+\frac{1}{z}\]</span></p><p>由<span class="math inline">\(Weierstrass\)</span>对<span class="math inline">\(\Gamma\)</span>函数的定义<span class="math inline">\(\displaystyle\Gamma(z)=\frac{e^{-\gamma z}}{z}\prod_{k=1}^\infty\left(1+\frac{z}{k}\right)^{-1}e^{\frac{z}{k}}\)</span>得</p><p><span class="math display">\[\ln\Gamma(z)=-\gamma z-\ln z+\sum_{k=1}^\infty[\frac{z}{k}-\ln{(k+z)}+\ln k]\]</span></p><p>两边求导得</p><p><span class="math display">\[\frac{\Gamma&#39;(z)}{\Gamma(z)}=-\gamma-\frac{1}{z}+\sum_{k=1}^\infty\left(\frac{1}{k}-\frac{1}{k+z}\right)\]</span></p><p>从而</p><p><span class="math display">\[\Psi(z)=-\gamma+\sum_{k=0}^\infty\left(\frac{1}{k+1}-\frac{1}{k+z}\right)\]</span></p><p>令<span class="math inline">\(z=1\)</span>结合<span class="math inline">\(\Gamma(1)=1\)</span>得</p><p><span class="math display">\[\Psi(1)=\Gamma&#39;(1)=-\gamma\]</span></p><p>注意到</p><p><span class="math display">\[\frac{1}{k+1}-\frac{1}{k+z}=\int_0^1(x^k-x^{k+z-1})\mathrm{d}x=\int_0^1x^k(1-x^{z-1})\mathrm{d}x\]</span></p><p>那么</p><p><span class="math display">\[\Psi(z)=-\gamma+\int_0^1(1-x^{z-1})\sum_{k=0}^\infty x^k\mathrm{d}x=-\gamma+\int_0^1\frac{1-x^{z-1}}{1-x}\mathrm{d}x\]</span></p><h1 id="rmb函数"><span class="math inline">\(\rm{B}函数\)</span></h1><p>  <span class="math inline">\({\rm{B}}\)</span>函数可通过第一类<span class="math inline">\(Euler\)</span>积分定义：</p><p><span class="math display">\[{\rm{B}}\left(p,q\right)=\int_0^1x^{p-1}(1-x)^{q-1}\mathrm{d}x,\quad p,q&gt;0\]</span></p><h2 id="简单性质-1">简单性质</h2><ol type="1"><li><span class="math inline">\({\rm{B}}(p,q)={\rm{B}}(q,p)\)</span></li><li><span class="math inline">\({\rm{B}}(p,q)=\displaystyle\frac{p-1}{p+q-1}{\rm{B}}(p-1,q)\)</span></li><li><span class="math inline">\({\rm{B}}(p,q)=2\displaystyle\int_0^\frac{\pi}{2}\cos^{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}\theta\)</span></li><li><span class="math inline">\({\rm{B}}(p,q)=\displaystyle\int_0^{+\infty}\frac{x^{q-1}}{(1+x)^{p+q}}\mathrm{d}x\)</span></li></ol><h2 id="与gamma函数的关系">与<span class="math inline">\(\Gamma\)</span>函数的关系</h2><p>  设<span class="math inline">\(p&gt;0,q&gt;0\)</span>则有<span class="math inline">\({\rm{B}}(p,q)=\displaystyle\frac{\Gamma(p)\Gamma(q)}{\Gamma(p+q)}\)</span></p><p>  <strong>证明:</strong>  由性质知</p><p><span class="math display">\[\Gamma(p)=2\int_0^{+\infty}x^{2p-1}e^{-x^2}\mathrm{d}x,\quad\Gamma(q)=2\int_0^{+\infty}x^{2q-1}e^{-x^2}\mathrm{d}x\]</span></p><p>令<span class="math inline">\(D=\left\{(x,y):0\leq x&lt;+\infty,0\leq y&lt;+\infty\right\}\)</span>, 则有</p><p><span class="math display">\[\Gamma(p)\Gamma(q)=4\iint_Dx^{2p-1}y^{2q-1}e^{-(x^2+y^2)}\mathrm{d}x\mathrm{d}y\]</span></p><p>利用极坐标变换, 记<span class="math inline">\(D_1=\displaystyle\left\{(r,\theta):0&lt;r&lt;+\infty,0\leq\theta\leq\frac{\pi}{2}\right\}\)</span>, 则有</p><p><span class="math display">\[\begin{array}{l}\Gamma(p)\Gamma(q)&amp;=&amp;4\displaystyle\iint_{D1}r^{2(p+q)-1}e^{-r^2}\cos^{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}r\mathrm{d}\theta\\&amp;=&amp;\displaystyle\left(2\int_0^\frac{\pi}{2}\cos^{2p-1}\theta\sin^{2q-1}\theta\mathrm{d}\theta\right)\left(2\int_0^{+\infty}r^{2(p+q)-1}e^{-r^2}\mathrm{d}r\right)\\&amp;=&amp;\displaystyle{\rm{B}}(p,q)\Gamma(p+q)\end{array}\]</span></p><p>证毕.</p><hr><p>   <strong>(余元公式)</strong> 设<span class="math inline">\(0&lt;p&lt;1\)</span>, 则有</p><p><span class="math display">\[{\rm{B}}(p,1-p)=\Gamma(p)\Gamma(1-p)=\frac{\pi}{\sin p\pi}.\]</span></p><p>  <strong>证明:</strong>  由于<span class="math inline">\({\rm{B}}(p,1-p)=\displaystyle\int_0^{+\infty}\frac{x^{p-1}}{1+x}\mathrm{d}x\)</span>, 利用变量替换<span class="math inline">\(x=\frac{1}{t}\)</span>有:</p><p><span class="math display">\[\int_1^{+\infty}\frac{x^{p-1}}{1+x}\mathrm{d}x=\int_0^1\frac{x^{-p}}{1+x}\mathrm{d}x,\]</span></p><p>将<span class="math inline">\(\displaystyle\frac{1}{1+x}\)</span>展开成幂级数, 从而有</p><p><span class="math display">\[\begin{array}{l}{\rm{B}}(p,1-p)&amp;=&amp;\displaystyle\lim_{r\to1^-}\int_0^r\frac{x^{p-1}+x^{-p}}{1+x}\mathrm{d}x\\&amp;=&amp;\displaystyle\lim_{r\to1^-}\int_0^r\left[\sum_{k=0}^{+\infty}(-1)^kx^{k+p-1}+\sum_{k=0}^{+\infty}(-1)^kx^{k-p}\right]\mathrm{d}x\\&amp;=&amp;\displaystyle\lim_{r\to1^-}\left[\sum_{k=0}^{+\infty}\frac{(-1)^k}{k+p}r^{k+p}+\sum_{k=0}^{+\infty}\frac{(-1)^k}{k-p+1}r^{k-p+1}\right]\\&amp;=&amp;\displaystyle\sum_{k=0}^{+\infty}\frac{(-1)^k}{k+p}+\sum_{k=0}^{+\infty}\frac{(-1)^k}{k-p+1}\\&amp;=&amp;\displaystyle\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\left(\frac{1}{k+p}+\frac{1}{p-k}\right)\\&amp;=&amp;\displaystyle\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\frac{2p}{p^2-k^2}.\end{array}\]</span></p><p>而<span class="math inline">\(\cos px\)</span>的<span class="math inline">\(Fourier\)</span>级数为</p><p><span class="math display">\[\cos px=\frac{\sin px}{\pi}\left[\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\frac{2p}{p^2-k^2}\cos kx\right]\]</span></p><p>在<span class="math inline">\(\left|x\right|\leq\pi\)</span>处处收敛, 令<span class="math inline">\(x=0\)</span>即得</p><p><span class="math display">\[{\rm{B}}(p,1-p)=\frac{1}{p}+\sum_{k=1}^{+\infty}(-1)^k\frac{2p}{p^2-k^2}=\frac{\pi}{\sin p\pi}.\]</span></p><p>证毕.</p><p><strong>注</strong>:令<span class="math inline">\(p=\displaystyle\frac{1}{2}\)</span>, 得 <span class="math display">\[\Gamma^2\left(\frac{1}{2}\right)=\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{1}{2}\right)}{\Gamma(1)}={\rm{B}}(\frac{1}{2},\frac{1}{2})=\pi\]</span> 则<span class="math inline">\(\displaystyle\int_0^{+\infty}e^{-x^2}\mathrm{d}x=\frac{1}{2}\Gamma\left(\frac{1}{2}\right)=\frac{\sqrt\pi}{2}\)</span>, 也是一个得到这个重要等式的方法.</p><hr><p>  求<span class="math inline">\(\Bbb{R}^n\)</span>中单位球体<span class="math inline">\(D:x_1^2+x_2^2+\cdots x_n^2\leq1\)</span>的体积.</p><p>   <strong>分析:</strong> 考虑用与球面类似的换元求解</p><p>   <strong>解:</strong> 由<span class="math inline">\(n\)</span>重积分的集合意义, 所求体积为</p><p><span class="math display">\[V=\iint\cdots\int_D\mathrm{d}x_1\mathrm{d}x_2\cdots\mathrm{d}x_n.\]</span></p><p>作变换</p><p><span class="math display">\[\begin{cases}x_1&amp;=&amp;r\cos\theta_1,\\x_2&amp;=&amp;r\sin\theta_1\cos\theta_2\\x_3&amp;=&amp;r\sin\theta_1\sin\theta_2\cos\theta_3\\\cdots\cdots\\x_{n-1}&amp;=&amp;r\sin\theta_1\sin\theta_2\cdots\sin\theta_{n-2}\cos\theta_{n-1}\\x_{n}&amp;=&amp;r\sin\theta_1\sin\theta_2\cdots\sin\theta_{n-2}\sin\theta_{n-1}\end{cases}\]</span></p><p>其中<span class="math inline">\(\quad 0&lt;r&lt;1, 0&lt;\theta_1,\cdots,\theta_{n-2}&lt;\pi,0&lt;\theta_{n-1}&lt;2\pi\)</span>, 则其<span class="math inline">\(Jacobian\)</span>行列式</p><p><span class="math display">\[\displaystyle\frac{\partial(x_1,x_2,\cdots,x_n)}{\partial(r,\theta_1,\theta_2,\cdots,\theta_{n-1})}=r^{n-1}\sin^{n-2}\theta_1\sin^{n-3}\theta_2\cdots\sin\theta_{n-2}\]</span></p><p>由此</p><p><span class="math display">\[\begin{array}{l}V &amp;=&amp; \displaystyle\iint\cdots\int_D\mathrm{d}x_1\mathrm{d}x_2\cdots\mathrm{d}x_n\\ &amp;=&amp; \displaystyle\int_0^{2\pi}\mathrm{d}\theta_{n-1}\int_0^\pi\mathrm{d}\theta_{n-2}\cdots\int_0^\pi\mathrm{d}\theta_1\int_0^1r^{n-1}\sin^{n-2}\theta_1\sin^{n-3}\theta_2\cdots\sin\theta_{n-2}\mathrm{d}r\\ &amp;=&amp; \displaystyle\frac{2\pi}{n}\left(\int_0^\pi\sin^{n-2}\theta_1\mathrm{d}\theta_1\right)\left(\int_0^\pi\sin^{n-3}\theta_2\mathrm{d}\theta_2\right)\cdots\left(\int_0^\pi\sin\theta_{n-2}\mathrm{d}\theta_{n-2}\right)\\ &amp;=&amp; \displaystyle\frac{2\pi}{n}{\rm{B}}\left(\frac{1}{2}, \frac{n-1}{2}\right){\rm{B}}\left(\frac{1}{2},\frac{n-2}{2}\right)\cdots{\rm{B}}\left(\frac{1}{2},1\right)\\&amp;=&amp; \displaystyle\frac{2\pi}{n}\cdot\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{n-1}{2}\right)}{\displaystyle\Gamma\left(\frac{n}{2}\right)}\cdot\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma\left(\frac{n-2}{2}\right)}{\displaystyle\Gamma\left(\frac{n-1}{2}\right)}\cdots\frac{\displaystyle\Gamma\left(\frac{1}{2}\right)\Gamma(1)}{\displaystyle\Gamma\left(\frac{3}{2}\right)}\\&amp;=&amp; \displaystyle\frac{2\pi}{n}\cdot\frac{\displaystyle\Gamma^{n-2}\left(\frac{1}{2}\right)}{\displaystyle\Gamma\left(\frac{n}{2}\right)}\\&amp;=&amp; \displaystyle\frac{\displaystyle\pi^{\frac{n}{2}}}{\displaystyle\Gamma\left(\frac{n}{2}+1\right)}.\end{array}\]</span></p><h1 id="zeta函数"><span class="math inline">\(\zeta函数\)</span></h1><p>  <strong><span class="math inline">\(Riemann\ zeta\)</span></strong> 函数<span class="math inline">\(\zeta(s)\)</span>, 是一个关于复数<span class="math inline">\(s\)</span>的函数, 在在复平面上, <span class="math inline">\(s\)</span>的实数部分<span class="math inline">\(\sigma=\scr{R}s&gt;1\)</span>时, <span class="math inline">\(\zeta(s)=\displaystyle\sum_{n=1}^\infty\frac{1}{n^s}\)</span></p><h2 id="特殊点取值">特殊点取值</h2><p>  考虑调和级数<span class="math inline">\(\zeta(1)=\displaystyle\sum_{i=1}^\infty\frac{1}{n}\)</span>, 由<span class="math inline">\(Cauchy\)</span>判别法, 级数<span class="math inline">\(S_n\)</span>收敛当且仅当<span class="math inline">\(\forall \epsilon&gt;0, \exists N, st.\ m,n&gt;N, \left|S_m-S_n\right|&lt;\epsilon\)</span></p><p><span class="math display">\[\left|S_{2n}-S_n\right|=\frac{1}{n+1}+\cdots+\frac{1}{2n}&gt;\frac{1}{2n}+\cdots+\frac{1}{2n}=\frac{1}{2}\]</span></p><p>故调和级数发散</p><p><strong><span class="math inline">\(Parseval\)</span>等式</strong></p><p><span class="math display">\[\frac{1}{\pi}\int_{-\pi}^\pi\left|f(x)\right|^2=\frac{a_0^2}{2}+\sum_{n=1}^\infty(a_n^2+b_n^2)\]</span></p><p><span class="math inline">\(\displaystyle\sum_{n=1}^\infty\frac{1}{n^2}=\frac{\pi^2}{6}\)</span></p><p><span class="math inline">\(\displaystyle\sum_{n=1}^\infty\frac{1}{n^4}=\frac{\pi^4}{90}\)</span></p><p>  <span class="math inline">\(zeta\)</span>函数的积分形式 <span class="math display">\[\zeta(s)=\sum_{n=1}^\infty\frac{1}{n^{s}}=\frac{1}{\Gamma(s)}\int_0^{+\infty}\frac{x^{s-1}}{e^x-1}\mathrm{d}x,\quad s&gt;1\]</span></p><p>  求<span class="math inline">\(\displaystyle\int_0^1\frac{\ln x}{1-x}\mathrm{d}x\)</span></p><p>   <strong>解:</strong> 令<span class="math inline">\(x=e^{-t},\)</span> 则 <span class="math display">\[\int_0^1\frac{\ln x}{1-x}\mathrm{d}x=\int_{+\infty}^0\frac{-t}{1-e^{-t}}e^{-t}(-\mathrm{d}t)=-\int_0^{+\infty}\frac{t}{e^t-1}\mathrm{d}t\]</span></p><p>在结论中取<span class="math inline">\(s=2\)</span>, 则</p><p><span class="math display">\[\int_0^1\frac{\ln x}{1-x}\mathrm{d}x=-\Gamma(2)\sum_{n=1}^{\infty}\frac{1}{n^2}=-\frac{\pi^2}{6}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反演原理及应用</title>
      <link href="/Algorithm/Theory%20of%20Inversion/"/>
      <url>/Algorithm/Theory%20of%20Inversion/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是反演">什么是反演</h1><p>  对于数列<span class="math inline">\(\left\{f_n\right\}\)</span>以及数列<span class="math inline">\(\left\{g_n\right\}\)</span>满足</p><p><span class="math display">\[g_n=\sum_{i=0}^na_{ni}f_i \tag{1}\]</span></p><p>  反演便是利用<span class="math inline">\(\left\{g_n\right\}\)</span>反推出<span class="math inline">\(\left\{f_n\right\}\)</span>, 也即</p><p><span class="math display">\[f_n=\sum_{i=0}^nb_{ni}g_i \tag{2}\]</span></p><p>  本质上来说这是一个反解线性方程组的过程, 但观察后会发现整个方程组是一个下三角矩阵, 可以思考出更加快捷的方法</p><a id="more"></a><h1 id="反演原理">反演原理</h1><p>  为了便于后面的叙述, 首先引入<span class="math inline">\(\delta(i,j)\)</span>函数<span class="math inline">\((Kronecker&#39;s\ delta)\)</span>, 它的定义为</p><p><span class="math display">\[\delta\left(i,j\right)=\begin{cases}1\quad i=j\\0\quad i\neq j\end{cases}\qquad(\text{也可记为}[i=j])\]</span></p><p>  下面考虑反演的过程, 考虑下面的式子应该满足什么条件</p><p><span class="math display">\[\sum_{i=0}^nb_{ni}g_i=f_n \tag{3}\]</span></p><p><span class="math display">\[\begin{array}{l}LHS&amp;=&amp;\displaystyle\sum_{i=0}^nb_{ni}g_i\\ &amp;=&amp;\displaystyle\sum_{i=0}^nb_{ni}\sum_{j=0}^ia_{ij}f_j\\&amp;=&amp;\displaystyle\sum_{i=0}^nf_i\sum_{j=i}^nb_{nj}a_{ji}\end{array}\]</span></p><p>  为了便于理解最后一步, 我们用矩阵进行表示</p><p><span class="math display">\[\begin{bmatrix}b_{n0}a_{00}f_0\\b_{n1}a_{10}f_0 &amp; b_{n1}a_{11}f_1\\b_{n2}a_{20}f_0 &amp; b_{n2}a_{21}f_1 &amp; b_{n2}a_{22}f_2\\\vdots &amp; \vdots &amp; \ddots \\b_{nn}a_{n0}f_0 &amp; b_{nn}a_{n1}f_1 &amp; \cdots &amp; b_{nn}a_{nn}f_n\end{bmatrix}\]</span></p><p>  前一个是<strong>对行</strong>进行, 再将行加起来, 后一个是<strong>对列</strong>进行, 再将列加起来</p><p>  因此, 式<span class="math inline">\((3)\)</span>成立的条件等价于</p><p><span class="math display">\[\sum_{j=i}^nb_{nj}a_{ji}=\delta(n,i) \tag{4}\]</span></p><p>  同理, 将<span class="math inline">\(f\)</span>代入带<span class="math inline">\(g\)</span>的求和式中, 可以推出</p><p><span class="math display">\[\sum_{j=i}^na_{nj}b_{ji}=\delta(n,i) \tag{5}\]</span></p><p>  如果某个数列满足上面的条件, 我们便阔以利用反演公式</p><h1 id="二项式反演">二项式反演</h1><h2 id="原理">原理</h2><p>  二项式反演<span class="math inline">\((binomial\ inversion)\)</span>在容斥中经常用到, 可以表示为</p><p><span class="math display">\[f_n=\sum_{i=0}^n\left(-1\right)^n\begin{pmatrix}n\\i\end{pmatrix}g_i\Leftrightarrowg_n=\sum_{i=0}^n\left(-1\right)^n\begin{pmatrix}n\\i\end{pmatrix}f_i \tag{6}\]</span></p><p>  可以写成另一种常见形式</p><p><span class="math display">\[f_n=\sum_{i=0}^n\begin{pmatrix}n\\i\end{pmatrix}g_i\Leftrightarrowg_n=\sum_{i=0}^n\left(-1\right)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}f_i \tag{7}\]</span></p><p><strong>证明:</strong></p><p><span class="math display">\[\begin{array}{l}g_n&amp;=&amp;\displaystyle\sum_{i=0}^n\left(-1\right)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}f_i\\&amp;=&amp;\displaystyle\sum_{i=0}^n\left(-1\right)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}\sum_{j=0}^i\begin{pmatrix}i\\j\end{pmatrix}g_j\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\sum_{j=i}^n\begin{pmatrix}n\\j\end{pmatrix}\begin{pmatrix}j\\i\end{pmatrix}\left(-1\right)^{n-j}\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\sum_{j=i}^n\begin{pmatrix}n\\i\end{pmatrix}\begin{pmatrix}n-i\\j-i\end{pmatrix}\left(-1\right)^{n-j}\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\begin{pmatrix}n\\i\end{pmatrix}\sum_{j=0}^{n-i}\begin{pmatrix}n-i\\j\end{pmatrix}\left(-1\right)^{n-i-j}\\&amp;=&amp;\displaystyle\sum_{i=0}^ng_i\begin{pmatrix}n\\i\end{pmatrix}\left(1-1\right)^{n-i}\\&amp;=&amp;g_n\end{array}\]</span></p><h2 id="应用">应用</h2><ul><li>错位排列</li></ul><p>  对于长度为<span class="math inline">\(n\)</span>的序列<span class="math inline">\(\{a_i\}\)</span>, 求所有满足<span class="math inline">\(1\leq i\leq n\)</span>, 使得<span class="math inline">\(a_i\neq i\)</span>的种类数</p><p>  一个高中生想到的常规方法可能是利用递推, 记所求为<span class="math inline">\(D_n\)</span>, <span class="math inline">\(n\)</span>个错位排列按照第一位是<span class="math inline">\(2,3,\cdots,n\)</span>分成<span class="math inline">\(n-1\)</span>, 每个组排列个数一样多, 考虑其中一组, 不妨设第一位为<span class="math inline">\(2\)</span>, 若第<span class="math inline">\(2\)</span>位是<span class="math inline">\(1\)</span>,有<span class="math inline">\(D_{n-2}\)</span>种, 否则有<span class="math inline">\(D_{n-1}\)</span>种, 结合<span class="math inline">\(D_1=0,\ D_2=1\)</span>, 从而有</p><p><span class="math display">\[D_n=(n-1)(D_{n-1}+D_{n-2}) \tag{8}\]</span> <span class="math display">\[D_n-nD_{n-1}=-\left(D_{n-1}-(n-1)D_{n-2}\right)=\cdots=(-1)^{n-2} \tag{9}\]</span> <span class="math display">\[D_n=nD_{n-1}+(-1)^n=\cdots=n!\sum_{i=0}^n\frac{(-1)^i}{i!} \tag{10}\]</span></p><p>  回到正题, 我们有一个有意思的解法, 设<span class="math inline">\(f_i\)</span>为恰好有<span class="math inline">\(i\)</span>个位置是不变的排列, 那么 <span class="math display">\[n!=\sum_{i=0}^n\begin{pmatrix}n\\i\end{pmatrix}f_i \tag{11}\]</span>   可以看粗其形式和反演公式很像, 令<span class="math inline">\(g_i=i!\)</span>, 有二项式反演 <span class="math display">\[\begin{array}{l}f_n&amp;=&amp;\displaystyle\sum_{i=0}^n(-1)^{n-i}\begin{pmatrix}n\\i\end{pmatrix}g_i\\&amp;=&amp;\displaystyle\sum_{i=0}^n(-1)^{n-i}\frac{n!}{(n-i)!}\\&amp;=&amp;n!\displaystyle\sum_{i=0}^n\frac{(-1)^i}{i!}\end{array}\]</span></p><ul><li>染色问题</li></ul><p>  <span class="math inline">\(n\)</span>个球排成一行, 有<span class="math inline">\(m\)</span>种颜色, 每个球染一个颜色, 相邻两个球染不同颜色, 每种颜色至少使用一次, 求染色方案数</p><p>  不考虑每种颜色至少用一次这一条件, 那么答案显然是<span class="math inline">\(m(m-1)^{n-1}\)</span>, 设<span class="math inline">\(f_i\)</span>为恰好使用<span class="math inline">\(i(i=0,1,2,\cdots,k)\)</span>种颜色的方案数, 那么</p><p><span class="math display">\[m(m-1)^{n-1}=\sum_{i=0}^m\begin{pmatrix}m\\i\end{pmatrix}f_i \tag{12}\]</span></p><p>  经过反演得到</p><p><span class="math display">\[f_m=\sum_{i=0}^m(-1)^{m-i}\begin{pmatrix}m\\i\end{pmatrix}g_i \tag{13}\]</span></p><p><a href="https://bzoj.zcmimi.tk/p/2839.html" target="_blank" rel="noopener"><span class="math inline">\(BZOJ2839\)</span>:集合计数</a></p><p>  记<span class="math inline">\(b_i\)</span>为交集有至少<span class="math inline">\(i\)</span>个集合的个数, 枚举<span class="math inline">\(i\)</span>个交集后, 共有<span class="math inline">\(2^{n-i}\)</span>个互不相同的集合, 每个集合又有选与不选两种方案, 故<span class="math inline">\(b_i=\begin{pmatrix}n\\i\end{pmatrix}2^{2^{n-i}}\)</span>, 那么我们开始演了</p><p><span class="math display">\[b_k=\sum_{i=k}^n\begin{pmatrix}i\\k\end{pmatrix}a_i\quad\Leftrightarrow\quad a_k=\sum_{i=k}^n(-1)^{n-k}\begin{pmatrix}i\\k\end{pmatrix}b_i\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,l,r) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,v) memset(a,v,sizeof(a))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; ll f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n, k, ans;</span><br><span class="line">ll fac[N], inv[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; a = a * a % MOD, b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[m] % MOD * inv[n-m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n) fac[i] = (ll)fac[i<span class="number">-1</span>] * i % MOD, p[i] = (ll)p[i<span class="number">-1</span>] * <span class="number">2</span> % (MOD - <span class="number">1</span>);</span><br><span class="line">    inv[n] = power(fac[n], MOD - <span class="number">2</span>);</span><br><span class="line">    dec(i,<span class="number">1</span>,n<span class="number">-1</span>) inv[i] = (ll)inv[i+<span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">    inc(i,k,n) &#123;</span><br><span class="line">        (ans += MOD + ((i-k) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * (C(i,k) * C(n,i) % MOD * (power(<span class="number">2</span>, p[n-i]) % MOD))) %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="斯特林反演">斯特林反演</h1><h2 id="原理-1">原理</h2><p>  在这里, 先回顾一下斯特林数(<span class="math inline">\(dalao\)</span>请自动忽略)</p><ul><li><strong>第一类斯特林数</strong></li></ul><p>  <strong>定义:</strong> 将<span class="math inline">\(n\)</span>个元素排成<span class="math inline">\(m\)</span>个轮换的方法数</p><p>  从<span class="math inline">\(n-1\)</span>的情况推过来, 要么将最后一个元素放进自身的轮换, 要么将最后一个元素放进前<span class="math inline">\(n-1\)</span>个元素分成的<span class="math inline">\(\begin{bmatrix}n-1\\m\end{bmatrix}\)</span>个轮换中的一个, 可以得到:</p><p><span class="math display">\[\begin{bmatrix}n\\m\end{bmatrix}=\begin{bmatrix}n-1\\m-1\end{bmatrix}+(n-1)*\begin{bmatrix}n-1\\m\end{bmatrix} \tag{14}\]</span></p><p>  由于<span class="math inline">\(\begin{bmatrix}n\\ k\end{bmatrix}\)</span>是<span class="math inline">\(n\)</span>个元素恰好包含<span class="math inline">\(k\)</span>个轮换的排列个数, 对所有的<span class="math inline">\(k\)</span>求和, 必然得到排列的总数</p><p><span class="math display">\[\sum_{k=0}^n\begin{bmatrix}n\\k\end{bmatrix}=n! \tag{15}\]</span></p><p>  下面是与下降幂<span class="math inline">\(x^{\underline{n}}\)</span>和阶乘幂<span class="math inline">\(x^{\overline{n}}\)</span>的关系</p><p><span class="math display">\[x^{\underline{n}}=\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^i \tag{16}\]</span></p><p>  用归纳法证明</p><p><span class="math display">\[\begin{array}{l}x^{\underline{n+1}}&amp;=&amp;(x-n)x^{\underline{n}}\\&amp;=&amp;(x-n)\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^i\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^{i+1}-n\sum_{i=0}^{n+1}\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}x^i\\&amp;=&amp;\displaystyle\sum_{i=1}^{n+1}\begin{bmatrix}n\\i-1\end{bmatrix}(-1)^{n-i+1}x^{i}+n\sum_{i=0}^{n+1}\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i+1}x^i\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\left(\begin{bmatrix}n\\i-1\end{bmatrix}+n\begin{bmatrix}n\\i\end{bmatrix}\right)(-1)^{n-i+1}x^i\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\begin{bmatrix}n+1\\i\end{bmatrix}(-1)^{n+1-i}x^i\end{array}\]</span></p><p>  类似可以证明</p><p><span class="math display">\[x^{\overline{n}}=\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}x^i \tag{17}\]</span></p><ul><li><strong>第二类斯特林数</strong></li></ul><p>  <strong>定义:</strong> 将一个有<span class="math inline">\(n\)</span>件物品的集合划分成<span class="math inline">\(m\)</span>个非空子集的方法数</p><p>  从<span class="math inline">\(n-1\)</span>的情况推过来, 要么将最后一个元素单独放一类, 要么与前<span class="math inline">\(n-1\)</span>个元素的某个非空子集放一起, 可以得到:</p><p><span class="math display">\[\begin{Bmatrix}n\\m\end{Bmatrix}=\begin{Bmatrix}n-1\\m-1\end{Bmatrix}+m*\begin{Bmatrix}n-1\\m\end{Bmatrix} \tag{18}\]</span></p><p>  下面是与下降幂<span class="math inline">\(x^{\underline{n}}\)</span>和阶乘幂<span class="math inline">\(x^{\overline{n}}\)</span>的关系</p><p><span class="math display">\[m^n=\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i}} \tag{19}\]</span></p><p>  用归纳法证明, 由于<span class="math inline">\(x*x^{\underline{i}}=x^{\underline{i+1}}+ix^{\underline{i}}\)</span></p><p><span class="math display">\[\begin{array}{l}m^{n+1}&amp;=&amp;m\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i+1}}+\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}im^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=1}^{n+1}\begin{Bmatrix}n\\i-1\end{Bmatrix}m^{\underline{i}}+\sum_{i=0}^{n+1}\begin{Bmatrix}n\\i\end{Bmatrix}im^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\left(\begin{Bmatrix}n\\i-1\end{Bmatrix}+i\begin{Bmatrix}n\\i\end{Bmatrix}\right)m^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^{n+1}\begin{Bmatrix}n+1\\i\end{Bmatrix}m^{\underline{i}}\end{array}\]</span></p><p>  类似可以证明</p><p><span class="math display">\[m^n=\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}(-1)^{n-i}m^{\overline{i}} \tag{20}\]</span></p><p>  当然还有两个比较显然的东西</p><p><span class="math display">\[x^{\underline{n}}=(-1)(-x)^{\overline{n}} \tag{21}\]</span> <span class="math display">\[x^{\overline{n}}=(-1)(-x)^{\underline{n}} \tag{22}\]</span></p><ul><li><strong>反转公式</strong></li></ul><p><span class="math display">\[\sum_{k=m}^n(-1)^{n-k}\begin{bmatrix}n\\k\end{bmatrix}\begin{Bmatrix}k\\m\end{Bmatrix}=[m=n] \tag{23}\]</span></p><p><span class="math display">\[\sum_{k=m}^n(-1)^{n-k}\begin{Bmatrix}n\\k\end{Bmatrix}\begin{bmatrix}k\\m\end{bmatrix}=[m=n] \tag{24}\]</span></p><p><span class="math inline">\(proof\ 1:\)</span></p><p><span class="math display">\[\begin{array}{l}m^{\underline{n}}&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}m^i\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{bmatrix}n\\i\end{bmatrix}(-1)^{n-i}\sum_{j=0}^i\begin{Bmatrix}i\\j\end{Bmatrix}m^{\underline{j}}\\&amp;=&amp;\displaystyle\sum_{i=0}^nm^{\underline{i}}\sum_{j=i}^n(-1)^{n-j}\begin{bmatrix}n\\j\end{bmatrix}\begin{Bmatrix}j\\i\end{Bmatrix}\end{array}\]</span></p><p><span class="math inline">\(proof\ 2:\)</span></p><p><span class="math display">\[\begin{array}{l}m^n&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}m^{\underline{i}}\\&amp;=&amp;\displaystyle\sum_{i=0}^n\begin{Bmatrix}n\\i\end{Bmatrix}\sum_{j=0}^i(-1)^{i-j}\begin{bmatrix}i\\j\end{bmatrix}m^j\\&amp;=&amp;\displaystyle\sum_{i=0}^nm^i\sum_{j=i}^n(-1)^{n-j}\begin{Bmatrix}n\\j\end{Bmatrix}\begin{bmatrix}j\\i\end{bmatrix}\end{array}\]</span></p><ul><li><strong>斯特林反演</strong></li></ul><p><span class="math display">\[f(n)=\sum_{i=0}^n\begin{Bmatrix}n\\k\end{Bmatrix}g(k) \quad\Leftrightarrow\quad g(n)=\sum_{k=0}^n(-1)^{n-k}\begin{bmatrix}n\\k\end{bmatrix}f(k) \tag{25}\]</span></p><p>  <span class="math inline">\((25)\)</span>的证明如下:</p><p><span class="math display">\[\begin{array}{l}f(n)&amp;=&amp;\displaystyle\sum_{k=0}^n\begin{Bmatrix}n\\k\end{Bmatrix}g(k)\\&amp;=&amp;\displaystyle\sum_{k=0}^n\begin{Bmatrix}n\\k\end{Bmatrix}\sum_{j=0}^k(-1)^{k-j}\begin{bmatrix}k\\j\end{bmatrix}f(j)\\&amp;=&amp;\displaystyle\sum_{k=0}^n\sum_{j=k}^n\begin{Bmatrix}n\\j\end{Bmatrix}\begin{bmatrix}j\\k\end{bmatrix}(-1)^{j-k}f(k)\\&amp;=&amp;\displaystyle\sum_{k=0}^n[k=n]f(k)\\&amp;=&amp;f(n)\end{array}\]</span></p><h1 id="莫比乌斯反演">莫比乌斯反演</h1><h2 id="原理-2">原理</h2><p>  <strong>莫比乌斯函数<span class="math inline">\(\mu(m)\)</span></strong> 对所有整数<span class="math inline">\(m\geq1由等式\)</span></p><p><span class="math display">\[\sum_{d|m}\mu(d)=\left[m=1\right] \tag{26}\]</span></p><p>来定义, 这个等式是一个递归式, 代入<span class="math inline">\(m=1,2,\cdots,12\)</span>可以得到前<span class="math inline">\(12\)</span>个值:</p><table><thead><tr class="header"><th style="text-align: center;"><span class="math inline">\(m\)</span></th><th style="text-align: center;"><span class="math inline">\(1\)</span></th><th style="text-align: center;"><span class="math inline">\(2\)</span></th><th style="text-align: center;"><span class="math inline">\(3\)</span></th><th style="text-align: center;"><span class="math inline">\(4\)</span></th><th style="text-align: center;"><span class="math inline">\(5\)</span></th><th style="text-align: center;"><span class="math inline">\(6\)</span></th><th style="text-align: center;"><span class="math inline">\(7\)</span></th><th style="text-align: center;"><span class="math inline">\(8\)</span></th><th style="text-align: center;"><span class="math inline">\(9\)</span></th><th style="text-align: center;"><span class="math inline">\(10\)</span></th><th style="text-align: center;"><span class="math inline">\(11\)</span></th><th style="text-align: center;"><span class="math inline">\(12\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\mu(m)\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td><td style="text-align: center;"><span class="math inline">\(-1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td></tr></tbody></table><p><span class="math display">\[g(m)=\sum_{d|m}f(d)\quad\Leftrightarrow\quad f(m)=\sum_{d|m}\mu(\frac{m}{d})g(d) \tag{27}\]</span></p><p>  <span class="math inline">\((27)\)</span>的证明如下: <span class="math display">\[\begin{array}{l}g(m)&amp;=&amp;\displaystyle\sum_{d|m}f(d)\\&amp;=&amp;\displaystyle\sum_{d|m}\sum_{k|d}\mu(\frac{d}{k})g(k)\\&amp;=&amp;\displaystyle\sum_{k|m}g(k)\sum_{d|m,k|d}\mu(\frac{d}{k})\\&amp;=&amp;\displaystyle\sum_{k|m}g(k)\sum_{d|(m/k)}\mu(d)\\&amp;=&amp;\displaystyle\sum_{k|m}[m/k=1]g(k)\\&amp;=&amp;g(m)\end{array}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法模板</title>
      <link href="/Algorithm/Algorithm%20template/"/>
      <url>/Algorithm/Algorithm%20template/</url>
      
        <content type="html"><![CDATA[<h1 id="基础">基础</h1><h2 id="排序">排序</h2><h3 id="归并排序">归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergesort(l, mid);</span><br><span class="line">    mergesort(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> p = l, q = mid + <span class="number">1</span>, cnt = l;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid &amp;&amp; q &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p] &lt; a[q]) t[cnt++] = a[p++];</span><br><span class="line">        <span class="keyword">else</span> t[cnt++] = a[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid) t[cnt++] = a[p++];</span><br><span class="line">    <span class="keyword">while</span>(q &lt;= r) t[cnt++] = a[q++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) a[i] = t[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="拓扑排序">拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head[N], u[N], v[N], deg[N], tot, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    v[++tot] = y;</span><br><span class="line">    u[tot] = head[x];</span><br><span class="line">    head[x] = tot;</span><br><span class="line">    deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!deg[i]) q.push(i);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        a[++cnt] = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = u[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = v[i];</span><br><span class="line">            <span class="keyword">if</span> (--deg[y] == <span class="number">0</span>) q.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学">数学</h2><h3 id="素数">素数</h3><ul><li><span class="math inline">\(Eratosthenes\)</span>筛法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(nloglogn)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i]) <span class="keyword">continue</span>;</span><br><span class="line">        p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N / i; ++j) v[i*j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线性筛法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] * i &lt;= N; ++j) &#123;</span><br><span class="line">            v[i*p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧几里得">欧几里得</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得">扩展欧几里得</h3><p>  在求出<span class="math inline">\(gcd(a,b)\)</span>的同时求出二元一次不定方程<span class="math inline">\(ax+by=gcd(a,b)\)</span>的一组整数解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        exgcd(b, a % b, x, y);</span><br><span class="line">        y -= a / b * y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉函数">欧拉函数</h3><p>  我们知道<span class="math inline">\(\varphi(n)\)</span>表示小于<span class="math inline">\(n\)</span>且与<span class="math inline">\(n\)</span>互素的整数个数, 而<span class="math inline">\(n\)</span>可分解为<span class="math inline">\(n=\displaystyle\prod_{i=1}^kp_i^{a_i}\)</span>, 根据容斥原理我们有</p><p><span class="math display">\[\varphi(n)=\sum_{S\subseteq\left\{p_1,p_2,\cdots,p_k\right\}}(-1)^{|S|}\frac{n}{\displaystyle\prod_{p_i\in S}p_i}\]</span></p><p>  展开后可以得到</p><p><span class="math display">\[\varphi(n)=n*\prod_{i=1}^k\left(1-\frac{1}{p_i}\right)\]</span></p><ol type="1"><li>若<span class="math inline">\(n\)</span>是素数 , 有<span class="math inline">\(\varphi(n)=n−1\)</span></li><li>若<span class="math inline">\(gcd(n,m)=1\)</span>, 有<span class="math inline">\(\varphi(mn)=\varphi(m)\varphi(n)\)</span></li><li>若<span class="math inline">\(n\)</span>和<span class="math inline">\(m\)</span>是素数 , 有<span class="math inline">\(\varphi(nm)=nm−1\)</span></li><li>若<span class="math inline">\(p\)</span>是素数 , 有<span class="math inline">\(\varphi(p^q)=p^q−p^{q−1}\)</span><br></li><li><span class="math inline">\(\displaystyle\sum_{d|m}\varphi(d)=m\)</span></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个Euler函数值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">int</span> res = n;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123; </span><br><span class="line">res -= res / i; </span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) res -= res / n; </span><br><span class="line"><span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(nlogn)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) phi[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (phi[i] == i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构">数据结构</h2><h3 id="并查集">并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论">图论</h2><h3 id="最短路">最短路</h3><h4 id="dijkstra"><span class="math inline">\(dijkstra\)</span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">int</span> a[N][N], d[N], pre[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        d[i] = INF; vis[i] = <span class="number">0</span>; pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; (x == <span class="number">-1</span> || d[j] &lt; d[x])) x = j;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + a[x][y]) &#123;</span><br><span class="line">                d[y] = d[x] + a[x][y];</span><br><span class="line">                pre[y] = x;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dijkstra堆优化"><span class="math inline">\(dijkstra(堆优化)\)</span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to, w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot].w = z;</span><br><span class="line">    e[tot].next = head[x];</span><br><span class="line">    e[tot].to = y;</span><br><span class="line">    head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x] + e[i].w) &#123;</span><br><span class="line">                d[y] = d[x] + e[i].w;</span><br><span class="line">                q.push(make_pair(-d[y], y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dijkstra-1"><span class="math inline">\(dijkstra\)</span></h4><ul><li>最小环</li></ul><h3 id="最小生成树">最小生成树</h3><h4 id="kruskal算法"><span class="math inline">\(Kruskal\)</span>算法</h4><p>  比较适合于稀疏图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, f[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (edge a, edge b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">krusal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = Find(e[i].u);</span><br><span class="line">        <span class="keyword">int</span> y = Find(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            ans += e[i].w;</span><br><span class="line">            f[x] = y;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//不连通</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prim算法"><span class="math inline">\(Prim\)</span>算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> a[N][N], d[N], v[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!v[j] &amp;&amp; (x == <span class="number">0</span> || d[j] &lt; d[x])) x = j;</span><br><span class="line">        v[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y)</span><br><span class="line">            <span class="keyword">if</span> (!v[y]) d[y] = min(d[y], a[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="提高">提高</h1><h2 id="图论-1">图论</h2><h3 id="网络流初步">网络流初步</h3><h4 id="edmonds-karp">Edmonds-Karp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s, t, maxflow, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ver[M], edge[M], Next[M], head[N], v[N], incf[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = y, edge[tot] = z, Next[tot] = head[x], head[x] = tot;</span><br><span class="line">    ver[++tot] = x, edge[tot] = <span class="number">0</span>, Next[tot] = head[y], head[y] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s); v[s] = <span class="number">1</span>;</span><br><span class="line">    incf[s] = INF;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">            <span class="keyword">if</span> (edge[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = ver[i];</span><br><span class="line">                <span class="keyword">if</span> (v[y]) <span class="keyword">continue</span>;</span><br><span class="line">                incf[y] = min(incf[x], edge[i]);</span><br><span class="line">                pre[y] = i;</span><br><span class="line">                q.push(y);</span><br><span class="line">                v[y] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (y == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = t;</span><br><span class="line">        <span class="keyword">while</span> (x != s) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = pre[x];</span><br><span class="line">            edge[i] -= incf[t];</span><br><span class="line">            edge[i^<span class="number">1</span>] += incf[t];</span><br><span class="line">            x = ver[i^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        maxflow += incf[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dinic">Dinic</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="附录">附录</h1><h2 id="对拍">对拍</h2><p><span class="math inline">\(bat\)</span>语言版本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">do</span> (</span><br><span class="line">  mine.exe &lt; stdin<span class="variable">%%i</span>.txt &gt; out<span class="variable">%%i</span>.txt</span><br><span class="line">  fc out<span class="variable">%%i</span>.txt stdout<span class="variable">%%i</span>.txt &gt; diff<span class="variable">%%i</span>.txt</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">set</span> cnt=<span class="number">1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%i</span>:UnAccepted!</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">del</span> diff<span class="variable">%%i</span>.txt</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%%i</span>:Accepted!</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%cnt%</span>==<span class="number">0</span> <span class="built_in">color</span> a &amp;&amp; <span class="built_in">echo</span> *** Totally Accepted! ***</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%cnt%</span>==<span class="number">1</span> <span class="built_in">color</span> c &amp;&amp; <span class="built_in">echo</span> *** <span class="keyword">Not</span> All Accepted! ***</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h2 id="vim配置">vim配置</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> cin</span><br><span class="line"><span class="keyword">colo</span> evening</span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>POJ1845 Sumdiv</title>
      <link href="/Algorithm/POJ1845%20Sumdiv/"/>
      <url>/Algorithm/POJ1845%20Sumdiv/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1845" target="_blank" rel="noopener"><span class="math inline">\(Sumdiv\)</span></a></p><p>  <strong>题意</strong>: 求<span class="math inline">\(A^B\)</span>的所有约数之和<span class="math inline">\(\mod{9901}\left(1\leq A,B \leq5*10^7\right)\)</span></p><p>  <strong>分析</strong>: A分解质因数为<span class="math inline">\(p_1^{c_1}\times p_2^{c_2}\times\cdots\times p_n^{c_n}\)</span>。那么<span class="math inline">\(A^B\)</span>表示为<span class="math inline">\(p_1^{Bc_1}\times p_2^{Bc_2}\times\cdots\times p_n^{Bc_n}\)</span>。<span class="math inline">\(A^B\)</span>的所有约数表示为集合<span class="math inline">\(\{p_1^{k_1}\times p_2^{k_2}\times\cdots\times p_n^{k_n}\}\)</span>，其中<span class="math inline">\(0\leq k_i \leq B\times c_i\left(1\leq i \leq n\right)\)</span></p><a id="more"></a><p>  由乘法分配律, <span class="math inline">\(A^B\)</span>的所有约数之和为:</p><p><span class="math display">\[\left(1+p_1+\cdots+p_1^{B*c_1}\right)*\left(1+p_2+\cdots+p_2^{B*c_2}\right)*\cdots\\*\left(1+p_n+\cdots+p_n^{B*c_n}\right)=\prod_{i=1}^n\left(\sum_{j=0}^{B*c_i}\left(p_i\right)^j\right)\]</span></p><p>  括号内为等比数列，直接使用求和公式，需要做除法。答案还需对9901取模，mod运算只对加、减、乘有分配律，不能对分子分母取模后做除法，换一种思路，<strong>用分治法对等比数列求和</strong>。</p><p>  用分治法求<span class="math inline">\(\displaystyle\sum_{i=1}^cp^i\quad\text{若c为奇数:}\)</span> <span class="math display">\[\sum_{i=1}^cp^i=\left(1+p+\cdots+p^\frac{c-1}{2}\right)+\left(p^\frac{c+1}{2}+\cdots+p^c\right)\\=\left(1+p+\cdots+p^\frac{c-1}{2}\right)+p^\frac{c+1}{2}*\left(1+p+\cdots+p^\frac{c-1}{2}\right)\\=(1+p^\frac{c+1}{2})*\sum_{i=1}^\frac{c+1}{2}p^i\]</span></p><p>  若c为偶数，类似有:</p><p><span class="math display">\[\sum_{i=1}^cp^i=(1+p^\frac{c}{2})*\sum_{i=1}^{\frac{c}{2}-1}p^i+p^c\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1005</span>, MOD = <span class="number">9901</span>;</span><br><span class="line">pair&lt;ll, ll&gt; fac[N];</span><br><span class="line">ll cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = a * a % MOD)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll p, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!c) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &amp; <span class="number">1</span>) <span class="keyword">return</span> (qpow(p, (c + <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>) * sum(p, c / <span class="number">2</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ((qpow(p, c / <span class="number">2</span>) + <span class="number">1</span>) * sum(p, c / <span class="number">2</span> - <span class="number">1</span>) + qpow(p, c)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ll num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                num++;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            fac[++cnt] = make_pair(i, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) fac[++cnt] = make_pair(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</span><br><span class="line">    divide(a);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        ll p = fac[i].first, c = fac[i].second;</span><br><span class="line">        ans = ans * sum(p, b * c) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a == <span class="number">0</span> ? <span class="number">0</span> : ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test post</title>
      <link href="/Others/Test%20post/"/>
      <url>/Others/Test%20post/</url>
      
        <content type="html"><![CDATA[<p>本文是一篇测试博文</p><p><a href="https://pandoc.org/MANUAL.html#pandocs-markdown" target="_blank" rel="noopener">pandoc教程</a></p><h1 id="latex"><span class="math inline">\(LaTex\)</span></h1><p>下面教程摘自MITOPENCOURSEWARE</p><ul><li><a href="https://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/" target="_blank" rel="noopener"><u>LaTeX Tutorial</u></a></li><li><a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="noopener"><u>Draw a symbol to get its LaTeX command</u></a></li><li><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols" target="_blank" rel="noopener"><u>LaTeX Symbols</u></a></li></ul><a id="more"></a><h1 id="markdown">Markdown</h1><p>Markdown教程现在已经烂大街了，在这里主要是作为备忘录进行查阅。</p><h2 id="公式">公式</h2><p>插入公式与代码分别是用$与 ` 符号(～键)包裹所写部分</p><ul><li>在需要高亮的代码块的前一行及后一行使用三个反引号。</li><li>同时第一行反引号后面，写代码块所使用的语言。</li><li>使用 <code>\left</code>和 <code>\right</code>来创建自动匹配高度的 ()，[] 和 {} 。 在每个公式末尾前使用<code>\tag{行标}</code>来实现行标。</li></ul><h3 id="希腊字母">希腊字母</h3><table><thead><tr class="header"><th style="text-align: center;">显示</th><th style="text-align: center;">大写</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">大写</th><th style="text-align: center;">命令</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\alpha\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{A}\)</span></td><td style="text-align: center;"><code>$\alpha$</code></td><td style="text-align: center;"><span class="math inline">\(\beta\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{B}\)</span></td><td style="text-align: center;"><code>$\beta$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\gamma\)</span></td><td style="text-align: center;"><span class="math inline">\(\Gamma\)</span></td><td style="text-align: center;"><code>$\gamma$</code></td><td style="text-align: center;"><span class="math inline">\(\delta\)</span></td><td style="text-align: center;"><span class="math inline">\(\Delta\)</span></td><td style="text-align: center;"><code>$\delta$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\epsilon\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{E}\)</span></td><td style="text-align: center;"><code>$\epsilon$</code></td><td style="text-align: center;"><span class="math inline">\(\zeta\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{Z}\)</span></td><td style="text-align: center;"><code>$\zeta$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\eta\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{H}\)</span></td><td style="text-align: center;"><code>$\eta$</code></td><td style="text-align: center;"><span class="math inline">\(\theta\)</span></td><td style="text-align: center;"><span class="math inline">\(\Theta\)</span></td><td style="text-align: center;"><code>$\theta$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\iota\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{I}\)</span></td><td style="text-align: center;"><code>$\iota$</code></td><td style="text-align: center;"><span class="math inline">\(\kappa\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{K}\)</span></td><td style="text-align: center;"><code>$\kappa$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\lambda\)</span></td><td style="text-align: center;"><span class="math inline">\(\Lambda\)</span></td><td style="text-align: center;"><code>$\lambda$</code></td><td style="text-align: center;"><span class="math inline">\(\mu\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{M}\)</span></td><td style="text-align: center;"><code>$\mu$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\nu\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{N}\)</span></td><td style="text-align: center;"><code>$\nu$</code></td><td style="text-align: center;"><span class="math inline">\(\xi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Xi\)</span></td><td style="text-align: center;"><code>$\xi$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\pi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Pi\)</span></td><td style="text-align: center;"><code>$\pi$</code></td><td style="text-align: center;"><span class="math inline">\(\rho\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{R}\)</span></td><td style="text-align: center;"><code>$\rho$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\sigma\)</span></td><td style="text-align: center;"><span class="math inline">\(\Sigma\)</span></td><td style="text-align: center;"><code>$\sigma$</code></td><td style="text-align: center;"><span class="math inline">\(\tau\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{T}\)</span></td><td style="text-align: center;"><code>$\tau$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\upsilon\)</span></td><td style="text-align: center;"><span class="math inline">\(\Upsilon\)</span></td><td style="text-align: center;"><code>$\upsilon$</code></td><td style="text-align: center;"><span class="math inline">\(\phi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Phi\)</span></td><td style="text-align: center;"><code>$\phi$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\chi\)</span></td><td style="text-align: center;"><span class="math inline">\(\rm{X}\)</span></td><td style="text-align: center;"><code>$\chi$</code></td><td style="text-align: center;"><span class="math inline">\(\psi\)</span></td><td style="text-align: center;"><span class="math inline">\(\Psi\)</span></td><td style="text-align: center;"><code>$\psi$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\omega\)</span></td><td style="text-align: center;"><span class="math inline">\(\Omega\)</span></td><td style="text-align: center;"><code>$\omega$</code></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><p>:只需将命令的首字母大写即可得大写希腊字母，在命令前加上var前缀即可得到斜体希腊字母如: <span class="math inline">\(\Gamma\phi\)</span> &amp; <span class="math inline">\(\varGamma\varphi​\)</span></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\Gamma\phi$ &amp; $\varGamma\varphi​$</span><br></pre></td></tr></table></figure><h3 id="运算">运算</h3><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\pm$</code></td><td style="text-align: center;"><span class="math inline">\(\pm\)</span></td><td style="text-align: center;"><code>$\mp$</code></td><td style="text-align: center;"><span class="math inline">\(\mp\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\neq$</code></td><td style="text-align: center;"><span class="math inline">\(\neq\)</span></td><td style="text-align: center;"><code>$\times$</code></td><td style="text-align: center;"><span class="math inline">\(\times\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\div$</code></td><td style="text-align: center;"><span class="math inline">\(\div\)</span></td><td style="text-align: center;"><code>$\leq$</code></td><td style="text-align: center;"><span class="math inline">\(\leq\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\geq$</code></td><td style="text-align: center;"><span class="math inline">\(\geq\)</span></td><td style="text-align: center;"><code>$\ngeq$</code></td><td style="text-align: center;"><span class="math inline">\(\ngeq\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\ast$</code></td><td style="text-align: center;"><span class="math inline">\(\ast\)</span></td><td style="text-align: center;"><code>$\approx$</code></td><td style="text-align: center;"><span class="math inline">\(\approx\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\equiv$</code></td><td style="text-align: center;"><span class="math inline">\(\equiv\)</span></td><td style="text-align: center;"><code>$bigcup$</code></td><td style="text-align: center;"><span class="math inline">\(\bigcup\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\iint$</code></td><td style="text-align: center;"><span class="math inline">\(\iint\)</span></td><td style="text-align: center;"><code>$\iiint$</code></td><td style="text-align: center;"><span class="math inline">\(\iiint\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\oint$</code></td><td style="text-align: center;"><span class="math inline">\(\oint\)</span></td><td style="text-align: center;"><code>$\mid$</code></td><td style="text-align: center;"><span class="math inline">\(\mid\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\because$</code></td><td style="text-align: center;"><span class="math inline">\(\because\)</span></td><td style="text-align: center;"><code>\therefore</code></td><td style="text-align: center;"><span class="math inline">\(\therefore\)</span></td></tr></tbody></table><h3 id="特殊符号">特殊符号</h3><table><thead><tr class="header"><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\infty\)</span></td><td style="text-align: center;"><code>$\infty$</code></td><td style="text-align: center;"><span class="math inline">\(\cup\)</span></td><td style="text-align: center;"><code>$\cup$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\cap\)</span></td><td style="text-align: center;"><code>$\cap$</code></td><td style="text-align: center;"><span class="math inline">\(\subset\)</span></td><td style="text-align: center;"><code>$\subset$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\subseteq\)</span></td><td style="text-align: center;"><code>$\subseteq$</code></td><td style="text-align: center;"><span class="math inline">\(\supset\)</span></td><td style="text-align: center;"><code>$\supset$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\in\)</span></td><td style="text-align: center;"><code>$\in$</code></td><td style="text-align: center;"><span class="math inline">\(\notin\)</span></td><td style="text-align: center;"><code>$\notin$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\varnothing\)</span></td><td style="text-align: center;"><code>$\varnothing$</code></td><td style="text-align: center;"><span class="math inline">\(\forall\)</span></td><td style="text-align: center;"><code>$\forall$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\exists\)</span></td><td style="text-align: center;"><code>$\exists$</code></td><td style="text-align: center;"><span class="math inline">\(\lnot\)</span></td><td style="text-align: center;"><code>$\lnot$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\nabla\)</span></td><td style="text-align: center;"><code>$\nabla$</code></td><td style="text-align: center;"><span class="math inline">\(\partial\)</span></td><td style="text-align: center;"><code>$\partial$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(\angle\)</span></td><td style="text-align: center;"><code>$\angle$</code></td><td style="text-align: center;"><span class="math inline">\(\bot\)</span></td><td style="text-align: center;"><code>$\bot$</code></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(\bigodot\)</span></td><td style="text-align: center;"><code>$\bigodot$</code></td><td style="text-align: center;"><span class="math inline">\(\bigotimes\)</span></td><td style="text-align: center;"><code>$\bigotimes$</code></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(n\choose m\)</span></td><td style="text-align: center;"><code>$n\choose m$</code></td><td style="text-align: center;"><span class="math inline">\(\top\)</span></td><td style="text-align: center;"><code>$\top$</code></td></tr></tbody></table><h3 id="空格">空格</h3><ul><li><code>$\,$</code> <span class="math inline">\(\frac{1}{6}\)</span>m宽度</li><li><code>$\;$</code> <span class="math inline">\(\frac{2}{7}\)</span>m宽度</li><li><code>$\$</code> <span class="math inline">\(\frac{1}{3}\)</span>m宽度</li><li><code>$\quad$</code> m宽度</li><li><code>$\qquad$</code> 2m宽度</li></ul><h3 id="括号">括号</h3><ul><li><code>\{</code>和<code>\}</code>或<code>\lbrace</code>和<code>\rbrace</code>:<span class="math inline">\(\lbrace\rbrace\)</span></li><li><code>\langle</code>和<code>\rangle</code>:<span class="math inline">\(\langle\rangle\)</span></li><li><code>\lceil</code>和<code>rceil</code>，<code>\lfoor</code>和 <code>\rfloor</code>:<span class="math inline">\(\lceil\rceil\lfloor\rfloor\)</span></li></ul><h3 id="矢量与箭头">矢量与箭头</h3><table style="width:100%;"><colgroup><col style="width: 33%"><col style="width: 31%"><col style="width: 18%"><col style="width: 16%"></colgroup><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\vec{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\vec{a}\)</span></td><td style="text-align: center;"><code>$\bar{s}$</code></td><td style="text-align: center;"><span class="math inline">\(\bar{s}\)</span> (平均值)</td></tr><tr class="even"><td style="text-align: center;"><code>$\rightarrow$</code></td><td style="text-align: center;"><span class="math inline">\(\rightarrow\)</span></td><td style="text-align: center;"><code>$\Rightarrow$</code></td><td style="text-align: center;"><span class="math inline">\(\Rightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\overrightarrow{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\overrightarrow{a}\)</span></td><td style="text-align: center;"><code>$\overleftrightarrow{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\overleftrightarrow{a}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\overleftarrow{a}$</code></td><td style="text-align: center;"><span class="math inline">\(\overleftarrow{a}\)</span></td><td style="text-align: center;"><code>$\longrightarrow$</code></td><td style="text-align: center;"><span class="math inline">\(\longrightarrow\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\overline{a+b}$</code></td><td style="text-align: center;"><span class="math inline">\(\overline{a+b}\)</span></td><td style="text-align: center;"><code>$\underline{a+b}$</code></td><td style="text-align: center;"><span class="math inline">\(\underline{a+b}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</code></td><td style="text-align: center;"><span class="math inline">\(\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}\)</span></td><td style="text-align: center;"><code>$\hat{y}$</code></td><td style="text-align: center;"><span class="math inline">\(\hat{y}\)</span></td></tr></tbody></table><h3 id="矩阵与方程组">矩阵与方程组</h3><ul><li>pmatrix: <code>$\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}$</code> :<span class="math display">\[\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}\]</span></li><li>bmatrix: <code>$\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}$</code> :<span class="math display">\[\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}\]</span></li><li>Bmatrix: <code>$\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}$</code> :<span class="math display">\[\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}\]</span></li><li>vmatrix: <code>$\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}$</code> :<span class="math display">\[\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}\]</span></li><li>Vmatrix: <code>$\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}$</code> :<span class="math display">\[\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}\]</span></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;</span><br><span class="line">a<span class="emphasis">_&#123;11&#125;&amp;a_</span>&#123;12&#125;&amp;\cdots&amp;a_&#123;1n&#125;\\</span><br><span class="line">a<span class="emphasis">_&#123;21&#125;&amp;a_</span>&#123;21&#125;&amp;\cdots&amp;a_&#123;2n&#125;\\</span><br><span class="line">\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\</span><br><span class="line">a<span class="emphasis">_&#123;n1&#125;&amp;a_</span>&#123;n2&#125;&amp;\cdots&amp;a_&#123;nn&#125;\\</span><br><span class="line">\end&#123;matrix&#125;$$(类似有\ldots底端对齐)</span><br><span class="line">$$</span><br><span class="line">\left\&#123;</span><br><span class="line">\begin&#123;array&#125;\</span><br><span class="line">a<span class="emphasis">_1x + a_</span>2y + a<span class="emphasis">_3z = d_</span>1 \\</span><br><span class="line">b<span class="emphasis">_1x + b_</span>2y + b<span class="emphasis">_3z = d_</span>2 \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right.</span><br><span class="line">$$(array亦可改为cases)</span><br><span class="line">$$\begin&#123;cases&#125; </span><br><span class="line"><span class="code">a_&#123;11&#125;x_1&amp;+&amp;a_&#123;12&#125;x_2&amp;+&amp;\cdots&amp;+a_&#123;1n&#125;x_n&amp;=&amp;b_1\\</span></span><br><span class="line"><span class="code">&amp;&amp;&amp;&amp;\vdots\\</span></span><br><span class="line"><span class="code">a_&#123;n1&#125;x_1&amp;+&amp;a_&#123;n2&#125;x_2&amp;+&amp;\cdots&amp;+a_&#123;nn&#125;x_n&amp;=&amp;b_n&amp;</span></span><br><span class="line">\end&#123;cases&#125;$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\left[  \begin&#123;array&#125;  &#123;c c | c&#125; %这里的c表示数组中元素对其方式：c居中、r右对齐、l左对齐，竖线表示2、3列间插入竖线</span><br><span class="line">1 &amp; 2 &amp; 3 \\</span><br><span class="line">\hline %插入横线，如果去掉\hline就是增广矩阵</span><br><span class="line">4 &amp; 5 &amp; 6</span><br><span class="line">\end&#123;array&#125;  \right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><span class="math display">\[\begin{matrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\\ \ a_{21}&amp;a_{21}&amp;\cdots&amp;a_{2n}\\\ \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\\ \ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\\ \end{matrix}\]</span></p><p><span class="math display">\[\begin{cases} ​       a_{11}x_1&amp;+&amp;a_{12}x_2&amp;+&amp;\cdots&amp;+a_{1n}x_n&amp;=&amp;b_1\\\ &amp;&amp;&amp;&amp;\vdots\\\ a_{n1}x_1&amp;+&amp;a_{n2}x_2&amp;+&amp;\cdots&amp;+a_{nn}x_n&amp;=&amp;b_n&amp;           \end{cases}\]</span></p><p><span class="math display">\[\left[  \begin{array}  {c c | c}1 &amp; 2 &amp; 3 \\\hline4 &amp; 5 &amp; 6\end{array}  \right]\]</span></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">公式快速参考</a></p><h2 id="表情">表情</h2><table><thead><tr class="header"><th style="text-align: center;">syntax</th><th style="text-align: center;">preview</th><th style="text-align: center;">syntax</th><th style="text-align: center;">preview</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>:sun_with_face:</code></td><td style="text-align: center;">🌞</td><td style="text-align: center;"><code>:smile:</code></td><td style="text-align: center;">😄</td></tr><tr class="even"><td style="text-align: center;"><code>:laughing:</code></td><td style="text-align: center;">😆</td><td style="text-align: center;"><code>:blush:</code></td><td style="text-align: center;">😊</td></tr><tr class="odd"><td style="text-align: center;"><code>:smiley:</code></td><td style="text-align: center;">😃</td><td style="text-align: center;"><code>:relaxed:</code></td><td style="text-align: center;">☺️</td></tr><tr class="even"><td style="text-align: center;"><code>:smirk:</code></td><td style="text-align: center;">😏</td><td style="text-align: center;"><code>:heart_eyes:</code></td><td style="text-align: center;">😍</td></tr><tr class="odd"><td style="text-align: center;"><code>:kissing_heart:</code></td><td style="text-align: center;">😘</td><td style="text-align: center;"><code>:kissing_closed_eyes:</code></td><td style="text-align: center;">😚</td></tr><tr class="even"><td style="text-align: center;"><code>:flushed:</code></td><td style="text-align: center;">😳</td><td style="text-align: center;"><code>:relieved:</code></td><td style="text-align: center;">😌</td></tr><tr class="odd"><td style="text-align: center;"><code>:satisfied:</code></td><td style="text-align: center;">😆</td><td style="text-align: center;"><code>:grin:</code></td><td style="text-align: center;">😁</td></tr><tr class="even"><td style="text-align: center;"><code>:wink:</code></td><td style="text-align: center;">😉</td><td style="text-align: center;"><code>:stuck_out_tongue_winking_eye:</code></td><td style="text-align: center;">😜</td></tr><tr class="odd"><td style="text-align: center;"><code>:stuck_out_tongue_closed_eyes:</code></td><td style="text-align: center;">😝</td><td style="text-align: center;"><code>:grinning:</code></td><td style="text-align: center;">😀</td></tr><tr class="even"><td style="text-align: center;"><code>:kissing:</code></td><td style="text-align: center;">😗</td><td style="text-align: center;"><code>:kissing_smiling_eyes:</code></td><td style="text-align: center;">😙</td></tr><tr class="odd"><td style="text-align: center;"><code>:stuck_out_tongue:</code></td><td style="text-align: center;">😛</td><td style="text-align: center;"><code>:sleeping:</code></td><td style="text-align: center;">😴</td></tr><tr class="even"><td style="text-align: center;"><code>:worried:</code></td><td style="text-align: center;">😟</td><td style="text-align: center;"><code>:frowning:</code></td><td style="text-align: center;">😦</td></tr><tr class="odd"><td style="text-align: center;"><code>:anguished:</code></td><td style="text-align: center;">😧</td><td style="text-align: center;"><code>:open_mouth:</code></td><td style="text-align: center;">😮</td></tr><tr class="even"><td style="text-align: center;"><code>:confused:</code></td><td style="text-align: center;">😕</td><td style="text-align: center;"><code>:hushed:</code></td><td style="text-align: center;">😯</td></tr><tr class="odd"><td style="text-align: center;"><code>:expressionless:</code></td><td style="text-align: center;">😑</td><td style="text-align: center;"><code>:unamused:</code></td><td style="text-align: center;">😒</td></tr><tr class="even"><td style="text-align: center;"><code>:sweat_smile:</code></td><td style="text-align: center;">😅</td><td style="text-align: center;"><code>:sweat:</code></td><td style="text-align: center;">😓</td></tr></tbody></table><h2 id="字体">字体</h2><table><thead><tr class="header"><th style="text-align: center;">输入</th><th style="text-align: center;">说明</th><th style="text-align: center;">实例</th><th style="text-align: center;">输入</th><th style="text-align: center;">说明</th><th style="text-align: center;">实例</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\rm{D}$</code></td><td style="text-align: center;">罗马体</td><td style="text-align: center;"><span class="math inline">\(\rm{D}\)</span></td><td style="text-align: center;"><code>$\cal{D}$</code></td><td style="text-align: center;">花体</td><td style="text-align: center;"><span class="math inline">\(\cal{D}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\it{D}$</code></td><td style="text-align: center;">意大利体</td><td style="text-align: center;"><span class="math inline">\(\it{D}\)</span></td><td style="text-align: center;"><code>$\Bbb{D}$</code></td><td style="text-align: center;">黑板粗体</td><td style="text-align: center;"><span class="math inline">\(\Bbb{D}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\bf{D}$</code></td><td style="text-align: center;">粗体</td><td style="text-align: center;"><span class="math inline">\(\bf{D}\)</span></td><td style="text-align: center;"><code>$\mit{D}$</code></td><td style="text-align: center;">数学斜体</td><td style="text-align: center;"><span class="math inline">\(\mit{D}\)</span></td></tr><tr class="even"><td style="text-align: center;"><code>$\sf{D}$</code></td><td style="text-align: center;">等线体</td><td style="text-align: center;"><span class="math inline">\(\sf{D}\)</span></td><td style="text-align: center;"><code>$\scr{D}$</code></td><td style="text-align: center;">手写体</td><td style="text-align: center;"><span class="math inline">\(\scr{D}\)</span></td></tr><tr class="odd"><td style="text-align: center;"><code>$\tt{D}$</code></td><td style="text-align: center;">打字机体</td><td style="text-align: center;"><span class="math inline">\(\tt{D}\)</span></td><td style="text-align: center;"><code>$\boldsymbol{D}$</code></td><td style="text-align: center;">黑体</td><td style="text-align: center;"><span class="math inline">\(\boldsymbol{D}\)</span></td></tr></tbody></table><h2 id="颜色">颜色</h2><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">命令</th><th style="text-align: center;">显示</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>$\color{red}{红色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FF0000&gt;红色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FF0000">红色</font></td></tr><tr class="even"><td style="text-align: center;"><code>$\color{green}{绿色}$</code></td><td style="text-align: center;"><code>&lt;font color=#00FF00&gt;绿色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#00FF00">绿色</font></td></tr><tr class="odd"><td style="text-align: center;"><code>$\color{blue}{蓝色}$</code></td><td style="text-align: center;"><code>&lt;font color=#0000FF&gt;蓝色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#0000FF">蓝色</font></td></tr><tr class="even"><td style="text-align: center;"><code>$\color{cyan}{青色}$</code></td><td style="text-align: center;"><code>&lt;font color=#00FFFF&gt;青色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#00FFFF">青色</font></td></tr><tr class="odd"><td style="text-align: center;"><code>$\color{yellow}{黄色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FFFF00&gt;黄色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FFFF00">黄色</font></td></tr><tr class="even"><td style="text-align: center;"><code>$\color{purple}{紫色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FF00FF&gt;紫色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FF00FF">紫色</font></td></tr><tr class="odd"><td style="text-align: center;"><code>$\color{orange}{橙色}$</code></td><td style="text-align: center;"><code>&lt;font color=#FF6100&gt;橙色&lt;/font&gt;</code></td><td style="text-align: center;"><font color="#FF6100">橙色</font></td></tr></tbody></table><h2 id="标题">标题</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h2 id="字体-1">字体</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗文字**</span> 对应 <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>加粗文字<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span> 及 <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>加粗文字<span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="emphasis">*倾斜文字*</span> 对应 <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>倾斜文字<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 及 <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>倾斜文字<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line"><span class="strong">***斜体加粗文字**</span>* </span><br><span class="line">~~加删除线文字~~ 对应 <span class="xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>加删除线文字<span class="xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="引用">引用</h2><p>多个&gt;用于逐层嵌套</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br><span class="line">&gt;&gt;引用内容</span><br></pre></td></tr></table></figure><h2 id="分割线">分割线</h2><p>三个或者三个以上的 - 或者 *,效果一样</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure><h2 id="列表">列表</h2><ul><li>无序列表使用*或+或-标识</li><li>有序列表使用数字加.标识，例如：1.</li></ul><h2 id="表格">表格</h2><p>短斜杠(数量至少有一个)左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:-:|:-:|:-:</span><br><span class="line">1|2|3</span><br><span class="line">4|5|6</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: center;">表头</th><th style="text-align: center;">条目一</th><th style="text-align: center;">条目二</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;">3</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">5</td><td style="text-align: center;">6</td></tr></tbody></table><h2 id="pandoc版markdown与标准版的区别"><span class="math inline">\(pandoc\)</span>版<span class="math inline">\(markdown\)</span>与标准版的区别</h2><p>标准Markdown语法并不要求在标题前添加一个空行，但是Pandoc语法却要求标题前添加一个空行（除了文档开头）</p><h1 id="html">Html</h1><p><a href="https://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">学习的地方</a></p><h2 id="基本文档">基本文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;文档标题&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">可见文本...</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">    &lt;p&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;br&gt; （换行）</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="基本元素">基本元素</h2><b>粗体文本</b> <code class="language-cpp"> int exgcd(int x, int y, int &amp;a, int &amp;b) { if (y == 0) { return a = 1, b = 0, x; } else { int g = exgcd(y, x % y, b, a); b -= x / y * a; return g; } }</code> <em>强调文本</em> <i>斜体文本</i> <kbd>键盘输入</kbd><pre>预格式化文本</pre><small>更小的文本</small> <strong>重要的文本</strong> <abbr>缩写</abbr><br><address>联系信息</address><bdo>文字方向</bdo><blockquote>从另一个源引用的部分</blockquote><cite>工作的名称</cite> <del>删除的文本</del> <ins>插入的文本</ins> <sub>下标文本</sub> <sup>上标文本</sup>本 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 列表与表格</span><br><span class="line">&lt;ul&gt;&lt;li&gt;Coffee&lt;&#x2F;li&gt;&lt;li&gt;Milk&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;ol&gt;&lt;li&gt;Cola&lt;&#x2F;li&gt;&lt;li&gt;sara&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;dl&gt;&lt;!--定义列表--&gt;</span><br><span class="line">    &lt;dt&gt;Coffee&lt;&#x2F;dt&gt;&lt;!--自定义列表项目--&gt;&lt;dd&gt;- Black hot drink&lt;&#x2F;dd&gt;&lt;!--自定义列表项目--&gt;</span><br><span class="line">    &lt;dt&gt;Milk&lt;&#x2F;dt&gt;&lt;dd&gt;- White cold drink&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;Header 1&lt;&#x2F;th&gt;&lt;th&gt;Header 2&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;row 1, cell 1&lt;&#x2F;td&gt;&lt;td&gt;row 1, cell 2&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;row 2, cell 1&lt;&#x2F;td&gt;&lt;td&gt;row 2, cell 2&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;th&gt;January &lt;dialog open&gt;This is an open dialog window&lt;&#x2F;dialog&gt;&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;th&gt;February&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;th&gt;March&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;31&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;28&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;31&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">## 图片</span><br><span class="line"></span><br><span class="line">书签：</span><br><span class="line">&lt;a id&#x3D;&quot;tips&quot;&gt;提示部分&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;#tips&quot;&gt;跳到提示部分&lt;&#x2F;a&gt;</span><br><span class="line">#### 框架</span><br><span class="line">&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;AbelYang1&quot; width&#x3D;&quot;400&quot; height&#x3D;&quot;300&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.write(&quot;Hello World!&quot;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;noscript&gt;抱歉，你的浏览器不支持 JavaScript!&lt;&#x2F;noscript&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;Copyright 1999-2018.&lt;&#x2F;summary&gt;</span><br><span class="line">  &lt;p&gt; - by Refsnes Data. All Rights Reserved.&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;All content and graphics on this web site are the property of the company Refsnes Data.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><details><summary>Copyright 1999-2018.</summary><p><ul><li>by Refsnes Data. All Rights Reserved.</li></ul></p><p>All content and graphics on this web site are the property of the company Refsnes Data.</p></details><p style="font-family:&#39;Courier New&#39;">This is another paragraph.</p><style type="text/css">span.highlight{background-color:yellow}</style><p><span class="highlight">这是文本。</span></p><footer><p>Posted by: 2inf</p><p>Contact information: <a href="2inf.top@gmail.com"> 2inf.top@gmail.com</a>.</p></footer>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
